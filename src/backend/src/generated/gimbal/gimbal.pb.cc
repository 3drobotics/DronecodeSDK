// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gimbal/gimbal.proto

#include "gimbal/gimbal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_gimbal_2fgimbal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GimbalResult_gimbal_2fgimbal_2eproto;
namespace mavsdk {
namespace rpc {
namespace gimbal {
class SetPitchAndYawRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetPitchAndYawRequest> _instance;
} _SetPitchAndYawRequest_default_instance_;
class SetPitchAndYawResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetPitchAndYawResponse> _instance;
} _SetPitchAndYawResponse_default_instance_;
class SetModeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetModeRequest> _instance;
} _SetModeRequest_default_instance_;
class SetModeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetModeResponse> _instance;
} _SetModeResponse_default_instance_;
class GimbalResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GimbalResult> _instance;
} _GimbalResult_default_instance_;
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsSetPitchAndYawRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetPitchAndYawRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetPitchAndYawRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetPitchAndYawRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetPitchAndYawRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsSetPitchAndYawResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetPitchAndYawResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetPitchAndYawResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetPitchAndYawResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetPitchAndYawResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsSetModeRequest_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetModeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetModeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetModeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetModeRequest_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetModeRequest_gimbal_2fgimbal_2eproto}, {}};

static void InitDefaultsSetModeResponse_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_SetModeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::SetModeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::SetModeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetModeResponse_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetModeResponse_gimbal_2fgimbal_2eproto}, {
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base,}};

static void InitDefaultsGimbalResult_gimbal_2fgimbal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::gimbal::_GimbalResult_default_instance_;
    new (ptr) ::mavsdk::rpc::gimbal::GimbalResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::gimbal::GimbalResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GimbalResult_gimbal_2fgimbal_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGimbalResult_gimbal_2fgimbal_2eproto}, {}};

void InitDefaults_gimbal_2fgimbal_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetModeRequest_gimbal_2fgimbal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetModeResponse_gimbal_2fgimbal_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_gimbal_2fgimbal_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_gimbal_2fgimbal_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_gimbal_2fgimbal_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_gimbal_2fgimbal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawRequest, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetPitchAndYawResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeRequest, gimbal_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::SetModeResponse, gimbal_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::gimbal::GimbalResult, result_str_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchAndYawRequest)},
  { 7, -1, sizeof(::mavsdk::rpc::gimbal::SetPitchAndYawResponse)},
  { 13, -1, sizeof(::mavsdk::rpc::gimbal::SetModeRequest)},
  { 19, -1, sizeof(::mavsdk::rpc::gimbal::SetModeResponse)},
  { 25, -1, sizeof(::mavsdk::rpc::gimbal::GimbalResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::gimbal::_SetPitchAndYawRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::gimbal::_SetPitchAndYawResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::gimbal::_SetModeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::gimbal::_SetModeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::gimbal::_GimbalResult_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_gimbal_2fgimbal_2eproto = {
  {}, AddDescriptors_gimbal_2fgimbal_2eproto, "gimbal/gimbal.proto", schemas,
  file_default_instances, TableStruct_gimbal_2fgimbal_2eproto::offsets,
  file_level_metadata_gimbal_2fgimbal_2eproto, 5, file_level_enum_descriptors_gimbal_2fgimbal_2eproto, file_level_service_descriptors_gimbal_2fgimbal_2eproto,
};

const char descriptor_table_protodef_gimbal_2fgimbal_2eproto[] =
  "\n\023gimbal/gimbal.proto\022\021mavsdk.rpc.gimbal"
  "\";\n\025SetPitchAndYawRequest\022\021\n\tpitch_deg\030\001"
  " \001(\002\022\017\n\007yaw_deg\030\002 \001(\002\"P\n\026SetPitchAndYawR"
  "esponse\0226\n\rgimbal_result\030\001 \001(\0132\037.mavsdk."
  "rpc.gimbal.GimbalResult\"D\n\016SetModeReques"
  "t\0222\n\013gimbal_mode\030\001 \001(\0162\035.mavsdk.rpc.gimb"
  "al.GimbalMode\"I\n\017SetModeResponse\0226\n\rgimb"
  "al_result\030\001 \001(\0132\037.mavsdk.rpc.gimbal.Gimb"
  "alResult\"\227\001\n\014GimbalResult\0226\n\006result\030\001 \001("
  "\0162&.mavsdk.rpc.gimbal.GimbalResult.Resul"
  "t\022\022\n\nresult_str\030\002 \001(\t\";\n\006Result\022\013\n\007SUCCE"
  "SS\020\000\022\t\n\005ERROR\020\001\022\013\n\007TIMEOUT\020\002\022\014\n\007UNKNOWN\020"
  "\350\007**\n\nGimbalMode\022\016\n\nYAW_FOLLOW\020\000\022\014\n\010YAW_"
  "LOCK\020\0012\314\001\n\rGimbalService\022g\n\016SetPitchAndY"
  "aw\022(.mavsdk.rpc.gimbal.SetPitchAndYawReq"
  "uest\032).mavsdk.rpc.gimbal.SetPitchAndYawR"
  "esponse\"\000\022R\n\007SetMode\022!.mavsdk.rpc.gimbal"
  ".SetModeRequest\032\".mavsdk.rpc.gimbal.SetM"
  "odeResponse\"\000B\037\n\020io.mavsdk.gimbalB\013Gimba"
  "lProtob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_gimbal_2fgimbal_2eproto = {
  false, InitDefaults_gimbal_2fgimbal_2eproto, 
  descriptor_table_protodef_gimbal_2fgimbal_2eproto,
  "gimbal/gimbal.proto", &assign_descriptors_table_gimbal_2fgimbal_2eproto, 774,
};

void AddDescriptors_gimbal_2fgimbal_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_gimbal_2fgimbal_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gimbal_2fgimbal_2eproto = []() { AddDescriptors_gimbal_2fgimbal_2eproto(); return true; }();
namespace mavsdk {
namespace rpc {
namespace gimbal {
const ::google::protobuf::EnumDescriptor* GimbalResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[0];
}
bool GimbalResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 1000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GimbalResult_Result GimbalResult::SUCCESS;
const GimbalResult_Result GimbalResult::ERROR;
const GimbalResult_Result GimbalResult::TIMEOUT;
const GimbalResult_Result GimbalResult::UNKNOWN;
const GimbalResult_Result GimbalResult::Result_MIN;
const GimbalResult_Result GimbalResult::Result_MAX;
const int GimbalResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GimbalMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_gimbal_2fgimbal_2eproto);
  return file_level_enum_descriptors_gimbal_2fgimbal_2eproto[1];
}
bool GimbalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SetPitchAndYawRequest::InitAsDefaultInstance() {
}
class SetPitchAndYawRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPitchAndYawRequest::kPitchDegFieldNumber;
const int SetPitchAndYawRequest::kYawDegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPitchAndYawRequest::SetPitchAndYawRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
}
SetPitchAndYawRequest::SetPitchAndYawRequest(const SetPitchAndYawRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_deg_, &from.pitch_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&pitch_deg_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
}

void SetPitchAndYawRequest::SharedCtor() {
  ::memset(&pitch_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&pitch_deg_)) + sizeof(yaw_deg_));
}

SetPitchAndYawRequest::~SetPitchAndYawRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  SharedDtor();
}

void SetPitchAndYawRequest::SharedDtor() {
}

void SetPitchAndYawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPitchAndYawRequest& SetPitchAndYawRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetPitchAndYawRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetPitchAndYawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pitch_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&pitch_deg_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetPitchAndYawRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetPitchAndYawRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float pitch_deg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_pitch_deg(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float yaw_deg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_yaw_deg(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetPitchAndYawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch_deg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_deg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetPitchAndYawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch_deg = 1;
  if (this->pitch_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch_deg(), output);
  }

  // float yaw_deg = 2;
  if (this->yaw_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw_deg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
}

::google::protobuf::uint8* SetPitchAndYawRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch_deg = 1;
  if (this->pitch_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch_deg(), target);
  }

  // float yaw_deg = 2;
  if (this->yaw_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw_deg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  return target;
}

size_t SetPitchAndYawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch_deg = 1;
  if (this->pitch_deg() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 2;
  if (this->yaw_deg() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPitchAndYawRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPitchAndYawRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SetPitchAndYawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
    MergeFrom(*source);
  }
}

void SetPitchAndYawRequest::MergeFrom(const SetPitchAndYawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch_deg() != 0) {
    set_pitch_deg(from.pitch_deg());
  }
  if (from.yaw_deg() != 0) {
    set_yaw_deg(from.yaw_deg());
  }
}

void SetPitchAndYawRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPitchAndYawRequest::CopyFrom(const SetPitchAndYawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPitchAndYawRequest::IsInitialized() const {
  return true;
}

void SetPitchAndYawRequest::Swap(SetPitchAndYawRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPitchAndYawRequest::InternalSwap(SetPitchAndYawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pitch_deg_, other->pitch_deg_);
  swap(yaw_deg_, other->yaw_deg_);
}

::google::protobuf::Metadata SetPitchAndYawRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gimbal_2fgimbal_2eproto);
  return ::file_level_metadata_gimbal_2fgimbal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetPitchAndYawResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_SetPitchAndYawResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class SetPitchAndYawResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetPitchAndYawResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetPitchAndYawResponse::HasBitSetters::gimbal_result(const SetPitchAndYawResponse* msg) {
  return *msg->gimbal_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetPitchAndYawResponse::kGimbalResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetPitchAndYawResponse::SetPitchAndYawResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
}
SetPitchAndYawResponse::SetPitchAndYawResponse(const SetPitchAndYawResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
}

void SetPitchAndYawResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

SetPitchAndYawResponse::~SetPitchAndYawResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  SharedDtor();
}

void SetPitchAndYawResponse::SharedDtor() {
  if (this != internal_default_instance()) delete gimbal_result_;
}

void SetPitchAndYawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPitchAndYawResponse& SetPitchAndYawResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetPitchAndYawResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetPitchAndYawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetPitchAndYawResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetPitchAndYawResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::gimbal::GimbalResult::_InternalParse;
        object = msg->mutable_gimbal_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetPitchAndYawResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gimbal_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetPitchAndYawResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::gimbal_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
}

::google::protobuf::uint8* SetPitchAndYawResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::gimbal_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  return target;
}

size_t SetPitchAndYawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPitchAndYawResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPitchAndYawResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SetPitchAndYawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
    MergeFrom(*source);
  }
}

void SetPitchAndYawResponse::MergeFrom(const SetPitchAndYawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from.gimbal_result());
  }
}

void SetPitchAndYawResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPitchAndYawResponse::CopyFrom(const SetPitchAndYawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetPitchAndYawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPitchAndYawResponse::IsInitialized() const {
  return true;
}

void SetPitchAndYawResponse::Swap(SetPitchAndYawResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetPitchAndYawResponse::InternalSwap(SetPitchAndYawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::google::protobuf::Metadata SetPitchAndYawResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gimbal_2fgimbal_2eproto);
  return ::file_level_metadata_gimbal_2fgimbal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetModeRequest::InitAsDefaultInstance() {
}
class SetModeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetModeRequest::kGimbalModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetModeRequest::SetModeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.gimbal.SetModeRequest)
}
SetModeRequest::SetModeRequest(const SetModeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gimbal_mode_ = from.gimbal_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetModeRequest)
}

void SetModeRequest::SharedCtor() {
  gimbal_mode_ = 0;
}

SetModeRequest::~SetModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetModeRequest)
  SharedDtor();
}

void SetModeRequest::SharedDtor() {
}

void SetModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetModeRequest& SetModeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetModeRequest_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gimbal_mode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetModeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetModeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_gimbal_mode(static_cast<::mavsdk::rpc::gimbal::GimbalMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.gimbal.SetModeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gimbal_mode(static_cast< ::mavsdk::rpc::gimbal::GimbalMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.gimbal.SetModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.gimbal.SetModeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.gimbal.SetModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
  if (this->gimbal_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gimbal_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.gimbal.SetModeRequest)
}

::google::protobuf::uint8* SetModeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
  if (this->gimbal_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gimbal_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetModeRequest)
  return target;
}

size_t SetModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetModeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;
  if (this->gimbal_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gimbal_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetModeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SetModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetModeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetModeRequest)
    MergeFrom(*source);
  }
}

void SetModeRequest::MergeFrom(const SetModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gimbal_mode() != 0) {
    set_gimbal_mode(from.gimbal_mode());
  }
}

void SetModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetModeRequest::CopyFrom(const SetModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetModeRequest::IsInitialized() const {
  return true;
}

void SetModeRequest::Swap(SetModeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetModeRequest::InternalSwap(SetModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gimbal_mode_, other->gimbal_mode_);
}

::google::protobuf::Metadata SetModeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gimbal_2fgimbal_2eproto);
  return ::file_level_metadata_gimbal_2fgimbal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetModeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::gimbal::_SetModeResponse_default_instance_._instance.get_mutable()->gimbal_result_ = const_cast< ::mavsdk::rpc::gimbal::GimbalResult*>(
      ::mavsdk::rpc::gimbal::GimbalResult::internal_default_instance());
}
class SetModeResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::gimbal::GimbalResult& gimbal_result(const SetModeResponse* msg);
};

const ::mavsdk::rpc::gimbal::GimbalResult&
SetModeResponse::HasBitSetters::gimbal_result(const SetModeResponse* msg) {
  return *msg->gimbal_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetModeResponse::kGimbalResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetModeResponse::SetModeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.gimbal.SetModeResponse)
}
SetModeResponse::SetModeResponse(const SetModeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gimbal_result()) {
    gimbal_result_ = new ::mavsdk::rpc::gimbal::GimbalResult(*from.gimbal_result_);
  } else {
    gimbal_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.SetModeResponse)
}

void SetModeResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetModeResponse_gimbal_2fgimbal_2eproto.base);
  gimbal_result_ = nullptr;
}

SetModeResponse::~SetModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.SetModeResponse)
  SharedDtor();
}

void SetModeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete gimbal_result_;
}

void SetModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetModeResponse& SetModeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetModeResponse_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void SetModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.SetModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && gimbal_result_ != nullptr) {
    delete gimbal_result_;
  }
  gimbal_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetModeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetModeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::gimbal::GimbalResult::_InternalParse;
        object = msg->mutable_gimbal_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.gimbal.SetModeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gimbal_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.gimbal.SetModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.gimbal.SetModeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.gimbal.SetModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::gimbal_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.gimbal.SetModeResponse)
}

::google::protobuf::uint8* SetModeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.SetModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::gimbal_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.SetModeResponse)
  return target;
}

size_t SetModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.SetModeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;
  if (this->has_gimbal_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gimbal_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetModeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SetModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.SetModeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.SetModeResponse)
    MergeFrom(*source);
  }
}

void SetModeResponse::MergeFrom(const SetModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gimbal_result()) {
    mutable_gimbal_result()->::mavsdk::rpc::gimbal::GimbalResult::MergeFrom(from.gimbal_result());
  }
}

void SetModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetModeResponse::CopyFrom(const SetModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.SetModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetModeResponse::IsInitialized() const {
  return true;
}

void SetModeResponse::Swap(SetModeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetModeResponse::InternalSwap(SetModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gimbal_result_, other->gimbal_result_);
}

::google::protobuf::Metadata SetModeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gimbal_2fgimbal_2eproto);
  return ::file_level_metadata_gimbal_2fgimbal_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GimbalResult::InitAsDefaultInstance() {
}
class GimbalResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GimbalResult::kResultFieldNumber;
const int GimbalResult::kResultStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GimbalResult::GimbalResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.gimbal.GimbalResult)
}
GimbalResult::GimbalResult(const GimbalResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result_str().size() > 0) {
    result_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.gimbal.GimbalResult)
}

void GimbalResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base);
  result_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

GimbalResult::~GimbalResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.gimbal.GimbalResult)
  SharedDtor();
}

void GimbalResult::SharedDtor() {
  result_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GimbalResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GimbalResult& GimbalResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GimbalResult_gimbal_2fgimbal_2eproto.base);
  return *internal_default_instance();
}


void GimbalResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.gimbal.GimbalResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GimbalResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GimbalResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_result(static_cast<::mavsdk::rpc::gimbal::GimbalResult_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string result_str = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.gimbal.GimbalResult.result_str");
        object = msg->mutable_result_str();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GimbalResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.gimbal.GimbalResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::mavsdk::rpc::gimbal::GimbalResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_str().data(), static_cast<int>(this->result_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.gimbal.GimbalResult.result_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.gimbal.GimbalResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.gimbal.GimbalResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GimbalResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.gimbal.GimbalResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_str().data(), static_cast<int>(this->result_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.gimbal.GimbalResult.result_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result_str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.gimbal.GimbalResult)
}

::google::protobuf::uint8* GimbalResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.gimbal.GimbalResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_str().data(), static_cast<int>(this->result_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.gimbal.GimbalResult.result_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result_str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.gimbal.GimbalResult)
  return target;
}

size_t GimbalResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.gimbal.GimbalResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_str());
  }

  // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GimbalResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.gimbal.GimbalResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GimbalResult* source =
      ::google::protobuf::DynamicCastToGenerated<GimbalResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.gimbal.GimbalResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.gimbal.GimbalResult)
    MergeFrom(*source);
  }
}

void GimbalResult::MergeFrom(const GimbalResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.gimbal.GimbalResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void GimbalResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.gimbal.GimbalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GimbalResult::CopyFrom(const GimbalResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.gimbal.GimbalResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GimbalResult::IsInitialized() const {
  return true;
}

void GimbalResult::Swap(GimbalResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GimbalResult::InternalSwap(GimbalResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata GimbalResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_gimbal_2fgimbal_2eproto);
  return ::file_level_metadata_gimbal_2fgimbal_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gimbal
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetPitchAndYawRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetPitchAndYawRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::gimbal::SetPitchAndYawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetPitchAndYawResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetPitchAndYawResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::gimbal::SetPitchAndYawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetModeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetModeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::gimbal::SetModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::SetModeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::SetModeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::gimbal::SetModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::gimbal::GimbalResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::gimbal::GimbalResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::gimbal::GimbalResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
