// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera/camera.proto

#include "camera/camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraResult_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CameraStatus_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EulerAngle_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Option_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VideoStreamSettings_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SettingOptions_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Setting_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VideoStreamInfo_camera_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_camera_2fcamera_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CaptureInfo_camera_2fcamera_2eproto;
namespace mavsdk {
namespace rpc {
namespace camera {
class TakePhotoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TakePhotoRequest> _instance;
} _TakePhotoRequest_default_instance_;
class TakePhotoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TakePhotoResponse> _instance;
} _TakePhotoResponse_default_instance_;
class StartPhotoIntervalRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartPhotoIntervalRequest> _instance;
} _StartPhotoIntervalRequest_default_instance_;
class StartPhotoIntervalResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartPhotoIntervalResponse> _instance;
} _StartPhotoIntervalResponse_default_instance_;
class StopPhotoIntervalRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopPhotoIntervalRequest> _instance;
} _StopPhotoIntervalRequest_default_instance_;
class StopPhotoIntervalResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopPhotoIntervalResponse> _instance;
} _StopPhotoIntervalResponse_default_instance_;
class StartVideoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartVideoRequest> _instance;
} _StartVideoRequest_default_instance_;
class StartVideoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartVideoResponse> _instance;
} _StartVideoResponse_default_instance_;
class StopVideoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopVideoRequest> _instance;
} _StopVideoRequest_default_instance_;
class StopVideoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopVideoResponse> _instance;
} _StopVideoResponse_default_instance_;
class StartVideoStreamingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartVideoStreamingRequest> _instance;
} _StartVideoStreamingRequest_default_instance_;
class StartVideoStreamingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartVideoStreamingResponse> _instance;
} _StartVideoStreamingResponse_default_instance_;
class StopVideoStreamingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopVideoStreamingRequest> _instance;
} _StopVideoStreamingRequest_default_instance_;
class StopVideoStreamingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopVideoStreamingResponse> _instance;
} _StopVideoStreamingResponse_default_instance_;
class SetModeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetModeRequest> _instance;
} _SetModeRequest_default_instance_;
class SetModeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetModeResponse> _instance;
} _SetModeResponse_default_instance_;
class SubscribeModeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeModeRequest> _instance;
} _SubscribeModeRequest_default_instance_;
class ModeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModeResponse> _instance;
} _ModeResponse_default_instance_;
class SubscribeVideoStreamInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeVideoStreamInfoRequest> _instance;
} _SubscribeVideoStreamInfoRequest_default_instance_;
class VideoStreamInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoStreamInfoResponse> _instance;
} _VideoStreamInfoResponse_default_instance_;
class SubscribeCaptureInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeCaptureInfoRequest> _instance;
} _SubscribeCaptureInfoRequest_default_instance_;
class CaptureInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaptureInfoResponse> _instance;
} _CaptureInfoResponse_default_instance_;
class SubscribeCameraStatusRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeCameraStatusRequest> _instance;
} _SubscribeCameraStatusRequest_default_instance_;
class CameraStatusResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraStatusResponse> _instance;
} _CameraStatusResponse_default_instance_;
class SubscribeCurrentSettingsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeCurrentSettingsRequest> _instance;
} _SubscribeCurrentSettingsRequest_default_instance_;
class CurrentSettingsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrentSettingsResponse> _instance;
} _CurrentSettingsResponse_default_instance_;
class SubscribePossibleSettingOptionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribePossibleSettingOptionsRequest> _instance;
} _SubscribePossibleSettingOptionsRequest_default_instance_;
class PossibleSettingOptionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PossibleSettingOptionsResponse> _instance;
} _PossibleSettingOptionsResponse_default_instance_;
class SetSettingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetSettingRequest> _instance;
} _SetSettingRequest_default_instance_;
class SetSettingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetSettingResponse> _instance;
} _SetSettingResponse_default_instance_;
class CameraResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraResult> _instance;
} _CameraResult_default_instance_;
class CaptureInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CaptureInfo> _instance;
} _CaptureInfo_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class EulerAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EulerAngle> _instance;
} _EulerAngle_default_instance_;
class VideoStreamSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoStreamSettings> _instance;
} _VideoStreamSettings_default_instance_;
class VideoStreamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VideoStreamInfo> _instance;
} _VideoStreamInfo_default_instance_;
class CameraStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraStatus> _instance;
} _CameraStatus_default_instance_;
class SettingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Setting> _instance;
} _Setting_default_instance_;
class OptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Option> _instance;
} _Option_default_instance_;
class SettingOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingOptions> _instance;
} _SettingOptions_default_instance_;
}  // namespace camera
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsTakePhotoRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_TakePhotoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::TakePhotoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::TakePhotoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TakePhotoRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTakePhotoRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsTakePhotoResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_TakePhotoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::TakePhotoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::TakePhotoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TakePhotoResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTakePhotoResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsStartPhotoIntervalRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StartPhotoIntervalRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StartPhotoIntervalRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StartPhotoIntervalRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartPhotoIntervalRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartPhotoIntervalRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsStartPhotoIntervalResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StartPhotoIntervalResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StartPhotoIntervalResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StartPhotoIntervalResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartPhotoIntervalResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartPhotoIntervalResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsStopPhotoIntervalRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StopPhotoIntervalRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StopPhotoIntervalRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StopPhotoIntervalRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopPhotoIntervalRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopPhotoIntervalRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsStopPhotoIntervalResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StopPhotoIntervalResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StopPhotoIntervalResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StopPhotoIntervalResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopPhotoIntervalResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopPhotoIntervalResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsStartVideoRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StartVideoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StartVideoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StartVideoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartVideoRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartVideoRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsStartVideoResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StartVideoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StartVideoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StartVideoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartVideoResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartVideoResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsStopVideoRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StopVideoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StopVideoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StopVideoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopVideoRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopVideoRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsStopVideoResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StopVideoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StopVideoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StopVideoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopVideoResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopVideoResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsStartVideoStreamingRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StartVideoStreamingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StartVideoStreamingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StartVideoStreamingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartVideoStreamingRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartVideoStreamingRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsStartVideoStreamingResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StartVideoStreamingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StartVideoStreamingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StartVideoStreamingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartVideoStreamingResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartVideoStreamingResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsStopVideoStreamingRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StopVideoStreamingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StopVideoStreamingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StopVideoStreamingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopVideoStreamingRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopVideoStreamingRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsStopVideoStreamingResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_StopVideoStreamingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::StopVideoStreamingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::StopVideoStreamingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopVideoStreamingResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopVideoStreamingResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSetModeRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SetModeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SetModeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SetModeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetModeRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetModeRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsSetModeResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SetModeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SetModeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SetModeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetModeResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetModeResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSubscribeModeRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SubscribeModeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SubscribeModeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SubscribeModeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeModeRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeModeRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsModeResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_ModeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::ModeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::ModeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ModeResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsModeResponse_camera_2fcamera_2eproto}, {}};

static void InitDefaultsSubscribeVideoStreamInfoRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SubscribeVideoStreamInfoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeVideoStreamInfoRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeVideoStreamInfoRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsVideoStreamInfoResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_VideoStreamInfoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::VideoStreamInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::VideoStreamInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VideoStreamInfoResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVideoStreamInfoResponse_camera_2fcamera_2eproto}, {
      &scc_info_VideoStreamInfo_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSubscribeCaptureInfoRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SubscribeCaptureInfoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SubscribeCaptureInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SubscribeCaptureInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeCaptureInfoRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeCaptureInfoRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsCaptureInfoResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_CaptureInfoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::CaptureInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::CaptureInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CaptureInfoResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCaptureInfoResponse_camera_2fcamera_2eproto}, {
      &scc_info_CaptureInfo_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSubscribeCameraStatusRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SubscribeCameraStatusRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SubscribeCameraStatusRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SubscribeCameraStatusRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeCameraStatusRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeCameraStatusRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsCameraStatusResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_CameraStatusResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::CameraStatusResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::CameraStatusResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CameraStatusResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCameraStatusResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraStatus_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSubscribeCurrentSettingsRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SubscribeCurrentSettingsRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeCurrentSettingsRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeCurrentSettingsRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsCurrentSettingsResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_CurrentSettingsResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::CurrentSettingsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::CurrentSettingsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CurrentSettingsResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCurrentSettingsResponse_camera_2fcamera_2eproto}, {
      &scc_info_Setting_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSubscribePossibleSettingOptionsRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SubscribePossibleSettingOptionsRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribePossibleSettingOptionsRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribePossibleSettingOptionsRequest_camera_2fcamera_2eproto}, {}};

static void InitDefaultsPossibleSettingOptionsResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_PossibleSettingOptionsResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::PossibleSettingOptionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::PossibleSettingOptionsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PossibleSettingOptionsResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPossibleSettingOptionsResponse_camera_2fcamera_2eproto}, {
      &scc_info_SettingOptions_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSetSettingRequest_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SetSettingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SetSettingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SetSettingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetSettingRequest_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetSettingRequest_camera_2fcamera_2eproto}, {
      &scc_info_Setting_camera_2fcamera_2eproto.base,}};

static void InitDefaultsSetSettingResponse_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SetSettingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SetSettingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SetSettingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetSettingResponse_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetSettingResponse_camera_2fcamera_2eproto}, {
      &scc_info_CameraResult_camera_2fcamera_2eproto.base,}};

static void InitDefaultsCameraResult_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_CameraResult_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::CameraResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::CameraResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraResult_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraResult_camera_2fcamera_2eproto}, {}};

static void InitDefaultsCaptureInfo_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_CaptureInfo_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::CaptureInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::CaptureInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CaptureInfo_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCaptureInfo_camera_2fcamera_2eproto}, {
      &scc_info_Position_camera_2fcamera_2eproto.base,
      &scc_info_Quaternion_camera_2fcamera_2eproto.base,
      &scc_info_EulerAngle_camera_2fcamera_2eproto.base,}};

static void InitDefaultsPosition_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_Position_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition_camera_2fcamera_2eproto}, {}};

static void InitDefaultsQuaternion_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_Quaternion_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::Quaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuaternion_camera_2fcamera_2eproto}, {}};

static void InitDefaultsEulerAngle_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_EulerAngle_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::EulerAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::EulerAngle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EulerAngle_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEulerAngle_camera_2fcamera_2eproto}, {}};

static void InitDefaultsVideoStreamSettings_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_VideoStreamSettings_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::VideoStreamSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::VideoStreamSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VideoStreamSettings_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVideoStreamSettings_camera_2fcamera_2eproto}, {}};

static void InitDefaultsVideoStreamInfo_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_VideoStreamInfo_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::VideoStreamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::VideoStreamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VideoStreamInfo_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVideoStreamInfo_camera_2fcamera_2eproto}, {
      &scc_info_VideoStreamSettings_camera_2fcamera_2eproto.base,}};

static void InitDefaultsCameraStatus_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_CameraStatus_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::CameraStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::CameraStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CameraStatus_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCameraStatus_camera_2fcamera_2eproto}, {}};

static void InitDefaultsSetting_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_Setting_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::Setting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::Setting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Setting_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetting_camera_2fcamera_2eproto}, {
      &scc_info_Option_camera_2fcamera_2eproto.base,}};

static void InitDefaultsOption_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_Option_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::Option();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::Option::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Option_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOption_camera_2fcamera_2eproto}, {}};

static void InitDefaultsSettingOptions_camera_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::camera::_SettingOptions_default_instance_;
    new (ptr) ::mavsdk::rpc::camera::SettingOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::camera::SettingOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SettingOptions_camera_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettingOptions_camera_2fcamera_2eproto}, {
      &scc_info_Option_camera_2fcamera_2eproto.base,}};

void InitDefaults_camera_2fcamera_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TakePhotoRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TakePhotoResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartPhotoIntervalRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartPhotoIntervalResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopPhotoIntervalRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopPhotoIntervalResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartVideoRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartVideoResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopVideoRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopVideoResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartVideoStreamingRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartVideoStreamingResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopVideoStreamingRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopVideoStreamingResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetModeRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetModeResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeModeRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ModeResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeVideoStreamInfoRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoStreamInfoResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeCaptureInfoRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CaptureInfoResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeCameraStatusRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraStatusResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeCurrentSettingsRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrentSettingsResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribePossibleSettingOptionsRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PossibleSettingOptionsResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetSettingRequest_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetSettingResponse_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraResult_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CaptureInfo_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Quaternion_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EulerAngle_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoStreamSettings_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VideoStreamInfo_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraStatus_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Setting_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Option_camera_2fcamera_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingOptions_camera_2fcamera_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_camera_2fcamera_2eproto[41];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_camera_2fcamera_2eproto[4];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_camera_2fcamera_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_camera_2fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::TakePhotoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::TakePhotoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::TakePhotoResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartPhotoIntervalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartPhotoIntervalRequest, interval_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartPhotoIntervalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartPhotoIntervalResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopPhotoIntervalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopPhotoIntervalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopPhotoIntervalResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartVideoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartVideoResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopVideoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopVideoResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartVideoStreamingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartVideoStreamingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StartVideoStreamingResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopVideoStreamingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopVideoStreamingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::StopVideoStreamingResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetModeRequest, camera_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetModeResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SubscribeModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::ModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::ModeResponse, camera_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamInfoResponse, video_stream_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SubscribeCaptureInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfoResponse, capture_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SubscribeCameraStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatusResponse, camera_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CurrentSettingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CurrentSettingsResponse, current_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::PossibleSettingOptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::PossibleSettingOptionsResponse, setting_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetSettingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetSettingRequest, setting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetSettingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SetSettingResponse, camera_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraResult, result_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, position_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, attitude_quaternion_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, attitude_euler_angle_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, time_utc_us_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, is_success_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, index_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CaptureInfo, file_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Position, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Position, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Position, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Position, relative_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Quaternion, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::EulerAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::EulerAngle, roll_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::EulerAngle, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::EulerAngle, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamSettings, frame_rate_hz_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamSettings, horizontal_resolution_pix_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamSettings, vertical_resolution_pix_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamSettings, bit_rate_b_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamSettings, rotation_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamSettings, uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamInfo, video_stream_settings_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::VideoStreamInfo, video_stream_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, video_on_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, photo_interval_on_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, used_storage_mib_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, available_storage_mib_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, total_storage_mib_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, recording_time_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, media_folder_name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::CameraStatus, storage_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Setting, setting_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Setting, setting_description_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Setting, option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Option, option_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::Option, option_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SettingOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SettingOptions, setting_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SettingOptions, setting_description_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::camera::SettingOptions, options_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::camera::TakePhotoRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::camera::TakePhotoResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::camera::StartPhotoIntervalRequest)},
  { 17, -1, sizeof(::mavsdk::rpc::camera::StartPhotoIntervalResponse)},
  { 23, -1, sizeof(::mavsdk::rpc::camera::StopPhotoIntervalRequest)},
  { 28, -1, sizeof(::mavsdk::rpc::camera::StopPhotoIntervalResponse)},
  { 34, -1, sizeof(::mavsdk::rpc::camera::StartVideoRequest)},
  { 39, -1, sizeof(::mavsdk::rpc::camera::StartVideoResponse)},
  { 45, -1, sizeof(::mavsdk::rpc::camera::StopVideoRequest)},
  { 50, -1, sizeof(::mavsdk::rpc::camera::StopVideoResponse)},
  { 56, -1, sizeof(::mavsdk::rpc::camera::StartVideoStreamingRequest)},
  { 61, -1, sizeof(::mavsdk::rpc::camera::StartVideoStreamingResponse)},
  { 67, -1, sizeof(::mavsdk::rpc::camera::StopVideoStreamingRequest)},
  { 72, -1, sizeof(::mavsdk::rpc::camera::StopVideoStreamingResponse)},
  { 78, -1, sizeof(::mavsdk::rpc::camera::SetModeRequest)},
  { 84, -1, sizeof(::mavsdk::rpc::camera::SetModeResponse)},
  { 90, -1, sizeof(::mavsdk::rpc::camera::SubscribeModeRequest)},
  { 95, -1, sizeof(::mavsdk::rpc::camera::ModeResponse)},
  { 101, -1, sizeof(::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest)},
  { 106, -1, sizeof(::mavsdk::rpc::camera::VideoStreamInfoResponse)},
  { 112, -1, sizeof(::mavsdk::rpc::camera::SubscribeCaptureInfoRequest)},
  { 117, -1, sizeof(::mavsdk::rpc::camera::CaptureInfoResponse)},
  { 123, -1, sizeof(::mavsdk::rpc::camera::SubscribeCameraStatusRequest)},
  { 128, -1, sizeof(::mavsdk::rpc::camera::CameraStatusResponse)},
  { 134, -1, sizeof(::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest)},
  { 139, -1, sizeof(::mavsdk::rpc::camera::CurrentSettingsResponse)},
  { 145, -1, sizeof(::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest)},
  { 150, -1, sizeof(::mavsdk::rpc::camera::PossibleSettingOptionsResponse)},
  { 156, -1, sizeof(::mavsdk::rpc::camera::SetSettingRequest)},
  { 162, -1, sizeof(::mavsdk::rpc::camera::SetSettingResponse)},
  { 168, -1, sizeof(::mavsdk::rpc::camera::CameraResult)},
  { 175, -1, sizeof(::mavsdk::rpc::camera::CaptureInfo)},
  { 187, -1, sizeof(::mavsdk::rpc::camera::Position)},
  { 196, -1, sizeof(::mavsdk::rpc::camera::Quaternion)},
  { 205, -1, sizeof(::mavsdk::rpc::camera::EulerAngle)},
  { 213, -1, sizeof(::mavsdk::rpc::camera::VideoStreamSettings)},
  { 224, -1, sizeof(::mavsdk::rpc::camera::VideoStreamInfo)},
  { 231, -1, sizeof(::mavsdk::rpc::camera::CameraStatus)},
  { 244, -1, sizeof(::mavsdk::rpc::camera::Setting)},
  { 252, -1, sizeof(::mavsdk::rpc::camera::Option)},
  { 259, -1, sizeof(::mavsdk::rpc::camera::SettingOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_TakePhotoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_TakePhotoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StartPhotoIntervalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StartPhotoIntervalResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StopPhotoIntervalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StopPhotoIntervalResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StartVideoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StartVideoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StopVideoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StopVideoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StartVideoStreamingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StartVideoStreamingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StopVideoStreamingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_StopVideoStreamingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SetModeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SetModeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SubscribeModeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_ModeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SubscribeVideoStreamInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_VideoStreamInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SubscribeCaptureInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_CaptureInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SubscribeCameraStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_CameraStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SubscribeCurrentSettingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_CurrentSettingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SubscribePossibleSettingOptionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_PossibleSettingOptionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SetSettingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SetSettingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_CameraResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_CaptureInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_EulerAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_VideoStreamSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_VideoStreamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_CameraStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_Setting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_Option_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::camera::_SettingOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_camera_2fcamera_2eproto = {
  {}, AddDescriptors_camera_2fcamera_2eproto, "camera/camera.proto", schemas,
  file_default_instances, TableStruct_camera_2fcamera_2eproto::offsets,
  file_level_metadata_camera_2fcamera_2eproto, 41, file_level_enum_descriptors_camera_2fcamera_2eproto, file_level_service_descriptors_camera_2fcamera_2eproto,
};

const char descriptor_table_protodef_camera_2fcamera_2eproto[] =
  "\n\023camera/camera.proto\022\021mavsdk.rpc.camera"
  "\"\022\n\020TakePhotoRequest\"K\n\021TakePhotoRespons"
  "e\0226\n\rcamera_result\030\001 \001(\0132\037.mavsdk.rpc.ca"
  "mera.CameraResult\"/\n\031StartPhotoIntervalR"
  "equest\022\022\n\ninterval_s\030\001 \001(\002\"T\n\032StartPhoto"
  "IntervalResponse\0226\n\rcamera_result\030\001 \001(\0132"
  "\037.mavsdk.rpc.camera.CameraResult\"\032\n\030Stop"
  "PhotoIntervalRequest\"S\n\031StopPhotoInterva"
  "lResponse\0226\n\rcamera_result\030\001 \001(\0132\037.mavsd"
  "k.rpc.camera.CameraResult\"\023\n\021StartVideoR"
  "equest\"L\n\022StartVideoResponse\0226\n\rcamera_r"
  "esult\030\001 \001(\0132\037.mavsdk.rpc.camera.CameraRe"
  "sult\"\022\n\020StopVideoRequest\"K\n\021StopVideoRes"
  "ponse\0226\n\rcamera_result\030\001 \001(\0132\037.mavsdk.rp"
  "c.camera.CameraResult\"\034\n\032StartVideoStrea"
  "mingRequest\"U\n\033StartVideoStreamingRespon"
  "se\0226\n\rcamera_result\030\001 \001(\0132\037.mavsdk.rpc.c"
  "amera.CameraResult\"\033\n\031StopVideoStreaming"
  "Request\"T\n\032StopVideoStreamingResponse\0226\n"
  "\rcamera_result\030\001 \001(\0132\037.mavsdk.rpc.camera"
  ".CameraResult\"D\n\016SetModeRequest\0222\n\013camer"
  "a_mode\030\001 \001(\0162\035.mavsdk.rpc.camera.CameraM"
  "ode\"I\n\017SetModeResponse\0226\n\rcamera_result\030"
  "\001 \001(\0132\037.mavsdk.rpc.camera.CameraResult\"\026"
  "\n\024SubscribeModeRequest\"B\n\014ModeResponse\0222"
  "\n\013camera_mode\030\001 \001(\0162\035.mavsdk.rpc.camera."
  "CameraMode\"!\n\037SubscribeVideoStreamInfoRe"
  "quest\"X\n\027VideoStreamInfoResponse\022=\n\021vide"
  "o_stream_info\030\001 \001(\0132\".mavsdk.rpc.camera."
  "VideoStreamInfo\"\035\n\033SubscribeCaptureInfoR"
  "equest\"K\n\023CaptureInfoResponse\0224\n\014capture"
  "_info\030\001 \001(\0132\036.mavsdk.rpc.camera.CaptureI"
  "nfo\"\036\n\034SubscribeCameraStatusRequest\"N\n\024C"
  "ameraStatusResponse\0226\n\rcamera_status\030\001 \001"
  "(\0132\037.mavsdk.rpc.camera.CameraStatus\"!\n\037S"
  "ubscribeCurrentSettingsRequest\"O\n\027Curren"
  "tSettingsResponse\0224\n\020current_settings\030\001 "
  "\003(\0132\032.mavsdk.rpc.camera.Setting\"(\n&Subsc"
  "ribePossibleSettingOptionsRequest\"\\\n\036Pos"
  "sibleSettingOptionsResponse\022:\n\017setting_o"
  "ptions\030\001 \003(\0132!.mavsdk.rpc.camera.Setting"
  "Options\"@\n\021SetSettingRequest\022+\n\007setting\030"
  "\001 \001(\0132\032.mavsdk.rpc.camera.Setting\"L\n\022Set"
  "SettingResponse\0226\n\rcamera_result\030\001 \001(\0132\037"
  ".mavsdk.rpc.camera.CameraResult\"\321\001\n\014Came"
  "raResult\0226\n\006result\030\001 \001(\0162&.mavsdk.rpc.ca"
  "mera.CameraResult.Result\022\022\n\nresult_str\030\002"
  " \001(\t\"u\n\006Result\022\013\n\007UNKNOWN\020\000\022\013\n\007SUCCESS\020\001"
  "\022\017\n\013IN_PROGRESS\020\002\022\010\n\004BUSY\020\003\022\n\n\006DENIED\020\004\022"
  "\t\n\005ERROR\020\005\022\013\n\007TIMEOUT\020\006\022\022\n\016WRONG_ARGUMEN"
  "T\020\007\"\377\001\n\013CaptureInfo\022-\n\010position\030\001 \001(\0132\033."
  "mavsdk.rpc.camera.Position\022:\n\023attitude_q"
  "uaternion\030\002 \001(\0132\035.mavsdk.rpc.camera.Quat"
  "ernion\022;\n\024attitude_euler_angle\030\003 \001(\0132\035.m"
  "avsdk.rpc.camera.EulerAngle\022\023\n\013time_utc_"
  "us\030\004 \001(\004\022\022\n\nis_success\030\005 \001(\010\022\r\n\005index\030\006 "
  "\001(\005\022\020\n\010file_url\030\007 \001(\t\"q\n\010Position\022\024\n\014lat"
  "itude_deg\030\001 \001(\001\022\025\n\rlongitude_deg\030\002 \001(\001\022\033"
  "\n\023absolute_altitude_m\030\003 \001(\002\022\033\n\023relative_"
  "altitude_m\030\004 \001(\002\"8\n\nQuaternion\022\t\n\001w\030\001 \001("
  "\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"B\n\nEu"
  "lerAngle\022\020\n\010roll_deg\030\001 \001(\002\022\021\n\tpitch_deg\030"
  "\002 \001(\002\022\017\n\007yaw_deg\030\003 \001(\002\"\251\001\n\023VideoStreamSe"
  "ttings\022\025\n\rframe_rate_hz\030\001 \001(\002\022!\n\031horizon"
  "tal_resolution_pix\030\002 \001(\r\022\037\n\027vertical_res"
  "olution_pix\030\003 \001(\r\022\024\n\014bit_rate_b_s\030\004 \001(\r\022"
  "\024\n\014rotation_deg\030\005 \001(\r\022\013\n\003uri\030\006 \001(\t\"\342\001\n\017V"
  "ideoStreamInfo\022E\n\025video_stream_settings\030"
  "\001 \001(\0132&.mavsdk.rpc.camera.VideoStreamSet"
  "tings\022Q\n\023video_stream_status\030\002 \001(\01624.mav"
  "sdk.rpc.camera.VideoStreamInfo.VideoStre"
  "amStatus\"5\n\021VideoStreamStatus\022\017\n\013NOT_RUN"
  "NING\020\000\022\017\n\013IN_PROGRESS\020\001\"\317\002\n\014CameraStatus"
  "\022\020\n\010video_on\030\001 \001(\010\022\031\n\021photo_interval_on\030"
  "\002 \001(\010\022\030\n\020used_storage_mib\030\003 \001(\002\022\035\n\025avail"
  "able_storage_mib\030\004 \001(\002\022\031\n\021total_storage_"
  "mib\030\005 \001(\002\022\030\n\020recording_time_s\030\006 \001(\002\022\031\n\021m"
  "edia_folder_name\030\007 \001(\t\022E\n\016storage_status"
  "\030\010 \001(\0162-.mavsdk.rpc.camera.CameraStatus."
  "StorageStatus\"B\n\rStorageStatus\022\021\n\rNOT_AV"
  "AILABLE\020\000\022\017\n\013UNFORMATTED\020\001\022\r\n\tFORMATTED\020"
  "\002\"e\n\007Setting\022\022\n\nsetting_id\030\001 \001(\t\022\033\n\023sett"
  "ing_description\030\002 \001(\t\022)\n\006option\030\003 \001(\0132\031."
  "mavsdk.rpc.camera.Option\"7\n\006Option\022\021\n\top"
  "tion_id\030\001 \001(\t\022\032\n\022option_description\030\002 \001("
  "\t\"m\n\016SettingOptions\022\022\n\nsetting_id\030\001 \001(\t\022"
  "\033\n\023setting_description\030\002 \001(\t\022*\n\007options\030"
  "\003 \003(\0132\031.mavsdk.rpc.camera.Option*/\n\nCame"
  "raMode\022\013\n\007UNKNOWN\020\000\022\t\n\005PHOTO\020\001\022\t\n\005VIDEO\020"
  "\0022\205\r\n\rCameraService\022X\n\tTakePhoto\022#.mavsd"
  "k.rpc.camera.TakePhotoRequest\032$.mavsdk.r"
  "pc.camera.TakePhotoResponse\"\000\022s\n\022StartPh"
  "otoInterval\022,.mavsdk.rpc.camera.StartPho"
  "toIntervalRequest\032-.mavsdk.rpc.camera.St"
  "artPhotoIntervalResponse\"\000\022p\n\021StopPhotoI"
  "nterval\022+.mavsdk.rpc.camera.StopPhotoInt"
  "ervalRequest\032,.mavsdk.rpc.camera.StopPho"
  "toIntervalResponse\"\000\022[\n\nStartVideo\022$.mav"
  "sdk.rpc.camera.StartVideoRequest\032%.mavsd"
  "k.rpc.camera.StartVideoResponse\"\000\022X\n\tSto"
  "pVideo\022#.mavsdk.rpc.camera.StopVideoRequ"
  "est\032$.mavsdk.rpc.camera.StopVideoRespons"
  "e\"\000\022v\n\023StartVideoStreaming\022-.mavsdk.rpc."
  "camera.StartVideoStreamingRequest\032..mavs"
  "dk.rpc.camera.StartVideoStreamingRespons"
  "e\"\000\022s\n\022StopVideoStreaming\022,.mavsdk.rpc.c"
  "amera.StopVideoStreamingRequest\032-.mavsdk"
  ".rpc.camera.StopVideoStreamingResponse\"\000"
  "\022R\n\007SetMode\022!.mavsdk.rpc.camera.SetModeR"
  "equest\032\".mavsdk.rpc.camera.SetModeRespon"
  "se\"\000\022]\n\rSubscribeMode\022\'.mavsdk.rpc.camer"
  "a.SubscribeModeRequest\032\037.mavsdk.rpc.came"
  "ra.ModeResponse\"\0000\001\022~\n\030SubscribeVideoStr"
  "eamInfo\0222.mavsdk.rpc.camera.SubscribeVid"
  "eoStreamInfoRequest\032*.mavsdk.rpc.camera."
  "VideoStreamInfoResponse\"\0000\001\022r\n\024Subscribe"
  "CaptureInfo\022..mavsdk.rpc.camera.Subscrib"
  "eCaptureInfoRequest\032&.mavsdk.rpc.camera."
  "CaptureInfoResponse\"\0000\001\022u\n\025SubscribeCame"
  "raStatus\022/.mavsdk.rpc.camera.SubscribeCa"
  "meraStatusRequest\032\'.mavsdk.rpc.camera.Ca"
  "meraStatusResponse\"\0000\001\022~\n\030SubscribeCurre"
  "ntSettings\0222.mavsdk.rpc.camera.Subscribe"
  "CurrentSettingsRequest\032*.mavsdk.rpc.came"
  "ra.CurrentSettingsResponse\"\0000\001\022\223\001\n\037Subsc"
  "ribePossibleSettingOptions\0229.mavsdk.rpc."
  "camera.SubscribePossibleSettingOptionsRe"
  "quest\0321.mavsdk.rpc.camera.PossibleSettin"
  "gOptionsResponse\"\0000\001\022[\n\nSetSetting\022$.mav"
  "sdk.rpc.camera.SetSettingRequest\032%.mavsd"
  "k.rpc.camera.SetSettingResponse\"\000B\037\n\020io."
  "mavsdk.cameraB\013CameraProtob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_camera_2fcamera_2eproto = {
  false, InitDefaults_camera_2fcamera_2eproto, 
  descriptor_table_protodef_camera_2fcamera_2eproto,
  "camera/camera.proto", &assign_descriptors_table_camera_2fcamera_2eproto, 5274,
};

void AddDescriptors_camera_2fcamera_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_camera_2fcamera_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_camera_2fcamera_2eproto = []() { AddDescriptors_camera_2fcamera_2eproto(); return true; }();
namespace mavsdk {
namespace rpc {
namespace camera {
const ::google::protobuf::EnumDescriptor* CameraResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_camera_2fcamera_2eproto);
  return file_level_enum_descriptors_camera_2fcamera_2eproto[0];
}
bool CameraResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraResult_Result CameraResult::UNKNOWN;
const CameraResult_Result CameraResult::SUCCESS;
const CameraResult_Result CameraResult::IN_PROGRESS;
const CameraResult_Result CameraResult::BUSY;
const CameraResult_Result CameraResult::DENIED;
const CameraResult_Result CameraResult::ERROR;
const CameraResult_Result CameraResult::TIMEOUT;
const CameraResult_Result CameraResult::WRONG_ARGUMENT;
const CameraResult_Result CameraResult::Result_MIN;
const CameraResult_Result CameraResult::Result_MAX;
const int CameraResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VideoStreamInfo_VideoStreamStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_camera_2fcamera_2eproto);
  return file_level_enum_descriptors_camera_2fcamera_2eproto[1];
}
bool VideoStreamInfo_VideoStreamStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VideoStreamInfo_VideoStreamStatus VideoStreamInfo::NOT_RUNNING;
const VideoStreamInfo_VideoStreamStatus VideoStreamInfo::IN_PROGRESS;
const VideoStreamInfo_VideoStreamStatus VideoStreamInfo::VideoStreamStatus_MIN;
const VideoStreamInfo_VideoStreamStatus VideoStreamInfo::VideoStreamStatus_MAX;
const int VideoStreamInfo::VideoStreamStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CameraStatus_StorageStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_camera_2fcamera_2eproto);
  return file_level_enum_descriptors_camera_2fcamera_2eproto[2];
}
bool CameraStatus_StorageStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraStatus_StorageStatus CameraStatus::NOT_AVAILABLE;
const CameraStatus_StorageStatus CameraStatus::UNFORMATTED;
const CameraStatus_StorageStatus CameraStatus::FORMATTED;
const CameraStatus_StorageStatus CameraStatus::StorageStatus_MIN;
const CameraStatus_StorageStatus CameraStatus::StorageStatus_MAX;
const int CameraStatus::StorageStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CameraMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_camera_2fcamera_2eproto);
  return file_level_enum_descriptors_camera_2fcamera_2eproto[3];
}
bool CameraMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TakePhotoRequest::InitAsDefaultInstance() {
}
class TakePhotoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakePhotoRequest::TakePhotoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.TakePhotoRequest)
}
TakePhotoRequest::TakePhotoRequest(const TakePhotoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.TakePhotoRequest)
}

void TakePhotoRequest::SharedCtor() {
}

TakePhotoRequest::~TakePhotoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.TakePhotoRequest)
  SharedDtor();
}

void TakePhotoRequest::SharedDtor() {
}

void TakePhotoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TakePhotoRequest& TakePhotoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TakePhotoRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void TakePhotoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.TakePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TakePhotoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TakePhotoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TakePhotoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.TakePhotoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.TakePhotoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.TakePhotoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TakePhotoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.TakePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.TakePhotoRequest)
}

::google::protobuf::uint8* TakePhotoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.TakePhotoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.TakePhotoRequest)
  return target;
}

size_t TakePhotoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.TakePhotoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakePhotoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.TakePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TakePhotoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TakePhotoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.TakePhotoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.TakePhotoRequest)
    MergeFrom(*source);
  }
}

void TakePhotoRequest::MergeFrom(const TakePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.TakePhotoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TakePhotoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.TakePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakePhotoRequest::CopyFrom(const TakePhotoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.TakePhotoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakePhotoRequest::IsInitialized() const {
  return true;
}

void TakePhotoRequest::Swap(TakePhotoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakePhotoRequest::InternalSwap(TakePhotoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TakePhotoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TakePhotoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_TakePhotoResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class TakePhotoResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const TakePhotoResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
TakePhotoResponse::HasBitSetters::camera_result(const TakePhotoResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakePhotoResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakePhotoResponse::TakePhotoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.TakePhotoResponse)
}
TakePhotoResponse::TakePhotoResponse(const TakePhotoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.TakePhotoResponse)
}

void TakePhotoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TakePhotoResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

TakePhotoResponse::~TakePhotoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.TakePhotoResponse)
  SharedDtor();
}

void TakePhotoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void TakePhotoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TakePhotoResponse& TakePhotoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TakePhotoResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void TakePhotoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.TakePhotoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TakePhotoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TakePhotoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TakePhotoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.TakePhotoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.TakePhotoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.TakePhotoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TakePhotoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.TakePhotoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.TakePhotoResponse)
}

::google::protobuf::uint8* TakePhotoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.TakePhotoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.TakePhotoResponse)
  return target;
}

size_t TakePhotoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.TakePhotoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakePhotoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.TakePhotoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TakePhotoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TakePhotoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.TakePhotoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.TakePhotoResponse)
    MergeFrom(*source);
  }
}

void TakePhotoResponse::MergeFrom(const TakePhotoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.TakePhotoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void TakePhotoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.TakePhotoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakePhotoResponse::CopyFrom(const TakePhotoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.TakePhotoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakePhotoResponse::IsInitialized() const {
  return true;
}

void TakePhotoResponse::Swap(TakePhotoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakePhotoResponse::InternalSwap(TakePhotoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata TakePhotoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartPhotoIntervalRequest::InitAsDefaultInstance() {
}
class StartPhotoIntervalRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartPhotoIntervalRequest::kIntervalSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartPhotoIntervalRequest::StartPhotoIntervalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StartPhotoIntervalRequest)
}
StartPhotoIntervalRequest::StartPhotoIntervalRequest(const StartPhotoIntervalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interval_s_ = from.interval_s_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StartPhotoIntervalRequest)
}

void StartPhotoIntervalRequest::SharedCtor() {
  interval_s_ = 0;
}

StartPhotoIntervalRequest::~StartPhotoIntervalRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  SharedDtor();
}

void StartPhotoIntervalRequest::SharedDtor() {
}

void StartPhotoIntervalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPhotoIntervalRequest& StartPhotoIntervalRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartPhotoIntervalRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StartPhotoIntervalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interval_s_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartPhotoIntervalRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartPhotoIntervalRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float interval_s = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_interval_s(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartPhotoIntervalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float interval_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interval_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartPhotoIntervalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float interval_s = 1;
  if (this->interval_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->interval_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StartPhotoIntervalRequest)
}

::google::protobuf::uint8* StartPhotoIntervalRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float interval_s = 1;
  if (this->interval_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->interval_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  return target;
}

size_t StartPhotoIntervalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float interval_s = 1;
  if (this->interval_s() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPhotoIntervalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartPhotoIntervalRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StartPhotoIntervalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StartPhotoIntervalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StartPhotoIntervalRequest)
    MergeFrom(*source);
  }
}

void StartPhotoIntervalRequest::MergeFrom(const StartPhotoIntervalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interval_s() != 0) {
    set_interval_s(from.interval_s());
  }
}

void StartPhotoIntervalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPhotoIntervalRequest::CopyFrom(const StartPhotoIntervalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StartPhotoIntervalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPhotoIntervalRequest::IsInitialized() const {
  return true;
}

void StartPhotoIntervalRequest::Swap(StartPhotoIntervalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartPhotoIntervalRequest::InternalSwap(StartPhotoIntervalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(interval_s_, other->interval_s_);
}

::google::protobuf::Metadata StartPhotoIntervalRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartPhotoIntervalResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_StartPhotoIntervalResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class StartPhotoIntervalResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const StartPhotoIntervalResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
StartPhotoIntervalResponse::HasBitSetters::camera_result(const StartPhotoIntervalResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartPhotoIntervalResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartPhotoIntervalResponse::StartPhotoIntervalResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StartPhotoIntervalResponse)
}
StartPhotoIntervalResponse::StartPhotoIntervalResponse(const StartPhotoIntervalResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StartPhotoIntervalResponse)
}

void StartPhotoIntervalResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StartPhotoIntervalResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

StartPhotoIntervalResponse::~StartPhotoIntervalResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  SharedDtor();
}

void StartPhotoIntervalResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void StartPhotoIntervalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPhotoIntervalResponse& StartPhotoIntervalResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartPhotoIntervalResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StartPhotoIntervalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartPhotoIntervalResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartPhotoIntervalResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartPhotoIntervalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartPhotoIntervalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StartPhotoIntervalResponse)
}

::google::protobuf::uint8* StartPhotoIntervalResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  return target;
}

size_t StartPhotoIntervalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPhotoIntervalResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartPhotoIntervalResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StartPhotoIntervalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StartPhotoIntervalResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StartPhotoIntervalResponse)
    MergeFrom(*source);
  }
}

void StartPhotoIntervalResponse::MergeFrom(const StartPhotoIntervalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void StartPhotoIntervalResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPhotoIntervalResponse::CopyFrom(const StartPhotoIntervalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StartPhotoIntervalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPhotoIntervalResponse::IsInitialized() const {
  return true;
}

void StartPhotoIntervalResponse::Swap(StartPhotoIntervalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartPhotoIntervalResponse::InternalSwap(StartPhotoIntervalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata StartPhotoIntervalResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopPhotoIntervalRequest::InitAsDefaultInstance() {
}
class StopPhotoIntervalRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopPhotoIntervalRequest::StopPhotoIntervalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StopPhotoIntervalRequest)
}
StopPhotoIntervalRequest::StopPhotoIntervalRequest(const StopPhotoIntervalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StopPhotoIntervalRequest)
}

void StopPhotoIntervalRequest::SharedCtor() {
}

StopPhotoIntervalRequest::~StopPhotoIntervalRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  SharedDtor();
}

void StopPhotoIntervalRequest::SharedDtor() {
}

void StopPhotoIntervalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPhotoIntervalRequest& StopPhotoIntervalRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopPhotoIntervalRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StopPhotoIntervalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopPhotoIntervalRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopPhotoIntervalRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopPhotoIntervalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopPhotoIntervalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StopPhotoIntervalRequest)
}

::google::protobuf::uint8* StopPhotoIntervalRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  return target;
}

size_t StopPhotoIntervalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPhotoIntervalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPhotoIntervalRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StopPhotoIntervalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StopPhotoIntervalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StopPhotoIntervalRequest)
    MergeFrom(*source);
  }
}

void StopPhotoIntervalRequest::MergeFrom(const StopPhotoIntervalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopPhotoIntervalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPhotoIntervalRequest::CopyFrom(const StopPhotoIntervalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StopPhotoIntervalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPhotoIntervalRequest::IsInitialized() const {
  return true;
}

void StopPhotoIntervalRequest::Swap(StopPhotoIntervalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopPhotoIntervalRequest::InternalSwap(StopPhotoIntervalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopPhotoIntervalRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopPhotoIntervalResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_StopPhotoIntervalResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class StopPhotoIntervalResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const StopPhotoIntervalResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
StopPhotoIntervalResponse::HasBitSetters::camera_result(const StopPhotoIntervalResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopPhotoIntervalResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopPhotoIntervalResponse::StopPhotoIntervalResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StopPhotoIntervalResponse)
}
StopPhotoIntervalResponse::StopPhotoIntervalResponse(const StopPhotoIntervalResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StopPhotoIntervalResponse)
}

void StopPhotoIntervalResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopPhotoIntervalResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

StopPhotoIntervalResponse::~StopPhotoIntervalResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  SharedDtor();
}

void StopPhotoIntervalResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void StopPhotoIntervalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPhotoIntervalResponse& StopPhotoIntervalResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopPhotoIntervalResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StopPhotoIntervalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopPhotoIntervalResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopPhotoIntervalResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopPhotoIntervalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopPhotoIntervalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StopPhotoIntervalResponse)
}

::google::protobuf::uint8* StopPhotoIntervalResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  return target;
}

size_t StopPhotoIntervalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPhotoIntervalResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPhotoIntervalResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StopPhotoIntervalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StopPhotoIntervalResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StopPhotoIntervalResponse)
    MergeFrom(*source);
  }
}

void StopPhotoIntervalResponse::MergeFrom(const StopPhotoIntervalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void StopPhotoIntervalResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPhotoIntervalResponse::CopyFrom(const StopPhotoIntervalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StopPhotoIntervalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPhotoIntervalResponse::IsInitialized() const {
  return true;
}

void StopPhotoIntervalResponse::Swap(StopPhotoIntervalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopPhotoIntervalResponse::InternalSwap(StopPhotoIntervalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata StopPhotoIntervalResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartVideoRequest::InitAsDefaultInstance() {
}
class StartVideoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartVideoRequest::StartVideoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StartVideoRequest)
}
StartVideoRequest::StartVideoRequest(const StartVideoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StartVideoRequest)
}

void StartVideoRequest::SharedCtor() {
}

StartVideoRequest::~StartVideoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StartVideoRequest)
  SharedDtor();
}

void StartVideoRequest::SharedDtor() {
}

void StartVideoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartVideoRequest& StartVideoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartVideoRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StartVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StartVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartVideoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartVideoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartVideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StartVideoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StartVideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StartVideoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartVideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StartVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StartVideoRequest)
}

::google::protobuf::uint8* StartVideoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StartVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StartVideoRequest)
  return target;
}

size_t StartVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StartVideoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartVideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StartVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartVideoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StartVideoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StartVideoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StartVideoRequest)
    MergeFrom(*source);
  }
}

void StartVideoRequest::MergeFrom(const StartVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StartVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartVideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StartVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartVideoRequest::CopyFrom(const StartVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StartVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVideoRequest::IsInitialized() const {
  return true;
}

void StartVideoRequest::Swap(StartVideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartVideoRequest::InternalSwap(StartVideoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartVideoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartVideoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_StartVideoResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class StartVideoResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const StartVideoResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
StartVideoResponse::HasBitSetters::camera_result(const StartVideoResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartVideoResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartVideoResponse::StartVideoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StartVideoResponse)
}
StartVideoResponse::StartVideoResponse(const StartVideoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StartVideoResponse)
}

void StartVideoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StartVideoResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

StartVideoResponse::~StartVideoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StartVideoResponse)
  SharedDtor();
}

void StartVideoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void StartVideoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartVideoResponse& StartVideoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartVideoResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StartVideoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StartVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartVideoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartVideoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartVideoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StartVideoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StartVideoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StartVideoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartVideoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StartVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StartVideoResponse)
}

::google::protobuf::uint8* StartVideoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StartVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StartVideoResponse)
  return target;
}

size_t StartVideoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StartVideoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartVideoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StartVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartVideoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StartVideoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StartVideoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StartVideoResponse)
    MergeFrom(*source);
  }
}

void StartVideoResponse::MergeFrom(const StartVideoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StartVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void StartVideoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StartVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartVideoResponse::CopyFrom(const StartVideoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StartVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVideoResponse::IsInitialized() const {
  return true;
}

void StartVideoResponse::Swap(StartVideoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartVideoResponse::InternalSwap(StartVideoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata StartVideoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopVideoRequest::InitAsDefaultInstance() {
}
class StopVideoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopVideoRequest::StopVideoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StopVideoRequest)
}
StopVideoRequest::StopVideoRequest(const StopVideoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StopVideoRequest)
}

void StopVideoRequest::SharedCtor() {
}

StopVideoRequest::~StopVideoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StopVideoRequest)
  SharedDtor();
}

void StopVideoRequest::SharedDtor() {
}

void StopVideoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopVideoRequest& StopVideoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopVideoRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StopVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StopVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopVideoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopVideoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopVideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StopVideoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StopVideoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StopVideoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopVideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StopVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StopVideoRequest)
}

::google::protobuf::uint8* StopVideoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StopVideoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StopVideoRequest)
  return target;
}

size_t StopVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StopVideoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVideoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StopVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopVideoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StopVideoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StopVideoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StopVideoRequest)
    MergeFrom(*source);
  }
}

void StopVideoRequest::MergeFrom(const StopVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StopVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopVideoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StopVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopVideoRequest::CopyFrom(const StopVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StopVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVideoRequest::IsInitialized() const {
  return true;
}

void StopVideoRequest::Swap(StopVideoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopVideoRequest::InternalSwap(StopVideoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopVideoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopVideoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_StopVideoResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class StopVideoResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const StopVideoResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
StopVideoResponse::HasBitSetters::camera_result(const StopVideoResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopVideoResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopVideoResponse::StopVideoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StopVideoResponse)
}
StopVideoResponse::StopVideoResponse(const StopVideoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StopVideoResponse)
}

void StopVideoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopVideoResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

StopVideoResponse::~StopVideoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StopVideoResponse)
  SharedDtor();
}

void StopVideoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void StopVideoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopVideoResponse& StopVideoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopVideoResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StopVideoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StopVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopVideoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopVideoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopVideoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StopVideoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StopVideoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StopVideoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopVideoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StopVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StopVideoResponse)
}

::google::protobuf::uint8* StopVideoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StopVideoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StopVideoResponse)
  return target;
}

size_t StopVideoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StopVideoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVideoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StopVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopVideoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StopVideoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StopVideoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StopVideoResponse)
    MergeFrom(*source);
  }
}

void StopVideoResponse::MergeFrom(const StopVideoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StopVideoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void StopVideoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StopVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopVideoResponse::CopyFrom(const StopVideoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StopVideoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVideoResponse::IsInitialized() const {
  return true;
}

void StopVideoResponse::Swap(StopVideoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopVideoResponse::InternalSwap(StopVideoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata StopVideoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartVideoStreamingRequest::InitAsDefaultInstance() {
}
class StartVideoStreamingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartVideoStreamingRequest::StartVideoStreamingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StartVideoStreamingRequest)
}
StartVideoStreamingRequest::StartVideoStreamingRequest(const StartVideoStreamingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StartVideoStreamingRequest)
}

void StartVideoStreamingRequest::SharedCtor() {
}

StartVideoStreamingRequest::~StartVideoStreamingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StartVideoStreamingRequest)
  SharedDtor();
}

void StartVideoStreamingRequest::SharedDtor() {
}

void StartVideoStreamingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartVideoStreamingRequest& StartVideoStreamingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartVideoStreamingRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StartVideoStreamingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartVideoStreamingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartVideoStreamingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartVideoStreamingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StartVideoStreamingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StartVideoStreamingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartVideoStreamingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StartVideoStreamingRequest)
}

::google::protobuf::uint8* StartVideoStreamingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StartVideoStreamingRequest)
  return target;
}

size_t StartVideoStreamingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartVideoStreamingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartVideoStreamingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StartVideoStreamingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StartVideoStreamingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StartVideoStreamingRequest)
    MergeFrom(*source);
  }
}

void StartVideoStreamingRequest::MergeFrom(const StartVideoStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartVideoStreamingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartVideoStreamingRequest::CopyFrom(const StartVideoStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StartVideoStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVideoStreamingRequest::IsInitialized() const {
  return true;
}

void StartVideoStreamingRequest::Swap(StartVideoStreamingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartVideoStreamingRequest::InternalSwap(StartVideoStreamingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartVideoStreamingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StartVideoStreamingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_StartVideoStreamingResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class StartVideoStreamingResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const StartVideoStreamingResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
StartVideoStreamingResponse::HasBitSetters::camera_result(const StartVideoStreamingResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartVideoStreamingResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartVideoStreamingResponse::StartVideoStreamingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StartVideoStreamingResponse)
}
StartVideoStreamingResponse::StartVideoStreamingResponse(const StartVideoStreamingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StartVideoStreamingResponse)
}

void StartVideoStreamingResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StartVideoStreamingResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

StartVideoStreamingResponse::~StartVideoStreamingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StartVideoStreamingResponse)
  SharedDtor();
}

void StartVideoStreamingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void StartVideoStreamingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartVideoStreamingResponse& StartVideoStreamingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StartVideoStreamingResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StartVideoStreamingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartVideoStreamingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StartVideoStreamingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartVideoStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StartVideoStreamingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StartVideoStreamingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StartVideoStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StartVideoStreamingResponse)
}

::google::protobuf::uint8* StartVideoStreamingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StartVideoStreamingResponse)
  return target;
}

size_t StartVideoStreamingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartVideoStreamingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartVideoStreamingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StartVideoStreamingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StartVideoStreamingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StartVideoStreamingResponse)
    MergeFrom(*source);
  }
}

void StartVideoStreamingResponse::MergeFrom(const StartVideoStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void StartVideoStreamingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartVideoStreamingResponse::CopyFrom(const StartVideoStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StartVideoStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVideoStreamingResponse::IsInitialized() const {
  return true;
}

void StartVideoStreamingResponse::Swap(StartVideoStreamingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartVideoStreamingResponse::InternalSwap(StartVideoStreamingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata StartVideoStreamingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopVideoStreamingRequest::InitAsDefaultInstance() {
}
class StopVideoStreamingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopVideoStreamingRequest::StopVideoStreamingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StopVideoStreamingRequest)
}
StopVideoStreamingRequest::StopVideoStreamingRequest(const StopVideoStreamingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StopVideoStreamingRequest)
}

void StopVideoStreamingRequest::SharedCtor() {
}

StopVideoStreamingRequest::~StopVideoStreamingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StopVideoStreamingRequest)
  SharedDtor();
}

void StopVideoStreamingRequest::SharedDtor() {
}

void StopVideoStreamingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopVideoStreamingRequest& StopVideoStreamingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopVideoStreamingRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StopVideoStreamingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopVideoStreamingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopVideoStreamingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopVideoStreamingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StopVideoStreamingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StopVideoStreamingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopVideoStreamingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StopVideoStreamingRequest)
}

::google::protobuf::uint8* StopVideoStreamingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StopVideoStreamingRequest)
  return target;
}

size_t StopVideoStreamingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVideoStreamingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopVideoStreamingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<StopVideoStreamingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StopVideoStreamingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StopVideoStreamingRequest)
    MergeFrom(*source);
  }
}

void StopVideoStreamingRequest::MergeFrom(const StopVideoStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopVideoStreamingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopVideoStreamingRequest::CopyFrom(const StopVideoStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StopVideoStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVideoStreamingRequest::IsInitialized() const {
  return true;
}

void StopVideoStreamingRequest::Swap(StopVideoStreamingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopVideoStreamingRequest::InternalSwap(StopVideoStreamingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopVideoStreamingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StopVideoStreamingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_StopVideoStreamingResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class StopVideoStreamingResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const StopVideoStreamingResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
StopVideoStreamingResponse::HasBitSetters::camera_result(const StopVideoStreamingResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopVideoStreamingResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopVideoStreamingResponse::StopVideoStreamingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.StopVideoStreamingResponse)
}
StopVideoStreamingResponse::StopVideoStreamingResponse(const StopVideoStreamingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.StopVideoStreamingResponse)
}

void StopVideoStreamingResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StopVideoStreamingResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

StopVideoStreamingResponse::~StopVideoStreamingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.StopVideoStreamingResponse)
  SharedDtor();
}

void StopVideoStreamingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void StopVideoStreamingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopVideoStreamingResponse& StopVideoStreamingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StopVideoStreamingResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void StopVideoStreamingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopVideoStreamingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StopVideoStreamingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopVideoStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.StopVideoStreamingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.StopVideoStreamingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopVideoStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.StopVideoStreamingResponse)
}

::google::protobuf::uint8* StopVideoStreamingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.StopVideoStreamingResponse)
  return target;
}

size_t StopVideoStreamingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVideoStreamingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopVideoStreamingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<StopVideoStreamingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.StopVideoStreamingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.StopVideoStreamingResponse)
    MergeFrom(*source);
  }
}

void StopVideoStreamingResponse::MergeFrom(const StopVideoStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void StopVideoStreamingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopVideoStreamingResponse::CopyFrom(const StopVideoStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.StopVideoStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVideoStreamingResponse::IsInitialized() const {
  return true;
}

void StopVideoStreamingResponse::Swap(StopVideoStreamingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopVideoStreamingResponse::InternalSwap(StopVideoStreamingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata StopVideoStreamingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetModeRequest::InitAsDefaultInstance() {
}
class SetModeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetModeRequest::kCameraModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetModeRequest::SetModeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SetModeRequest)
}
SetModeRequest::SetModeRequest(const SetModeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_mode_ = from.camera_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SetModeRequest)
}

void SetModeRequest::SharedCtor() {
  camera_mode_ = 0;
}

SetModeRequest::~SetModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SetModeRequest)
  SharedDtor();
}

void SetModeRequest::SharedDtor() {
}

void SetModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetModeRequest& SetModeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetModeRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SetModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SetModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_mode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetModeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetModeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_camera_mode(static_cast<::mavsdk::rpc::camera::CameraMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SetModeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_mode(static_cast< ::mavsdk::rpc::camera::CameraMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SetModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SetModeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SetModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  if (this->camera_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SetModeRequest)
}

::google::protobuf::uint8* SetModeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SetModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  if (this->camera_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SetModeRequest)
  return target;
}

size_t SetModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SetModeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  if (this->camera_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SetModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetModeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SetModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SetModeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SetModeRequest)
    MergeFrom(*source);
  }
}

void SetModeRequest::MergeFrom(const SetModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SetModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_mode() != 0) {
    set_camera_mode(from.camera_mode());
  }
}

void SetModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SetModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetModeRequest::CopyFrom(const SetModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SetModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetModeRequest::IsInitialized() const {
  return true;
}

void SetModeRequest::Swap(SetModeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetModeRequest::InternalSwap(SetModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_mode_, other->camera_mode_);
}

::google::protobuf::Metadata SetModeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetModeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_SetModeResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class SetModeResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const SetModeResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
SetModeResponse::HasBitSetters::camera_result(const SetModeResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetModeResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetModeResponse::SetModeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SetModeResponse)
}
SetModeResponse::SetModeResponse(const SetModeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SetModeResponse)
}

void SetModeResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetModeResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

SetModeResponse::~SetModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SetModeResponse)
  SharedDtor();
}

void SetModeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void SetModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetModeResponse& SetModeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetModeResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SetModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SetModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetModeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetModeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SetModeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SetModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SetModeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SetModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SetModeResponse)
}

::google::protobuf::uint8* SetModeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SetModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SetModeResponse)
  return target;
}

size_t SetModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SetModeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SetModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetModeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SetModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SetModeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SetModeResponse)
    MergeFrom(*source);
  }
}

void SetModeResponse::MergeFrom(const SetModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SetModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void SetModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SetModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetModeResponse::CopyFrom(const SetModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SetModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetModeResponse::IsInitialized() const {
  return true;
}

void SetModeResponse::Swap(SetModeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetModeResponse::InternalSwap(SetModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata SetModeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeModeRequest::InitAsDefaultInstance() {
}
class SubscribeModeRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeModeRequest::SubscribeModeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SubscribeModeRequest)
}
SubscribeModeRequest::SubscribeModeRequest(const SubscribeModeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SubscribeModeRequest)
}

void SubscribeModeRequest::SharedCtor() {
}

SubscribeModeRequest::~SubscribeModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SubscribeModeRequest)
  SharedDtor();
}

void SubscribeModeRequest::SharedDtor() {
}

void SubscribeModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeModeRequest& SubscribeModeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeModeRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SubscribeModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SubscribeModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeModeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeModeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SubscribeModeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SubscribeModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SubscribeModeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SubscribeModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SubscribeModeRequest)
}

::google::protobuf::uint8* SubscribeModeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SubscribeModeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SubscribeModeRequest)
  return target;
}

size_t SubscribeModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SubscribeModeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SubscribeModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeModeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SubscribeModeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SubscribeModeRequest)
    MergeFrom(*source);
  }
}

void SubscribeModeRequest::MergeFrom(const SubscribeModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SubscribeModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SubscribeModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeModeRequest::CopyFrom(const SubscribeModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SubscribeModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeModeRequest::IsInitialized() const {
  return true;
}

void SubscribeModeRequest::Swap(SubscribeModeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeModeRequest::InternalSwap(SubscribeModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeModeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ModeResponse::InitAsDefaultInstance() {
}
class ModeResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModeResponse::kCameraModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModeResponse::ModeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.ModeResponse)
}
ModeResponse::ModeResponse(const ModeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_mode_ = from.camera_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.ModeResponse)
}

void ModeResponse::SharedCtor() {
  camera_mode_ = 0;
}

ModeResponse::~ModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.ModeResponse)
  SharedDtor();
}

void ModeResponse::SharedDtor() {
}

void ModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModeResponse& ModeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ModeResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void ModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.ModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_mode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ModeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_camera_mode(static_cast<::mavsdk::rpc::camera::CameraMode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.ModeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_mode(static_cast< ::mavsdk::rpc::camera::CameraMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.ModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.ModeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.ModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  if (this->camera_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.ModeResponse)
}

::google::protobuf::uint8* ModeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.ModeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  if (this->camera_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.ModeResponse)
  return target;
}

size_t ModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.ModeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraMode camera_mode = 1;
  if (this->camera_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.ModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ModeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.ModeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.ModeResponse)
    MergeFrom(*source);
  }
}

void ModeResponse::MergeFrom(const ModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.ModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_mode() != 0) {
    set_camera_mode(from.camera_mode());
  }
}

void ModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.ModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeResponse::CopyFrom(const ModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.ModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeResponse::IsInitialized() const {
  return true;
}

void ModeResponse::Swap(ModeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModeResponse::InternalSwap(ModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_mode_, other->camera_mode_);
}

::google::protobuf::Metadata ModeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeVideoStreamInfoRequest::InitAsDefaultInstance() {
}
class SubscribeVideoStreamInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeVideoStreamInfoRequest::SubscribeVideoStreamInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
}
SubscribeVideoStreamInfoRequest::SubscribeVideoStreamInfoRequest(const SubscribeVideoStreamInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
}

void SubscribeVideoStreamInfoRequest::SharedCtor() {
}

SubscribeVideoStreamInfoRequest::~SubscribeVideoStreamInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  SharedDtor();
}

void SubscribeVideoStreamInfoRequest::SharedDtor() {
}

void SubscribeVideoStreamInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeVideoStreamInfoRequest& SubscribeVideoStreamInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeVideoStreamInfoRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SubscribeVideoStreamInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeVideoStreamInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeVideoStreamInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeVideoStreamInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeVideoStreamInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
}

::google::protobuf::uint8* SubscribeVideoStreamInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  return target;
}

size_t SubscribeVideoStreamInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeVideoStreamInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeVideoStreamInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeVideoStreamInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
    MergeFrom(*source);
  }
}

void SubscribeVideoStreamInfoRequest::MergeFrom(const SubscribeVideoStreamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeVideoStreamInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeVideoStreamInfoRequest::CopyFrom(const SubscribeVideoStreamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SubscribeVideoStreamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeVideoStreamInfoRequest::IsInitialized() const {
  return true;
}

void SubscribeVideoStreamInfoRequest::Swap(SubscribeVideoStreamInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeVideoStreamInfoRequest::InternalSwap(SubscribeVideoStreamInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeVideoStreamInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VideoStreamInfoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_VideoStreamInfoResponse_default_instance_._instance.get_mutable()->video_stream_info_ = const_cast< ::mavsdk::rpc::camera::VideoStreamInfo*>(
      ::mavsdk::rpc::camera::VideoStreamInfo::internal_default_instance());
}
class VideoStreamInfoResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::VideoStreamInfo& video_stream_info(const VideoStreamInfoResponse* msg);
};

const ::mavsdk::rpc::camera::VideoStreamInfo&
VideoStreamInfoResponse::HasBitSetters::video_stream_info(const VideoStreamInfoResponse* msg) {
  return *msg->video_stream_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoStreamInfoResponse::kVideoStreamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoStreamInfoResponse::VideoStreamInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.VideoStreamInfoResponse)
}
VideoStreamInfoResponse::VideoStreamInfoResponse(const VideoStreamInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_stream_info()) {
    video_stream_info_ = new ::mavsdk::rpc::camera::VideoStreamInfo(*from.video_stream_info_);
  } else {
    video_stream_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.VideoStreamInfoResponse)
}

void VideoStreamInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VideoStreamInfoResponse_camera_2fcamera_2eproto.base);
  video_stream_info_ = nullptr;
}

VideoStreamInfoResponse::~VideoStreamInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.VideoStreamInfoResponse)
  SharedDtor();
}

void VideoStreamInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete video_stream_info_;
}

void VideoStreamInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoStreamInfoResponse& VideoStreamInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VideoStreamInfoResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void VideoStreamInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && video_stream_info_ != nullptr) {
    delete video_stream_info_;
  }
  video_stream_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VideoStreamInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VideoStreamInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::VideoStreamInfo::_InternalParse;
        object = msg->mutable_video_stream_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VideoStreamInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_video_stream_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.VideoStreamInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.VideoStreamInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VideoStreamInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 1;
  if (this->has_video_stream_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::video_stream_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.VideoStreamInfoResponse)
}

::google::protobuf::uint8* VideoStreamInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 1;
  if (this->has_video_stream_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::video_stream_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.VideoStreamInfoResponse)
  return target;
}

size_t VideoStreamInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.VideoStreamInfo video_stream_info = 1;
  if (this->has_video_stream_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *video_stream_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoStreamInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoStreamInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<VideoStreamInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.VideoStreamInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.VideoStreamInfoResponse)
    MergeFrom(*source);
  }
}

void VideoStreamInfoResponse::MergeFrom(const VideoStreamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_stream_info()) {
    mutable_video_stream_info()->::mavsdk::rpc::camera::VideoStreamInfo::MergeFrom(from.video_stream_info());
  }
}

void VideoStreamInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoStreamInfoResponse::CopyFrom(const VideoStreamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.VideoStreamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoStreamInfoResponse::IsInitialized() const {
  return true;
}

void VideoStreamInfoResponse::Swap(VideoStreamInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoStreamInfoResponse::InternalSwap(VideoStreamInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(video_stream_info_, other->video_stream_info_);
}

::google::protobuf::Metadata VideoStreamInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeCaptureInfoRequest::InitAsDefaultInstance() {
}
class SubscribeCaptureInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeCaptureInfoRequest::SubscribeCaptureInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
}
SubscribeCaptureInfoRequest::SubscribeCaptureInfoRequest(const SubscribeCaptureInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
}

void SubscribeCaptureInfoRequest::SharedCtor() {
}

SubscribeCaptureInfoRequest::~SubscribeCaptureInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  SharedDtor();
}

void SubscribeCaptureInfoRequest::SharedDtor() {
}

void SubscribeCaptureInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCaptureInfoRequest& SubscribeCaptureInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeCaptureInfoRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCaptureInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeCaptureInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeCaptureInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeCaptureInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeCaptureInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
}

::google::protobuf::uint8* SubscribeCaptureInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  return target;
}

size_t SubscribeCaptureInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCaptureInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCaptureInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeCaptureInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
    MergeFrom(*source);
  }
}

void SubscribeCaptureInfoRequest::MergeFrom(const SubscribeCaptureInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCaptureInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCaptureInfoRequest::CopyFrom(const SubscribeCaptureInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SubscribeCaptureInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCaptureInfoRequest::IsInitialized() const {
  return true;
}

void SubscribeCaptureInfoRequest::Swap(SubscribeCaptureInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeCaptureInfoRequest::InternalSwap(SubscribeCaptureInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeCaptureInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CaptureInfoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_CaptureInfoResponse_default_instance_._instance.get_mutable()->capture_info_ = const_cast< ::mavsdk::rpc::camera::CaptureInfo*>(
      ::mavsdk::rpc::camera::CaptureInfo::internal_default_instance());
}
class CaptureInfoResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CaptureInfo& capture_info(const CaptureInfoResponse* msg);
};

const ::mavsdk::rpc::camera::CaptureInfo&
CaptureInfoResponse::HasBitSetters::capture_info(const CaptureInfoResponse* msg) {
  return *msg->capture_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptureInfoResponse::kCaptureInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptureInfoResponse::CaptureInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.CaptureInfoResponse)
}
CaptureInfoResponse::CaptureInfoResponse(const CaptureInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_capture_info()) {
    capture_info_ = new ::mavsdk::rpc::camera::CaptureInfo(*from.capture_info_);
  } else {
    capture_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.CaptureInfoResponse)
}

void CaptureInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CaptureInfoResponse_camera_2fcamera_2eproto.base);
  capture_info_ = nullptr;
}

CaptureInfoResponse::~CaptureInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.CaptureInfoResponse)
  SharedDtor();
}

void CaptureInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete capture_info_;
}

void CaptureInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaptureInfoResponse& CaptureInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CaptureInfoResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void CaptureInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.CaptureInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && capture_info_ != nullptr) {
    delete capture_info_;
  }
  capture_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CaptureInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CaptureInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CaptureInfo::_InternalParse;
        object = msg->mutable_capture_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CaptureInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.CaptureInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_capture_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.CaptureInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.CaptureInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CaptureInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.CaptureInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
  if (this->has_capture_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::capture_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.CaptureInfoResponse)
}

::google::protobuf::uint8* CaptureInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.CaptureInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
  if (this->has_capture_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::capture_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.CaptureInfoResponse)
  return target;
}

size_t CaptureInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.CaptureInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CaptureInfo capture_info = 1;
  if (this->has_capture_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *capture_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptureInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.CaptureInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CaptureInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CaptureInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.CaptureInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.CaptureInfoResponse)
    MergeFrom(*source);
  }
}

void CaptureInfoResponse::MergeFrom(const CaptureInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.CaptureInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capture_info()) {
    mutable_capture_info()->::mavsdk::rpc::camera::CaptureInfo::MergeFrom(from.capture_info());
  }
}

void CaptureInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.CaptureInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureInfoResponse::CopyFrom(const CaptureInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.CaptureInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureInfoResponse::IsInitialized() const {
  return true;
}

void CaptureInfoResponse::Swap(CaptureInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptureInfoResponse::InternalSwap(CaptureInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(capture_info_, other->capture_info_);
}

::google::protobuf::Metadata CaptureInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeCameraStatusRequest::InitAsDefaultInstance() {
}
class SubscribeCameraStatusRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeCameraStatusRequest::SubscribeCameraStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
}
SubscribeCameraStatusRequest::SubscribeCameraStatusRequest(const SubscribeCameraStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
}

void SubscribeCameraStatusRequest::SharedCtor() {
}

SubscribeCameraStatusRequest::~SubscribeCameraStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  SharedDtor();
}

void SubscribeCameraStatusRequest::SharedDtor() {
}

void SubscribeCameraStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCameraStatusRequest& SubscribeCameraStatusRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeCameraStatusRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCameraStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeCameraStatusRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeCameraStatusRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeCameraStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeCameraStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
}

::google::protobuf::uint8* SubscribeCameraStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  return target;
}

size_t SubscribeCameraStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCameraStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCameraStatusRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeCameraStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
    MergeFrom(*source);
  }
}

void SubscribeCameraStatusRequest::MergeFrom(const SubscribeCameraStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCameraStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCameraStatusRequest::CopyFrom(const SubscribeCameraStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SubscribeCameraStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCameraStatusRequest::IsInitialized() const {
  return true;
}

void SubscribeCameraStatusRequest::Swap(SubscribeCameraStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeCameraStatusRequest::InternalSwap(SubscribeCameraStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeCameraStatusRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CameraStatusResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_CameraStatusResponse_default_instance_._instance.get_mutable()->camera_status_ = const_cast< ::mavsdk::rpc::camera::CameraStatus*>(
      ::mavsdk::rpc::camera::CameraStatus::internal_default_instance());
}
class CameraStatusResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraStatus& camera_status(const CameraStatusResponse* msg);
};

const ::mavsdk::rpc::camera::CameraStatus&
CameraStatusResponse::HasBitSetters::camera_status(const CameraStatusResponse* msg) {
  return *msg->camera_status_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraStatusResponse::kCameraStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraStatusResponse::CameraStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.CameraStatusResponse)
}
CameraStatusResponse::CameraStatusResponse(const CameraStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_status()) {
    camera_status_ = new ::mavsdk::rpc::camera::CameraStatus(*from.camera_status_);
  } else {
    camera_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.CameraStatusResponse)
}

void CameraStatusResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CameraStatusResponse_camera_2fcamera_2eproto.base);
  camera_status_ = nullptr;
}

CameraStatusResponse::~CameraStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.CameraStatusResponse)
  SharedDtor();
}

void CameraStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_status_;
}

void CameraStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraStatusResponse& CameraStatusResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CameraStatusResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void CameraStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.CameraStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_status_ != nullptr) {
    delete camera_status_;
  }
  camera_status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraStatusResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CameraStatusResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraStatus camera_status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraStatus::_InternalParse;
        object = msg->mutable_camera_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.CameraStatusResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraStatus camera_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.CameraStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.CameraStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.CameraStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraStatus camera_status = 1;
  if (this->has_camera_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.CameraStatusResponse)
}

::google::protobuf::uint8* CameraStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.CameraStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraStatus camera_status = 1;
  if (this->has_camera_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.CameraStatusResponse)
  return target;
}

size_t CameraStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.CameraStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraStatus camera_status = 1;
  if (this->has_camera_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.CameraStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraStatusResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CameraStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.CameraStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.CameraStatusResponse)
    MergeFrom(*source);
  }
}

void CameraStatusResponse::MergeFrom(const CameraStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.CameraStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_status()) {
    mutable_camera_status()->::mavsdk::rpc::camera::CameraStatus::MergeFrom(from.camera_status());
  }
}

void CameraStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.CameraStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraStatusResponse::CopyFrom(const CameraStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.CameraStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraStatusResponse::IsInitialized() const {
  return true;
}

void CameraStatusResponse::Swap(CameraStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraStatusResponse::InternalSwap(CameraStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_status_, other->camera_status_);
}

::google::protobuf::Metadata CameraStatusResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeCurrentSettingsRequest::InitAsDefaultInstance() {
}
class SubscribeCurrentSettingsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeCurrentSettingsRequest::SubscribeCurrentSettingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
}
SubscribeCurrentSettingsRequest::SubscribeCurrentSettingsRequest(const SubscribeCurrentSettingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
}

void SubscribeCurrentSettingsRequest::SharedCtor() {
}

SubscribeCurrentSettingsRequest::~SubscribeCurrentSettingsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  SharedDtor();
}

void SubscribeCurrentSettingsRequest::SharedDtor() {
}

void SubscribeCurrentSettingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCurrentSettingsRequest& SubscribeCurrentSettingsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeCurrentSettingsRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCurrentSettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeCurrentSettingsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeCurrentSettingsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeCurrentSettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeCurrentSettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
}

::google::protobuf::uint8* SubscribeCurrentSettingsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  return target;
}

size_t SubscribeCurrentSettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCurrentSettingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCurrentSettingsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeCurrentSettingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
    MergeFrom(*source);
  }
}

void SubscribeCurrentSettingsRequest::MergeFrom(const SubscribeCurrentSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCurrentSettingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCurrentSettingsRequest::CopyFrom(const SubscribeCurrentSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SubscribeCurrentSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCurrentSettingsRequest::IsInitialized() const {
  return true;
}

void SubscribeCurrentSettingsRequest::Swap(SubscribeCurrentSettingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeCurrentSettingsRequest::InternalSwap(SubscribeCurrentSettingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeCurrentSettingsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CurrentSettingsResponse::InitAsDefaultInstance() {
}
class CurrentSettingsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrentSettingsResponse::kCurrentSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrentSettingsResponse::CurrentSettingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.CurrentSettingsResponse)
}
CurrentSettingsResponse::CurrentSettingsResponse(const CurrentSettingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      current_settings_(from.current_settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.CurrentSettingsResponse)
}

void CurrentSettingsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CurrentSettingsResponse_camera_2fcamera_2eproto.base);
}

CurrentSettingsResponse::~CurrentSettingsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.CurrentSettingsResponse)
  SharedDtor();
}

void CurrentSettingsResponse::SharedDtor() {
}

void CurrentSettingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentSettingsResponse& CurrentSettingsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CurrentSettingsResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void CurrentSettingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_settings_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CurrentSettingsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CurrentSettingsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.camera.Setting current_settings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::mavsdk::rpc::camera::Setting::_InternalParse;
          object = msg->add_current_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CurrentSettingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mavsdk.rpc.camera.Setting current_settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_current_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.CurrentSettingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.CurrentSettingsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CurrentSettingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.camera.Setting current_settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->current_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->current_settings(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.CurrentSettingsResponse)
}

::google::protobuf::uint8* CurrentSettingsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.camera.Setting current_settings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->current_settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->current_settings(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.CurrentSettingsResponse)
  return target;
}

size_t CurrentSettingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.camera.Setting current_settings = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->current_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->current_settings(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentSettingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentSettingsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CurrentSettingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.CurrentSettingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.CurrentSettingsResponse)
    MergeFrom(*source);
  }
}

void CurrentSettingsResponse::MergeFrom(const CurrentSettingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_settings_.MergeFrom(from.current_settings_);
}

void CurrentSettingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentSettingsResponse::CopyFrom(const CurrentSettingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.CurrentSettingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentSettingsResponse::IsInitialized() const {
  return true;
}

void CurrentSettingsResponse::Swap(CurrentSettingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrentSettingsResponse::InternalSwap(CurrentSettingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&current_settings_)->InternalSwap(CastToBase(&other->current_settings_));
}

::google::protobuf::Metadata CurrentSettingsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribePossibleSettingOptionsRequest::InitAsDefaultInstance() {
}
class SubscribePossibleSettingOptionsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribePossibleSettingOptionsRequest::SubscribePossibleSettingOptionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
}
SubscribePossibleSettingOptionsRequest::SubscribePossibleSettingOptionsRequest(const SubscribePossibleSettingOptionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
}

void SubscribePossibleSettingOptionsRequest::SharedCtor() {
}

SubscribePossibleSettingOptionsRequest::~SubscribePossibleSettingOptionsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  SharedDtor();
}

void SubscribePossibleSettingOptionsRequest::SharedDtor() {
}

void SubscribePossibleSettingOptionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribePossibleSettingOptionsRequest& SubscribePossibleSettingOptionsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribePossibleSettingOptionsRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SubscribePossibleSettingOptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribePossibleSettingOptionsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribePossibleSettingOptionsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribePossibleSettingOptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribePossibleSettingOptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
}

::google::protobuf::uint8* SubscribePossibleSettingOptionsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  return target;
}

size_t SubscribePossibleSettingOptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribePossibleSettingOptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribePossibleSettingOptionsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribePossibleSettingOptionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
    MergeFrom(*source);
  }
}

void SubscribePossibleSettingOptionsRequest::MergeFrom(const SubscribePossibleSettingOptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribePossibleSettingOptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribePossibleSettingOptionsRequest::CopyFrom(const SubscribePossibleSettingOptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SubscribePossibleSettingOptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribePossibleSettingOptionsRequest::IsInitialized() const {
  return true;
}

void SubscribePossibleSettingOptionsRequest::Swap(SubscribePossibleSettingOptionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribePossibleSettingOptionsRequest::InternalSwap(SubscribePossibleSettingOptionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribePossibleSettingOptionsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PossibleSettingOptionsResponse::InitAsDefaultInstance() {
}
class PossibleSettingOptionsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PossibleSettingOptionsResponse::kSettingOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PossibleSettingOptionsResponse::PossibleSettingOptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
}
PossibleSettingOptionsResponse::PossibleSettingOptionsResponse(const PossibleSettingOptionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      setting_options_(from.setting_options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
}

void PossibleSettingOptionsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PossibleSettingOptionsResponse_camera_2fcamera_2eproto.base);
}

PossibleSettingOptionsResponse::~PossibleSettingOptionsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  SharedDtor();
}

void PossibleSettingOptionsResponse::SharedDtor() {
}

void PossibleSettingOptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PossibleSettingOptionsResponse& PossibleSettingOptionsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PossibleSettingOptionsResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void PossibleSettingOptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setting_options_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PossibleSettingOptionsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PossibleSettingOptionsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::mavsdk::rpc::camera::SettingOptions::_InternalParse;
          object = msg->add_setting_options();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PossibleSettingOptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_setting_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PossibleSettingOptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->setting_options_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->setting_options(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
}

::google::protobuf::uint8* PossibleSettingOptionsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->setting_options_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->setting_options(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  return target;
}

size_t PossibleSettingOptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.camera.SettingOptions setting_options = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->setting_options_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->setting_options(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PossibleSettingOptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PossibleSettingOptionsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<PossibleSettingOptionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
    MergeFrom(*source);
  }
}

void PossibleSettingOptionsResponse::MergeFrom(const PossibleSettingOptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  setting_options_.MergeFrom(from.setting_options_);
}

void PossibleSettingOptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PossibleSettingOptionsResponse::CopyFrom(const PossibleSettingOptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.PossibleSettingOptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PossibleSettingOptionsResponse::IsInitialized() const {
  return true;
}

void PossibleSettingOptionsResponse::Swap(PossibleSettingOptionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PossibleSettingOptionsResponse::InternalSwap(PossibleSettingOptionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&setting_options_)->InternalSwap(CastToBase(&other->setting_options_));
}

::google::protobuf::Metadata PossibleSettingOptionsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetSettingRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_SetSettingRequest_default_instance_._instance.get_mutable()->setting_ = const_cast< ::mavsdk::rpc::camera::Setting*>(
      ::mavsdk::rpc::camera::Setting::internal_default_instance());
}
class SetSettingRequest::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::Setting& setting(const SetSettingRequest* msg);
};

const ::mavsdk::rpc::camera::Setting&
SetSettingRequest::HasBitSetters::setting(const SetSettingRequest* msg) {
  return *msg->setting_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSettingRequest::kSettingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSettingRequest::SetSettingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SetSettingRequest)
}
SetSettingRequest::SetSettingRequest(const SetSettingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_setting()) {
    setting_ = new ::mavsdk::rpc::camera::Setting(*from.setting_);
  } else {
    setting_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SetSettingRequest)
}

void SetSettingRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetSettingRequest_camera_2fcamera_2eproto.base);
  setting_ = nullptr;
}

SetSettingRequest::~SetSettingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SetSettingRequest)
  SharedDtor();
}

void SetSettingRequest::SharedDtor() {
  if (this != internal_default_instance()) delete setting_;
}

void SetSettingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSettingRequest& SetSettingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetSettingRequest_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SetSettingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SetSettingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && setting_ != nullptr) {
    delete setting_;
  }
  setting_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSettingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetSettingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.Setting setting = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::Setting::_InternalParse;
        object = msg->mutable_setting();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSettingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SetSettingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.Setting setting = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SetSettingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SetSettingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSettingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SetSettingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.Setting setting = 1;
  if (this->has_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::setting(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SetSettingRequest)
}

::google::protobuf::uint8* SetSettingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SetSettingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.Setting setting = 1;
  if (this->has_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::setting(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SetSettingRequest)
  return target;
}

size_t SetSettingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SetSettingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.Setting setting = 1;
  if (this->has_setting()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *setting_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSettingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SetSettingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSettingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SetSettingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SetSettingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SetSettingRequest)
    MergeFrom(*source);
  }
}

void SetSettingRequest::MergeFrom(const SetSettingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SetSettingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_setting()) {
    mutable_setting()->::mavsdk::rpc::camera::Setting::MergeFrom(from.setting());
  }
}

void SetSettingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SetSettingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSettingRequest::CopyFrom(const SetSettingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SetSettingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSettingRequest::IsInitialized() const {
  return true;
}

void SetSettingRequest::Swap(SetSettingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSettingRequest::InternalSwap(SetSettingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(setting_, other->setting_);
}

::google::protobuf::Metadata SetSettingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SetSettingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_SetSettingResponse_default_instance_._instance.get_mutable()->camera_result_ = const_cast< ::mavsdk::rpc::camera::CameraResult*>(
      ::mavsdk::rpc::camera::CameraResult::internal_default_instance());
}
class SetSettingResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::CameraResult& camera_result(const SetSettingResponse* msg);
};

const ::mavsdk::rpc::camera::CameraResult&
SetSettingResponse::HasBitSetters::camera_result(const SetSettingResponse* msg) {
  return *msg->camera_result_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSettingResponse::kCameraResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSettingResponse::SetSettingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SetSettingResponse)
}
SetSettingResponse::SetSettingResponse(const SetSettingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera_result()) {
    camera_result_ = new ::mavsdk::rpc::camera::CameraResult(*from.camera_result_);
  } else {
    camera_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SetSettingResponse)
}

void SetSettingResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SetSettingResponse_camera_2fcamera_2eproto.base);
  camera_result_ = nullptr;
}

SetSettingResponse::~SetSettingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SetSettingResponse)
  SharedDtor();
}

void SetSettingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete camera_result_;
}

void SetSettingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSettingResponse& SetSettingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SetSettingResponse_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SetSettingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SetSettingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && camera_result_ != nullptr) {
    delete camera_result_;
  }
  camera_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSettingResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SetSettingResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::CameraResult::_InternalParse;
        object = msg->mutable_camera_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSettingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SetSettingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult camera_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SetSettingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SetSettingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSettingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SetSettingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::camera_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SetSettingResponse)
}

::google::protobuf::uint8* SetSettingResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SetSettingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::camera_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SetSettingResponse)
  return target;
}

size_t SetSettingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SetSettingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult camera_result = 1;
  if (this->has_camera_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSettingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SetSettingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSettingResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SetSettingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SetSettingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SetSettingResponse)
    MergeFrom(*source);
  }
}

void SetSettingResponse::MergeFrom(const SetSettingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SetSettingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_camera_result()) {
    mutable_camera_result()->::mavsdk::rpc::camera::CameraResult::MergeFrom(from.camera_result());
  }
}

void SetSettingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SetSettingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSettingResponse::CopyFrom(const SetSettingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SetSettingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSettingResponse::IsInitialized() const {
  return true;
}

void SetSettingResponse::Swap(SetSettingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSettingResponse::InternalSwap(SetSettingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(camera_result_, other->camera_result_);
}

::google::protobuf::Metadata SetSettingResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CameraResult::InitAsDefaultInstance() {
}
class CameraResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraResult::kResultFieldNumber;
const int CameraResult::kResultStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraResult::CameraResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.CameraResult)
}
CameraResult::CameraResult(const CameraResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result_str().size() > 0) {
    result_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.CameraResult)
}

void CameraResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CameraResult_camera_2fcamera_2eproto.base);
  result_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CameraResult::~CameraResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.CameraResult)
  SharedDtor();
}

void CameraResult::SharedDtor() {
  result_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CameraResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraResult& CameraResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CameraResult_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void CameraResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.CameraResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CameraResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.CameraResult.Result result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_result(static_cast<::mavsdk::rpc::camera::CameraResult_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string result_str = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.CameraResult.result_str");
        object = msg->mutable_result_str();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.CameraResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.CameraResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::mavsdk::rpc::camera::CameraResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_str().data(), static_cast<int>(this->result_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.CameraResult.result_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.CameraResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.CameraResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.CameraResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_str().data(), static_cast<int>(this->result_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.CameraResult.result_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result_str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.CameraResult)
}

::google::protobuf::uint8* CameraResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.CameraResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.CameraResult.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_str().data(), static_cast<int>(this->result_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.CameraResult.result_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result_str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.CameraResult)
  return target;
}

size_t CameraResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.CameraResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_str());
  }

  // .mavsdk.rpc.camera.CameraResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.CameraResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraResult* source =
      ::google::protobuf::DynamicCastToGenerated<CameraResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.CameraResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.CameraResult)
    MergeFrom(*source);
  }
}

void CameraResult::MergeFrom(const CameraResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.CameraResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CameraResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.CameraResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraResult::CopyFrom(const CameraResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.CameraResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraResult::IsInitialized() const {
  return true;
}

void CameraResult::Swap(CameraResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraResult::InternalSwap(CameraResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata CameraResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CaptureInfo::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_CaptureInfo_default_instance_._instance.get_mutable()->position_ = const_cast< ::mavsdk::rpc::camera::Position*>(
      ::mavsdk::rpc::camera::Position::internal_default_instance());
  ::mavsdk::rpc::camera::_CaptureInfo_default_instance_._instance.get_mutable()->attitude_quaternion_ = const_cast< ::mavsdk::rpc::camera::Quaternion*>(
      ::mavsdk::rpc::camera::Quaternion::internal_default_instance());
  ::mavsdk::rpc::camera::_CaptureInfo_default_instance_._instance.get_mutable()->attitude_euler_angle_ = const_cast< ::mavsdk::rpc::camera::EulerAngle*>(
      ::mavsdk::rpc::camera::EulerAngle::internal_default_instance());
}
class CaptureInfo::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::Position& position(const CaptureInfo* msg);
  static const ::mavsdk::rpc::camera::Quaternion& attitude_quaternion(const CaptureInfo* msg);
  static const ::mavsdk::rpc::camera::EulerAngle& attitude_euler_angle(const CaptureInfo* msg);
};

const ::mavsdk::rpc::camera::Position&
CaptureInfo::HasBitSetters::position(const CaptureInfo* msg) {
  return *msg->position_;
}
const ::mavsdk::rpc::camera::Quaternion&
CaptureInfo::HasBitSetters::attitude_quaternion(const CaptureInfo* msg) {
  return *msg->attitude_quaternion_;
}
const ::mavsdk::rpc::camera::EulerAngle&
CaptureInfo::HasBitSetters::attitude_euler_angle(const CaptureInfo* msg) {
  return *msg->attitude_euler_angle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CaptureInfo::kPositionFieldNumber;
const int CaptureInfo::kAttitudeQuaternionFieldNumber;
const int CaptureInfo::kAttitudeEulerAngleFieldNumber;
const int CaptureInfo::kTimeUtcUsFieldNumber;
const int CaptureInfo::kIsSuccessFieldNumber;
const int CaptureInfo::kIndexFieldNumber;
const int CaptureInfo::kFileUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CaptureInfo::CaptureInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.CaptureInfo)
}
CaptureInfo::CaptureInfo(const CaptureInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_url().size() > 0) {
    file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_url_);
  }
  if (from.has_position()) {
    position_ = new ::mavsdk::rpc::camera::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_attitude_quaternion()) {
    attitude_quaternion_ = new ::mavsdk::rpc::camera::Quaternion(*from.attitude_quaternion_);
  } else {
    attitude_quaternion_ = nullptr;
  }
  if (from.has_attitude_euler_angle()) {
    attitude_euler_angle_ = new ::mavsdk::rpc::camera::EulerAngle(*from.attitude_euler_angle_);
  } else {
    attitude_euler_angle_ = nullptr;
  }
  ::memcpy(&time_utc_us_, &from.time_utc_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&time_utc_us_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.CaptureInfo)
}

void CaptureInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CaptureInfo_camera_2fcamera_2eproto.base);
  file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&position_)) + sizeof(index_));
}

CaptureInfo::~CaptureInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.CaptureInfo)
  SharedDtor();
}

void CaptureInfo::SharedDtor() {
  file_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete attitude_quaternion_;
  if (this != internal_default_instance()) delete attitude_euler_angle_;
}

void CaptureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CaptureInfo& CaptureInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CaptureInfo_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void CaptureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.CaptureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && attitude_euler_angle_ != nullptr) {
    delete attitude_euler_angle_;
  }
  attitude_euler_angle_ = nullptr;
  ::memset(&time_utc_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&time_utc_us_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CaptureInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CaptureInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.Position position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::Position::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mavsdk.rpc.camera.Quaternion attitude_quaternion = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::Quaternion::_InternalParse;
        object = msg->mutable_attitude_quaternion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::EulerAngle::_InternalParse;
        object = msg->mutable_attitude_euler_angle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint64 time_utc_us = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_utc_us(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_success = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_is_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 index = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string file_url = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.CaptureInfo.file_url");
        object = msg->mutable_file_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CaptureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.CaptureInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.camera.Quaternion attitude_quaternion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attitude_quaternion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_attitude_euler_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time_utc_us = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_utc_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_url = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_url().data(), static_cast<int>(this->file_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.CaptureInfo.file_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.CaptureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.CaptureInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CaptureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.CaptureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // .mavsdk.rpc.camera.Quaternion attitude_quaternion = 2;
  if (this->has_attitude_quaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::attitude_quaternion(this), output);
  }

  // .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 3;
  if (this->has_attitude_euler_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::attitude_euler_angle(this), output);
  }

  // uint64 time_utc_us = 4;
  if (this->time_utc_us() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_utc_us(), output);
  }

  // bool is_success = 5;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_success(), output);
  }

  // int32 index = 6;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->index(), output);
  }

  // string file_url = 7;
  if (this->file_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_url().data(), static_cast<int>(this->file_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.CaptureInfo.file_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->file_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.CaptureInfo)
}

::google::protobuf::uint8* CaptureInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.CaptureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // .mavsdk.rpc.camera.Quaternion attitude_quaternion = 2;
  if (this->has_attitude_quaternion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::attitude_quaternion(this), target);
  }

  // .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 3;
  if (this->has_attitude_euler_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::attitude_euler_angle(this), target);
  }

  // uint64 time_utc_us = 4;
  if (this->time_utc_us() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_utc_us(), target);
  }

  // bool is_success = 5;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_success(), target);
  }

  // int32 index = 6;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->index(), target);
  }

  // string file_url = 7;
  if (this->file_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_url().data(), static_cast<int>(this->file_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.CaptureInfo.file_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->file_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.CaptureInfo)
  return target;
}

size_t CaptureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.CaptureInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_url = 7;
  if (this->file_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_url());
  }

  // .mavsdk.rpc.camera.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .mavsdk.rpc.camera.Quaternion attitude_quaternion = 2;
  if (this->has_attitude_quaternion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attitude_quaternion_);
  }

  // .mavsdk.rpc.camera.EulerAngle attitude_euler_angle = 3;
  if (this->has_attitude_euler_angle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *attitude_euler_angle_);
  }

  // uint64 time_utc_us = 4;
  if (this->time_utc_us() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_utc_us());
  }

  // bool is_success = 5;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 index = 6;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptureInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.CaptureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CaptureInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CaptureInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.CaptureInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.CaptureInfo)
    MergeFrom(*source);
  }
}

void CaptureInfo::MergeFrom(const CaptureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.CaptureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_url().size() > 0) {

    file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_url_);
  }
  if (from.has_position()) {
    mutable_position()->::mavsdk::rpc::camera::Position::MergeFrom(from.position());
  }
  if (from.has_attitude_quaternion()) {
    mutable_attitude_quaternion()->::mavsdk::rpc::camera::Quaternion::MergeFrom(from.attitude_quaternion());
  }
  if (from.has_attitude_euler_angle()) {
    mutable_attitude_euler_angle()->::mavsdk::rpc::camera::EulerAngle::MergeFrom(from.attitude_euler_angle());
  }
  if (from.time_utc_us() != 0) {
    set_time_utc_us(from.time_utc_us());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void CaptureInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.CaptureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaptureInfo::CopyFrom(const CaptureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.CaptureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureInfo::IsInitialized() const {
  return true;
}

void CaptureInfo::Swap(CaptureInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CaptureInfo::InternalSwap(CaptureInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_url_.Swap(&other->file_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(attitude_quaternion_, other->attitude_quaternion_);
  swap(attitude_euler_angle_, other->attitude_euler_angle_);
  swap(time_utc_us_, other->time_utc_us_);
  swap(is_success_, other->is_success_);
  swap(index_, other->index_);
}

::google::protobuf::Metadata CaptureInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kLatitudeDegFieldNumber;
const int Position::kLongitudeDegFieldNumber;
const int Position::kAbsoluteAltitudeMFieldNumber;
const int Position::kRelativeAltitudeMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.Position)
}

void Position::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Position_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Position*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_latitude_deg(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double longitude_deg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_longitude_deg(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // float absolute_altitude_m = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_absolute_altitude_m(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float relative_altitude_m = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_relative_altitude_m(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double latitude_deg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude_deg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float absolute_altitude_m = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_altitude_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_altitude_m = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_altitude_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (this->latitude_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude_deg(), output);
  }

  // double longitude_deg = 2;
  if (this->longitude_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude_deg(), output);
  }

  // float absolute_altitude_m = 3;
  if (this->absolute_altitude_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->absolute_altitude_m(), output);
  }

  // float relative_altitude_m = 4;
  if (this->relative_altitude_m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relative_altitude_m(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (this->latitude_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude_deg(), target);
  }

  // double longitude_deg = 2;
  if (this->longitude_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude_deg(), target);
  }

  // float absolute_altitude_m = 3;
  if (this->absolute_altitude_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->absolute_altitude_m(), target);
  }

  // float relative_altitude_m = 4;
  if (this->relative_altitude_m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relative_altitude_m(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (this->latitude_deg() != 0) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2;
  if (this->longitude_deg() != 0) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3;
  if (this->absolute_altitude_m() != 0) {
    total_size += 1 + 4;
  }

  // float relative_altitude_m = 4;
  if (this->relative_altitude_m() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude_deg() != 0) {
    set_latitude_deg(from.latitude_deg());
  }
  if (from.longitude_deg() != 0) {
    set_longitude_deg(from.longitude_deg());
  }
  if (from.absolute_altitude_m() != 0) {
    set_absolute_altitude_m(from.absolute_altitude_m());
  }
  if (from.relative_altitude_m() != 0) {
    set_relative_altitude_m(from.relative_altitude_m());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_deg_, other->latitude_deg_);
  swap(longitude_deg_, other->longitude_deg_);
  swap(absolute_altitude_m_, other->absolute_altitude_m_);
  swap(relative_altitude_m_, other->relative_altitude_m_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kWFieldNumber;
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Quaternion_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Quaternion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Quaternion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float w = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_w(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float z = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.Quaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float w = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.Quaternion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->w(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->w(), target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(w_, other->w_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EulerAngle::InitAsDefaultInstance() {
}
class EulerAngle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EulerAngle::kRollDegFieldNumber;
const int EulerAngle::kPitchDegFieldNumber;
const int EulerAngle::kYawDegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EulerAngle::EulerAngle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.EulerAngle)
}
EulerAngle::EulerAngle(const EulerAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_deg_, &from.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.EulerAngle)
}

void EulerAngle::SharedCtor() {
  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
}

EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.EulerAngle)
  SharedDtor();
}

void EulerAngle::SharedDtor() {
}

void EulerAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EulerAngle& EulerAngle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EulerAngle_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.EulerAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EulerAngle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EulerAngle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float roll_deg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_roll_deg(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float pitch_deg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_pitch_deg(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float yaw_deg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_yaw_deg(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EulerAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.EulerAngle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float roll_deg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch_deg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_deg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.EulerAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.EulerAngle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EulerAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.EulerAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1;
  if (this->roll_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->roll_deg(), output);
  }

  // float pitch_deg = 2;
  if (this->pitch_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch_deg(), output);
  }

  // float yaw_deg = 3;
  if (this->yaw_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_deg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.EulerAngle)
}

::google::protobuf::uint8* EulerAngle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.EulerAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1;
  if (this->roll_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->roll_deg(), target);
  }

  // float pitch_deg = 2;
  if (this->pitch_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch_deg(), target);
  }

  // float yaw_deg = 3;
  if (this->yaw_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_deg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.EulerAngle)
  return target;
}

size_t EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.EulerAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1;
  if (this->roll_deg() != 0) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 2;
  if (this->pitch_deg() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 3;
  if (this->yaw_deg() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EulerAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const EulerAngle* source =
      ::google::protobuf::DynamicCastToGenerated<EulerAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.EulerAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.EulerAngle)
    MergeFrom(*source);
  }
}

void EulerAngle::MergeFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roll_deg() != 0) {
    set_roll_deg(from.roll_deg());
  }
  if (from.pitch_deg() != 0) {
    set_pitch_deg(from.pitch_deg());
  }
  if (from.yaw_deg() != 0) {
    set_yaw_deg(from.yaw_deg());
  }
}

void EulerAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerAngle::IsInitialized() const {
  return true;
}

void EulerAngle::Swap(EulerAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EulerAngle::InternalSwap(EulerAngle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roll_deg_, other->roll_deg_);
  swap(pitch_deg_, other->pitch_deg_);
  swap(yaw_deg_, other->yaw_deg_);
}

::google::protobuf::Metadata EulerAngle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VideoStreamSettings::InitAsDefaultInstance() {
}
class VideoStreamSettings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoStreamSettings::kFrameRateHzFieldNumber;
const int VideoStreamSettings::kHorizontalResolutionPixFieldNumber;
const int VideoStreamSettings::kVerticalResolutionPixFieldNumber;
const int VideoStreamSettings::kBitRateBSFieldNumber;
const int VideoStreamSettings::kRotationDegFieldNumber;
const int VideoStreamSettings::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoStreamSettings::VideoStreamSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.VideoStreamSettings)
}
VideoStreamSettings::VideoStreamSettings(const VideoStreamSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  ::memcpy(&frame_rate_hz_, &from.frame_rate_hz_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_deg_) -
    reinterpret_cast<char*>(&frame_rate_hz_)) + sizeof(rotation_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.VideoStreamSettings)
}

void VideoStreamSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VideoStreamSettings_camera_2fcamera_2eproto.base);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_rate_hz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_deg_) -
      reinterpret_cast<char*>(&frame_rate_hz_)) + sizeof(rotation_deg_));
}

VideoStreamSettings::~VideoStreamSettings() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.VideoStreamSettings)
  SharedDtor();
}

void VideoStreamSettings::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoStreamSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoStreamSettings& VideoStreamSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VideoStreamSettings_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void VideoStreamSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.VideoStreamSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_rate_hz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_deg_) -
      reinterpret_cast<char*>(&frame_rate_hz_)) + sizeof(rotation_deg_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VideoStreamSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VideoStreamSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float frame_rate_hz = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_frame_rate_hz(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // uint32 horizontal_resolution_pix = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_horizontal_resolution_pix(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 vertical_resolution_pix = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_vertical_resolution_pix(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 bit_rate_b_s = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bit_rate_b_s(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 rotation_deg = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_rotation_deg(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string uri = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.VideoStreamSettings.uri");
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VideoStreamSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.VideoStreamSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float frame_rate_hz = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frame_rate_hz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 horizontal_resolution_pix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horizontal_resolution_pix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vertical_resolution_pix = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertical_resolution_pix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bit_rate_b_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bit_rate_b_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rotation_deg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rotation_deg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.VideoStreamSettings.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.VideoStreamSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.VideoStreamSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VideoStreamSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.VideoStreamSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frame_rate_hz = 1;
  if (this->frame_rate_hz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frame_rate_hz(), output);
  }

  // uint32 horizontal_resolution_pix = 2;
  if (this->horizontal_resolution_pix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->horizontal_resolution_pix(), output);
  }

  // uint32 vertical_resolution_pix = 3;
  if (this->vertical_resolution_pix() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vertical_resolution_pix(), output);
  }

  // uint32 bit_rate_b_s = 4;
  if (this->bit_rate_b_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bit_rate_b_s(), output);
  }

  // uint32 rotation_deg = 5;
  if (this->rotation_deg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rotation_deg(), output);
  }

  // string uri = 6;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.VideoStreamSettings.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.VideoStreamSettings)
}

::google::protobuf::uint8* VideoStreamSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.VideoStreamSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frame_rate_hz = 1;
  if (this->frame_rate_hz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->frame_rate_hz(), target);
  }

  // uint32 horizontal_resolution_pix = 2;
  if (this->horizontal_resolution_pix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->horizontal_resolution_pix(), target);
  }

  // uint32 vertical_resolution_pix = 3;
  if (this->vertical_resolution_pix() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vertical_resolution_pix(), target);
  }

  // uint32 bit_rate_b_s = 4;
  if (this->bit_rate_b_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bit_rate_b_s(), target);
  }

  // uint32 rotation_deg = 5;
  if (this->rotation_deg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rotation_deg(), target);
  }

  // string uri = 6;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.VideoStreamSettings.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.VideoStreamSettings)
  return target;
}

size_t VideoStreamSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.VideoStreamSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 6;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  // float frame_rate_hz = 1;
  if (this->frame_rate_hz() != 0) {
    total_size += 1 + 4;
  }

  // uint32 horizontal_resolution_pix = 2;
  if (this->horizontal_resolution_pix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizontal_resolution_pix());
  }

  // uint32 vertical_resolution_pix = 3;
  if (this->vertical_resolution_pix() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vertical_resolution_pix());
  }

  // uint32 bit_rate_b_s = 4;
  if (this->bit_rate_b_s() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bit_rate_b_s());
  }

  // uint32 rotation_deg = 5;
  if (this->rotation_deg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rotation_deg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoStreamSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.VideoStreamSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoStreamSettings* source =
      ::google::protobuf::DynamicCastToGenerated<VideoStreamSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.VideoStreamSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.VideoStreamSettings)
    MergeFrom(*source);
  }
}

void VideoStreamSettings::MergeFrom(const VideoStreamSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.VideoStreamSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  if (from.frame_rate_hz() != 0) {
    set_frame_rate_hz(from.frame_rate_hz());
  }
  if (from.horizontal_resolution_pix() != 0) {
    set_horizontal_resolution_pix(from.horizontal_resolution_pix());
  }
  if (from.vertical_resolution_pix() != 0) {
    set_vertical_resolution_pix(from.vertical_resolution_pix());
  }
  if (from.bit_rate_b_s() != 0) {
    set_bit_rate_b_s(from.bit_rate_b_s());
  }
  if (from.rotation_deg() != 0) {
    set_rotation_deg(from.rotation_deg());
  }
}

void VideoStreamSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.VideoStreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoStreamSettings::CopyFrom(const VideoStreamSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.VideoStreamSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoStreamSettings::IsInitialized() const {
  return true;
}

void VideoStreamSettings::Swap(VideoStreamSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoStreamSettings::InternalSwap(VideoStreamSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_rate_hz_, other->frame_rate_hz_);
  swap(horizontal_resolution_pix_, other->horizontal_resolution_pix_);
  swap(vertical_resolution_pix_, other->vertical_resolution_pix_);
  swap(bit_rate_b_s_, other->bit_rate_b_s_);
  swap(rotation_deg_, other->rotation_deg_);
}

::google::protobuf::Metadata VideoStreamSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VideoStreamInfo::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_VideoStreamInfo_default_instance_._instance.get_mutable()->video_stream_settings_ = const_cast< ::mavsdk::rpc::camera::VideoStreamSettings*>(
      ::mavsdk::rpc::camera::VideoStreamSettings::internal_default_instance());
}
class VideoStreamInfo::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::VideoStreamSettings& video_stream_settings(const VideoStreamInfo* msg);
};

const ::mavsdk::rpc::camera::VideoStreamSettings&
VideoStreamInfo::HasBitSetters::video_stream_settings(const VideoStreamInfo* msg) {
  return *msg->video_stream_settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoStreamInfo::kVideoStreamSettingsFieldNumber;
const int VideoStreamInfo::kVideoStreamStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoStreamInfo::VideoStreamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.VideoStreamInfo)
}
VideoStreamInfo::VideoStreamInfo(const VideoStreamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_stream_settings()) {
    video_stream_settings_ = new ::mavsdk::rpc::camera::VideoStreamSettings(*from.video_stream_settings_);
  } else {
    video_stream_settings_ = nullptr;
  }
  video_stream_status_ = from.video_stream_status_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.VideoStreamInfo)
}

void VideoStreamInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VideoStreamInfo_camera_2fcamera_2eproto.base);
  ::memset(&video_stream_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_stream_status_) -
      reinterpret_cast<char*>(&video_stream_settings_)) + sizeof(video_stream_status_));
}

VideoStreamInfo::~VideoStreamInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.VideoStreamInfo)
  SharedDtor();
}

void VideoStreamInfo::SharedDtor() {
  if (this != internal_default_instance()) delete video_stream_settings_;
}

void VideoStreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoStreamInfo& VideoStreamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VideoStreamInfo_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void VideoStreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.VideoStreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && video_stream_settings_ != nullptr) {
    delete video_stream_settings_;
  }
  video_stream_settings_ = nullptr;
  video_stream_status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VideoStreamInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VideoStreamInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.camera.VideoStreamSettings video_stream_settings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::VideoStreamSettings::_InternalParse;
        object = msg->mutable_video_stream_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus video_stream_status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_video_stream_status(static_cast<::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VideoStreamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.VideoStreamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.camera.VideoStreamSettings video_stream_settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_video_stream_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus video_stream_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_video_stream_status(static_cast< ::mavsdk::rpc::camera::VideoStreamInfo_VideoStreamStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.VideoStreamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.VideoStreamInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VideoStreamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.VideoStreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.VideoStreamSettings video_stream_settings = 1;
  if (this->has_video_stream_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::video_stream_settings(this), output);
  }

  // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus video_stream_status = 2;
  if (this->video_stream_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->video_stream_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.VideoStreamInfo)
}

::google::protobuf::uint8* VideoStreamInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.VideoStreamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.VideoStreamSettings video_stream_settings = 1;
  if (this->has_video_stream_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::video_stream_settings(this), target);
  }

  // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus video_stream_status = 2;
  if (this->video_stream_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->video_stream_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.VideoStreamInfo)
  return target;
}

size_t VideoStreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.VideoStreamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.camera.VideoStreamSettings video_stream_settings = 1;
  if (this->has_video_stream_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *video_stream_settings_);
  }

  // .mavsdk.rpc.camera.VideoStreamInfo.VideoStreamStatus video_stream_status = 2;
  if (this->video_stream_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_stream_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoStreamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.VideoStreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoStreamInfo* source =
      ::google::protobuf::DynamicCastToGenerated<VideoStreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.VideoStreamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.VideoStreamInfo)
    MergeFrom(*source);
  }
}

void VideoStreamInfo::MergeFrom(const VideoStreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.VideoStreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_stream_settings()) {
    mutable_video_stream_settings()->::mavsdk::rpc::camera::VideoStreamSettings::MergeFrom(from.video_stream_settings());
  }
  if (from.video_stream_status() != 0) {
    set_video_stream_status(from.video_stream_status());
  }
}

void VideoStreamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.VideoStreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoStreamInfo::CopyFrom(const VideoStreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.VideoStreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoStreamInfo::IsInitialized() const {
  return true;
}

void VideoStreamInfo::Swap(VideoStreamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoStreamInfo::InternalSwap(VideoStreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(video_stream_settings_, other->video_stream_settings_);
  swap(video_stream_status_, other->video_stream_status_);
}

::google::protobuf::Metadata VideoStreamInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CameraStatus::InitAsDefaultInstance() {
}
class CameraStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraStatus::kVideoOnFieldNumber;
const int CameraStatus::kPhotoIntervalOnFieldNumber;
const int CameraStatus::kUsedStorageMibFieldNumber;
const int CameraStatus::kAvailableStorageMibFieldNumber;
const int CameraStatus::kTotalStorageMibFieldNumber;
const int CameraStatus::kRecordingTimeSFieldNumber;
const int CameraStatus::kMediaFolderNameFieldNumber;
const int CameraStatus::kStorageStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraStatus::CameraStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.CameraStatus)
}
CameraStatus::CameraStatus(const CameraStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_folder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_folder_name().size() > 0) {
    media_folder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_folder_name_);
  }
  ::memcpy(&video_on_, &from.video_on_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_status_) -
    reinterpret_cast<char*>(&video_on_)) + sizeof(storage_status_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.CameraStatus)
}

void CameraStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CameraStatus_camera_2fcamera_2eproto.base);
  media_folder_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_status_) -
      reinterpret_cast<char*>(&video_on_)) + sizeof(storage_status_));
}

CameraStatus::~CameraStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.CameraStatus)
  SharedDtor();
}

void CameraStatus::SharedDtor() {
  media_folder_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CameraStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraStatus& CameraStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CameraStatus_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void CameraStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.CameraStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_folder_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_status_) -
      reinterpret_cast<char*>(&video_on_)) + sizeof(storage_status_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CameraStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool video_on = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_video_on(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool photo_interval_on = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_photo_interval_on(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float used_storage_mib = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_used_storage_mib(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float available_storage_mib = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_available_storage_mib(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float total_storage_mib = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_total_storage_mib(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float recording_time_s = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_recording_time_s(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // string media_folder_name = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.CameraStatus.media_folder_name");
        object = msg->mutable_media_folder_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .mavsdk.rpc.camera.CameraStatus.StorageStatus storage_status = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_storage_status(static_cast<::mavsdk::rpc::camera::CameraStatus_StorageStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.CameraStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool video_on = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &video_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool photo_interval_on = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &photo_interval_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float used_storage_mib = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &used_storage_mib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float available_storage_mib = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &available_storage_mib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float total_storage_mib = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_storage_mib_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float recording_time_s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recording_time_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_folder_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_folder_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_folder_name().data(), static_cast<int>(this->media_folder_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.CameraStatus.media_folder_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.camera.CameraStatus.StorageStatus storage_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_storage_status(static_cast< ::mavsdk::rpc::camera::CameraStatus_StorageStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.CameraStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.CameraStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.CameraStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool video_on = 1;
  if (this->video_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->video_on(), output);
  }

  // bool photo_interval_on = 2;
  if (this->photo_interval_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->photo_interval_on(), output);
  }

  // float used_storage_mib = 3;
  if (this->used_storage_mib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->used_storage_mib(), output);
  }

  // float available_storage_mib = 4;
  if (this->available_storage_mib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->available_storage_mib(), output);
  }

  // float total_storage_mib = 5;
  if (this->total_storage_mib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->total_storage_mib(), output);
  }

  // float recording_time_s = 6;
  if (this->recording_time_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->recording_time_s(), output);
  }

  // string media_folder_name = 7;
  if (this->media_folder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_folder_name().data(), static_cast<int>(this->media_folder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.CameraStatus.media_folder_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->media_folder_name(), output);
  }

  // .mavsdk.rpc.camera.CameraStatus.StorageStatus storage_status = 8;
  if (this->storage_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->storage_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.CameraStatus)
}

::google::protobuf::uint8* CameraStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.CameraStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool video_on = 1;
  if (this->video_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->video_on(), target);
  }

  // bool photo_interval_on = 2;
  if (this->photo_interval_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->photo_interval_on(), target);
  }

  // float used_storage_mib = 3;
  if (this->used_storage_mib() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->used_storage_mib(), target);
  }

  // float available_storage_mib = 4;
  if (this->available_storage_mib() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->available_storage_mib(), target);
  }

  // float total_storage_mib = 5;
  if (this->total_storage_mib() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->total_storage_mib(), target);
  }

  // float recording_time_s = 6;
  if (this->recording_time_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->recording_time_s(), target);
  }

  // string media_folder_name = 7;
  if (this->media_folder_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_folder_name().data(), static_cast<int>(this->media_folder_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.CameraStatus.media_folder_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->media_folder_name(), target);
  }

  // .mavsdk.rpc.camera.CameraStatus.StorageStatus storage_status = 8;
  if (this->storage_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->storage_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.CameraStatus)
  return target;
}

size_t CameraStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.CameraStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_folder_name = 7;
  if (this->media_folder_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_folder_name());
  }

  // bool video_on = 1;
  if (this->video_on() != 0) {
    total_size += 1 + 1;
  }

  // bool photo_interval_on = 2;
  if (this->photo_interval_on() != 0) {
    total_size += 1 + 1;
  }

  // float used_storage_mib = 3;
  if (this->used_storage_mib() != 0) {
    total_size += 1 + 4;
  }

  // float available_storage_mib = 4;
  if (this->available_storage_mib() != 0) {
    total_size += 1 + 4;
  }

  // float total_storage_mib = 5;
  if (this->total_storage_mib() != 0) {
    total_size += 1 + 4;
  }

  // float recording_time_s = 6;
  if (this->recording_time_s() != 0) {
    total_size += 1 + 4;
  }

  // .mavsdk.rpc.camera.CameraStatus.StorageStatus storage_status = 8;
  if (this->storage_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->storage_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.CameraStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CameraStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.CameraStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.CameraStatus)
    MergeFrom(*source);
  }
}

void CameraStatus::MergeFrom(const CameraStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.CameraStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_folder_name().size() > 0) {

    media_folder_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_folder_name_);
  }
  if (from.video_on() != 0) {
    set_video_on(from.video_on());
  }
  if (from.photo_interval_on() != 0) {
    set_photo_interval_on(from.photo_interval_on());
  }
  if (from.used_storage_mib() != 0) {
    set_used_storage_mib(from.used_storage_mib());
  }
  if (from.available_storage_mib() != 0) {
    set_available_storage_mib(from.available_storage_mib());
  }
  if (from.total_storage_mib() != 0) {
    set_total_storage_mib(from.total_storage_mib());
  }
  if (from.recording_time_s() != 0) {
    set_recording_time_s(from.recording_time_s());
  }
  if (from.storage_status() != 0) {
    set_storage_status(from.storage_status());
  }
}

void CameraStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.CameraStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraStatus::CopyFrom(const CameraStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.CameraStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraStatus::IsInitialized() const {
  return true;
}

void CameraStatus::Swap(CameraStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraStatus::InternalSwap(CameraStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_folder_name_.Swap(&other->media_folder_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(video_on_, other->video_on_);
  swap(photo_interval_on_, other->photo_interval_on_);
  swap(used_storage_mib_, other->used_storage_mib_);
  swap(available_storage_mib_, other->available_storage_mib_);
  swap(total_storage_mib_, other->total_storage_mib_);
  swap(recording_time_s_, other->recording_time_s_);
  swap(storage_status_, other->storage_status_);
}

::google::protobuf::Metadata CameraStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Setting::InitAsDefaultInstance() {
  ::mavsdk::rpc::camera::_Setting_default_instance_._instance.get_mutable()->option_ = const_cast< ::mavsdk::rpc::camera::Option*>(
      ::mavsdk::rpc::camera::Option::internal_default_instance());
}
class Setting::HasBitSetters {
 public:
  static const ::mavsdk::rpc::camera::Option& option(const Setting* msg);
};

const ::mavsdk::rpc::camera::Option&
Setting::HasBitSetters::option(const Setting* msg) {
  return *msg->option_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Setting::kSettingIdFieldNumber;
const int Setting::kSettingDescriptionFieldNumber;
const int Setting::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Setting::Setting()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.Setting)
}
Setting::Setting(const Setting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  setting_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.setting_id().size() > 0) {
    setting_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_id_);
  }
  setting_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.setting_description().size() > 0) {
    setting_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_description_);
  }
  if (from.has_option()) {
    option_ = new ::mavsdk::rpc::camera::Option(*from.option_);
  } else {
    option_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.Setting)
}

void Setting::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Setting_camera_2fcamera_2eproto.base);
  setting_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  setting_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  option_ = nullptr;
}

Setting::~Setting() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.Setting)
  SharedDtor();
}

void Setting::SharedDtor() {
  setting_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  setting_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete option_;
}

void Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Setting& Setting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Setting_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  setting_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  setting_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && option_ != nullptr) {
    delete option_;
  }
  option_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Setting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Setting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string setting_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.Setting.setting_id");
        object = msg->mutable_setting_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string setting_description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.Setting.setting_description");
        object = msg->mutable_setting_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .mavsdk.rpc.camera.Option option = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::camera::Option::_InternalParse;
        object = msg->mutable_option();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.Setting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string setting_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_setting_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->setting_id().data(), static_cast<int>(this->setting_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.Setting.setting_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string setting_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_setting_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->setting_description().data(), static_cast<int>(this->setting_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.Setting.setting_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.camera.Option option = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.Setting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.Setting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string setting_id = 1;
  if (this->setting_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_id().data(), static_cast<int>(this->setting_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Setting.setting_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->setting_id(), output);
  }

  // string setting_description = 2;
  if (this->setting_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_description().data(), static_cast<int>(this->setting_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Setting.setting_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->setting_description(), output);
  }

  // .mavsdk.rpc.camera.Option option = 3;
  if (this->has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::option(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.Setting)
}

::google::protobuf::uint8* Setting::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string setting_id = 1;
  if (this->setting_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_id().data(), static_cast<int>(this->setting_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Setting.setting_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->setting_id(), target);
  }

  // string setting_description = 2;
  if (this->setting_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_description().data(), static_cast<int>(this->setting_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Setting.setting_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->setting_description(), target);
  }

  // .mavsdk.rpc.camera.Option option = 3;
  if (this->has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::option(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.Setting)
  return target;
}

size_t Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.Setting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string setting_id = 1;
  if (this->setting_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->setting_id());
  }

  // string setting_description = 2;
  if (this->setting_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->setting_description());
  }

  // .mavsdk.rpc.camera.Option option = 3;
  if (this->has_option()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *option_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Setting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  const Setting* source =
      ::google::protobuf::DynamicCastToGenerated<Setting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.Setting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.Setting)
    MergeFrom(*source);
  }
}

void Setting::MergeFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.setting_id().size() > 0) {

    setting_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_id_);
  }
  if (from.setting_description().size() > 0) {

    setting_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_description_);
  }
  if (from.has_option()) {
    mutable_option()->::mavsdk::rpc::camera::Option::MergeFrom(from.option());
  }
}

void Setting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Setting::CopyFrom(const Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Setting::IsInitialized() const {
  return true;
}

void Setting::Swap(Setting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Setting::InternalSwap(Setting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  setting_id_.Swap(&other->setting_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  setting_description_.Swap(&other->setting_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(option_, other->option_);
}

::google::protobuf::Metadata Setting::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Option::InitAsDefaultInstance() {
}
class Option::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Option::kOptionIdFieldNumber;
const int Option::kOptionDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Option::Option()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.Option)
}
Option::Option(const Option& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  option_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.option_id().size() > 0) {
    option_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_id_);
  }
  option_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.option_description().size() > 0) {
    option_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_description_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.Option)
}

void Option::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Option_camera_2fcamera_2eproto.base);
  option_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  option_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Option::~Option() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.Option)
  SharedDtor();
}

void Option::SharedDtor() {
  option_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  option_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Option::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Option& Option::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Option_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void Option::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.Option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  option_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Option::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Option*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string option_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.Option.option_id");
        object = msg->mutable_option_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string option_description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.Option.option_description");
        object = msg->mutable_option_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Option::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.Option)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string option_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_option_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->option_id().data(), static_cast<int>(this->option_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.Option.option_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string option_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_option_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->option_description().data(), static_cast<int>(this->option_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.Option.option_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.Option)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.Option)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Option::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.Option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string option_id = 1;
  if (this->option_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option_id().data(), static_cast<int>(this->option_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Option.option_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->option_id(), output);
  }

  // string option_description = 2;
  if (this->option_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option_description().data(), static_cast<int>(this->option_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Option.option_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->option_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.Option)
}

::google::protobuf::uint8* Option::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.Option)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string option_id = 1;
  if (this->option_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option_id().data(), static_cast<int>(this->option_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Option.option_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->option_id(), target);
  }

  // string option_description = 2;
  if (this->option_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option_description().data(), static_cast<int>(this->option_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.Option.option_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->option_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.Option)
  return target;
}

size_t Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.Option)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string option_id = 1;
  if (this->option_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->option_id());
  }

  // string option_description = 2;
  if (this->option_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->option_description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Option::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.Option)
  GOOGLE_DCHECK_NE(&from, this);
  const Option* source =
      ::google::protobuf::DynamicCastToGenerated<Option>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.Option)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.Option)
    MergeFrom(*source);
  }
}

void Option::MergeFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.Option)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.option_id().size() > 0) {

    option_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_id_);
  }
  if (from.option_description().size() > 0) {

    option_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_description_);
  }
}

void Option::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Option::CopyFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Option::IsInitialized() const {
  return true;
}

void Option::Swap(Option* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Option::InternalSwap(Option* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  option_id_.Swap(&other->option_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  option_description_.Swap(&other->option_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Option::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingOptions::InitAsDefaultInstance() {
}
class SettingOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingOptions::kSettingIdFieldNumber;
const int SettingOptions::kSettingDescriptionFieldNumber;
const int SettingOptions::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingOptions::SettingOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.camera.SettingOptions)
}
SettingOptions::SettingOptions(const SettingOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      options_(from.options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  setting_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.setting_id().size() > 0) {
    setting_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_id_);
  }
  setting_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.setting_description().size() > 0) {
    setting_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_description_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.camera.SettingOptions)
}

void SettingOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettingOptions_camera_2fcamera_2eproto.base);
  setting_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  setting_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SettingOptions::~SettingOptions() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.camera.SettingOptions)
  SharedDtor();
}

void SettingOptions::SharedDtor() {
  setting_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  setting_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SettingOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingOptions& SettingOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingOptions_camera_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void SettingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.camera.SettingOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  setting_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  setting_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string setting_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.SettingOptions.setting_id");
        object = msg->mutable_setting_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string setting_description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.camera.SettingOptions.setting_description");
        object = msg->mutable_setting_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .mavsdk.rpc.camera.Option options = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::mavsdk::rpc::camera::Option::_InternalParse;
          object = msg->add_options();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.camera.SettingOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string setting_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_setting_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->setting_id().data(), static_cast<int>(this->setting_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.SettingOptions.setting_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string setting_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_setting_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->setting_description().data(), static_cast<int>(this->setting_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.camera.SettingOptions.setting_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mavsdk.rpc.camera.Option options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.camera.SettingOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.camera.SettingOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.camera.SettingOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string setting_id = 1;
  if (this->setting_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_id().data(), static_cast<int>(this->setting_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.SettingOptions.setting_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->setting_id(), output);
  }

  // string setting_description = 2;
  if (this->setting_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_description().data(), static_cast<int>(this->setting_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.SettingOptions.setting_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->setting_description(), output);
  }

  // repeated .mavsdk.rpc.camera.Option options = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->options(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.camera.SettingOptions)
}

::google::protobuf::uint8* SettingOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.camera.SettingOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string setting_id = 1;
  if (this->setting_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_id().data(), static_cast<int>(this->setting_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.SettingOptions.setting_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->setting_id(), target);
  }

  // string setting_description = 2;
  if (this->setting_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->setting_description().data(), static_cast<int>(this->setting_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.camera.SettingOptions.setting_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->setting_description(), target);
  }

  // repeated .mavsdk.rpc.camera.Option options = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->options(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.camera.SettingOptions)
  return target;
}

size_t SettingOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.camera.SettingOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.camera.Option options = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->options_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->options(static_cast<int>(i)));
    }
  }

  // string setting_id = 1;
  if (this->setting_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->setting_id());
  }

  // string setting_description = 2;
  if (this->setting_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->setting_description());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.camera.SettingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingOptions* source =
      ::google::protobuf::DynamicCastToGenerated<SettingOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.camera.SettingOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.camera.SettingOptions)
    MergeFrom(*source);
  }
}

void SettingOptions::MergeFrom(const SettingOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.camera.SettingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.setting_id().size() > 0) {

    setting_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_id_);
  }
  if (from.setting_description().size() > 0) {

    setting_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.setting_description_);
  }
}

void SettingOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.camera.SettingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingOptions::CopyFrom(const SettingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.camera.SettingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingOptions::IsInitialized() const {
  return true;
}

void SettingOptions::Swap(SettingOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingOptions::InternalSwap(SettingOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&options_)->InternalSwap(CastToBase(&other->options_));
  setting_id_.Swap(&other->setting_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  setting_description_.Swap(&other->setting_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SettingOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_camera_2fcamera_2eproto);
  return ::file_level_metadata_camera_2fcamera_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace camera
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::TakePhotoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::TakePhotoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::TakePhotoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::TakePhotoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::TakePhotoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::TakePhotoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StartPhotoIntervalRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StartPhotoIntervalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StartPhotoIntervalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StartPhotoIntervalResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StartPhotoIntervalResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StartPhotoIntervalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StopPhotoIntervalRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StopPhotoIntervalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StopPhotoIntervalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StopPhotoIntervalResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StopPhotoIntervalResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StopPhotoIntervalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StartVideoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StartVideoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StartVideoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StartVideoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StartVideoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StartVideoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StopVideoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StopVideoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StopVideoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StopVideoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StopVideoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StopVideoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StartVideoStreamingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StartVideoStreamingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StartVideoStreamingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StartVideoStreamingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StartVideoStreamingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StartVideoStreamingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StopVideoStreamingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StopVideoStreamingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StopVideoStreamingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::StopVideoStreamingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::StopVideoStreamingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::StopVideoStreamingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SetModeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SetModeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SetModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SetModeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SetModeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SetModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SubscribeModeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SubscribeModeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SubscribeModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::ModeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::ModeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::ModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SubscribeVideoStreamInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::VideoStreamInfoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::VideoStreamInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::VideoStreamInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SubscribeCaptureInfoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SubscribeCaptureInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SubscribeCaptureInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::CaptureInfoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::CaptureInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::CaptureInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SubscribeCameraStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SubscribeCameraStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SubscribeCameraStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::CameraStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::CameraStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::CameraStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SubscribeCurrentSettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::CurrentSettingsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::CurrentSettingsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::CurrentSettingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SubscribePossibleSettingOptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::PossibleSettingOptionsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::PossibleSettingOptionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::PossibleSettingOptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SetSettingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SetSettingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SetSettingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SetSettingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SetSettingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SetSettingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::CameraResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::CameraResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::CameraResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::CaptureInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::CaptureInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::CaptureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::Position* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::Position >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::Quaternion* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::EulerAngle* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::EulerAngle >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::EulerAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::VideoStreamSettings* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::VideoStreamSettings >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::VideoStreamSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::VideoStreamInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::VideoStreamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::VideoStreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::CameraStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::CameraStatus >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::CameraStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::Setting* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::Setting >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::Option* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::Option >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::Option >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::camera::SettingOptions* Arena::CreateMaybeMessage< ::mavsdk::rpc::camera::SettingOptions >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::camera::SettingOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
