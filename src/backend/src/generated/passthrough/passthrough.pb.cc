// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: passthrough/passthrough.proto

#include "passthrough/passthrough.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_passthrough_2fpassthrough_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandInt_passthrough_2fpassthrough_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_passthrough_2fpassthrough_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandLong_passthrough_2fpassthrough_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_passthrough_2fpassthrough_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MavlinkMessage_passthrough_2fpassthrough_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_passthrough_2fpassthrough_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamsInt_passthrough_2fpassthrough_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_passthrough_2fpassthrough_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamsLong_passthrough_2fpassthrough_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_passthrough_2fpassthrough_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto;
namespace mavsdk {
namespace rpc {
namespace passthrough {
class SendMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageRequest> _instance;
} _SendMessageRequest_default_instance_;
class SendMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageResponse> _instance;
} _SendMessageResponse_default_instance_;
class GetOurSysIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOurSysIdRequest> _instance;
} _GetOurSysIdRequest_default_instance_;
class GetOurSysIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOurSysIdResponse> _instance;
} _GetOurSysIdResponse_default_instance_;
class GetOurCompIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOurCompIdRequest> _instance;
} _GetOurCompIdRequest_default_instance_;
class GetOurCompIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOurCompIdResponse> _instance;
} _GetOurCompIdResponse_default_instance_;
class GetTargetSysIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTargetSysIdRequest> _instance;
} _GetTargetSysIdRequest_default_instance_;
class GetTargetSysIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTargetSysIdResponse> _instance;
} _GetTargetSysIdResponse_default_instance_;
class GetTargetCompIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTargetCompIdRequest> _instance;
} _GetTargetCompIdRequest_default_instance_;
class GetTargetCompIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTargetCompIdResponse> _instance;
} _GetTargetCompIdResponse_default_instance_;
class SendCommandIntRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendCommandIntRequest> _instance;
} _SendCommandIntRequest_default_instance_;
class SendCommandIntResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendCommandIntResponse> _instance;
} _SendCommandIntResponse_default_instance_;
class SendCommandLongRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendCommandLongRequest> _instance;
} _SendCommandLongRequest_default_instance_;
class SendCommandLongResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendCommandLongResponse> _instance;
} _SendCommandLongResponse_default_instance_;
class MavlinkMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MavlinkMessage> _instance;
} _MavlinkMessage_default_instance_;
class CommandIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandInt> _instance;
} _CommandInt_default_instance_;
class ParamsIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamsInt> _instance;
} _ParamsInt_default_instance_;
class CommandLongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandLong> _instance;
} _CommandLong_default_instance_;
class ParamsLongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParamsLong> _instance;
} _ParamsLong_default_instance_;
class PassthroughResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PassthroughResult> _instance;
} _PassthroughResult_default_instance_;
}  // namespace passthrough
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_CommandInt_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_CommandInt_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::CommandInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::CommandInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandInt_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandInt_passthrough_2fpassthrough_2eproto}, {
      &scc_info_ParamsInt_passthrough_2fpassthrough_2eproto.base,}};

static void InitDefaultsscc_info_CommandLong_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_CommandLong_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::CommandLong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::CommandLong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandLong_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandLong_passthrough_2fpassthrough_2eproto}, {
      &scc_info_ParamsLong_passthrough_2fpassthrough_2eproto.base,}};

static void InitDefaultsscc_info_GetOurCompIdRequest_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetOurCompIdRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetOurCompIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetOurCompIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOurCompIdRequest_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOurCompIdRequest_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_GetOurCompIdResponse_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetOurCompIdResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetOurCompIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetOurCompIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOurCompIdResponse_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOurCompIdResponse_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_GetOurSysIdRequest_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetOurSysIdRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetOurSysIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetOurSysIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOurSysIdRequest_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOurSysIdRequest_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_GetOurSysIdResponse_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetOurSysIdResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetOurSysIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetOurSysIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOurSysIdResponse_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOurSysIdResponse_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_GetTargetCompIdRequest_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetTargetCompIdRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetTargetCompIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetTargetCompIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTargetCompIdRequest_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTargetCompIdRequest_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_GetTargetCompIdResponse_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetTargetCompIdResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetTargetCompIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetTargetCompIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTargetCompIdResponse_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTargetCompIdResponse_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_GetTargetSysIdRequest_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetTargetSysIdRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetTargetSysIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetTargetSysIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTargetSysIdRequest_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTargetSysIdRequest_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_GetTargetSysIdResponse_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_GetTargetSysIdResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::GetTargetSysIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::GetTargetSysIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTargetSysIdResponse_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTargetSysIdResponse_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_MavlinkMessage_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_MavlinkMessage_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::MavlinkMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::MavlinkMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MavlinkMessage_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MavlinkMessage_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_ParamsInt_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_ParamsInt_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::ParamsInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::ParamsInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamsInt_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParamsInt_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_ParamsLong_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_ParamsLong_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::ParamsLong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::ParamsLong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParamsLong_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParamsLong_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_PassthroughResult_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_PassthroughResult_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::PassthroughResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::PassthroughResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PassthroughResult_passthrough_2fpassthrough_2eproto}, {}};

static void InitDefaultsscc_info_SendCommandIntRequest_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_SendCommandIntRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::SendCommandIntRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::SendCommandIntRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendCommandIntRequest_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendCommandIntRequest_passthrough_2fpassthrough_2eproto}, {
      &scc_info_CommandInt_passthrough_2fpassthrough_2eproto.base,}};

static void InitDefaultsscc_info_SendCommandIntResponse_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_SendCommandIntResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::SendCommandIntResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::SendCommandIntResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendCommandIntResponse_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendCommandIntResponse_passthrough_2fpassthrough_2eproto}, {
      &scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto.base,}};

static void InitDefaultsscc_info_SendCommandLongRequest_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_SendCommandLongRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::SendCommandLongRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::SendCommandLongRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendCommandLongRequest_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendCommandLongRequest_passthrough_2fpassthrough_2eproto}, {
      &scc_info_CommandLong_passthrough_2fpassthrough_2eproto.base,}};

static void InitDefaultsscc_info_SendCommandLongResponse_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_SendCommandLongResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::SendCommandLongResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::SendCommandLongResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendCommandLongResponse_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendCommandLongResponse_passthrough_2fpassthrough_2eproto}, {
      &scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageRequest_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_SendMessageRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::SendMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::SendMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageRequest_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMessageRequest_passthrough_2fpassthrough_2eproto}, {
      &scc_info_MavlinkMessage_passthrough_2fpassthrough_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageResponse_passthrough_2fpassthrough_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::passthrough::_SendMessageResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::passthrough::SendMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::passthrough::SendMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageResponse_passthrough_2fpassthrough_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMessageResponse_passthrough_2fpassthrough_2eproto}, {
      &scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_passthrough_2fpassthrough_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_passthrough_2fpassthrough_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_passthrough_2fpassthrough_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_passthrough_2fpassthrough_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendMessageRequest, mavlink_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendMessageResponse, passthrough_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetOurSysIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetOurSysIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetOurSysIdResponse, sysid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetOurCompIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetOurCompIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetOurCompIdResponse, compid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetTargetSysIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetTargetSysIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetTargetSysIdResponse, target_sysid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetTargetCompIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetTargetCompIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::GetTargetCompIdResponse, target_compid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandIntRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandIntRequest, command_int_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandIntResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandIntResponse, passthrough_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandLongRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandLongRequest, command_long_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandLongResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::SendCommandLongResponse, passthrough_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, checksum_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, magic_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, len_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, incompat_flags_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, compat_flags_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, seq_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, sysid_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, compid_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, msgid_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, payload64_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::MavlinkMessage, ck_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandInt, target_system_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandInt, target_component_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandInt, command_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandInt, current_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandInt, autocontinue_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandInt, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, param1_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, param2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, param3_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, param4_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsInt, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandLong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandLong, target_system_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandLong, target_component_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandLong, command_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandLong, confirmation_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::CommandLong, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, param1_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, param2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, param3_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, param4_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, param5_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, param6_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::ParamsLong, param7_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::PassthroughResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::PassthroughResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::passthrough::PassthroughResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::passthrough::SendMessageRequest)},
  { 6, -1, sizeof(::mavsdk::rpc::passthrough::SendMessageResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::passthrough::GetOurSysIdRequest)},
  { 17, -1, sizeof(::mavsdk::rpc::passthrough::GetOurSysIdResponse)},
  { 23, -1, sizeof(::mavsdk::rpc::passthrough::GetOurCompIdRequest)},
  { 28, -1, sizeof(::mavsdk::rpc::passthrough::GetOurCompIdResponse)},
  { 34, -1, sizeof(::mavsdk::rpc::passthrough::GetTargetSysIdRequest)},
  { 39, -1, sizeof(::mavsdk::rpc::passthrough::GetTargetSysIdResponse)},
  { 45, -1, sizeof(::mavsdk::rpc::passthrough::GetTargetCompIdRequest)},
  { 50, -1, sizeof(::mavsdk::rpc::passthrough::GetTargetCompIdResponse)},
  { 56, -1, sizeof(::mavsdk::rpc::passthrough::SendCommandIntRequest)},
  { 62, -1, sizeof(::mavsdk::rpc::passthrough::SendCommandIntResponse)},
  { 68, -1, sizeof(::mavsdk::rpc::passthrough::SendCommandLongRequest)},
  { 74, -1, sizeof(::mavsdk::rpc::passthrough::SendCommandLongResponse)},
  { 80, -1, sizeof(::mavsdk::rpc::passthrough::MavlinkMessage)},
  { 96, -1, sizeof(::mavsdk::rpc::passthrough::CommandInt)},
  { 107, -1, sizeof(::mavsdk::rpc::passthrough::ParamsInt)},
  { 119, -1, sizeof(::mavsdk::rpc::passthrough::CommandLong)},
  { 129, -1, sizeof(::mavsdk::rpc::passthrough::ParamsLong)},
  { 141, -1, sizeof(::mavsdk::rpc::passthrough::PassthroughResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_SendMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_SendMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetOurSysIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetOurSysIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetOurCompIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetOurCompIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetTargetSysIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetTargetSysIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetTargetCompIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_GetTargetCompIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_SendCommandIntRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_SendCommandIntResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_SendCommandLongRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_SendCommandLongResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_MavlinkMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_CommandInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_ParamsInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_CommandLong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_ParamsLong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::passthrough::_PassthroughResult_default_instance_),
};

const char descriptor_table_protodef_passthrough_2fpassthrough_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035passthrough/passthrough.proto\022\026mavsdk."
  "rpc.passthrough\"U\n\022SendMessageRequest\022\?\n"
  "\017mavlink_message\030\001 \001(\0132&.mavsdk.rpc.pass"
  "through.MavlinkMessage\"\\\n\023SendMessageRes"
  "ponse\022E\n\022passthrough_result\030\001 \001(\0132).mavs"
  "dk.rpc.passthrough.PassthroughResult\"\024\n\022"
  "GetOurSysIdRequest\"$\n\023GetOurSysIdRespons"
  "e\022\r\n\005sysid\030\001 \001(\r\"\025\n\023GetOurCompIdRequest\""
  "&\n\024GetOurCompIdResponse\022\016\n\006compid\030\001 \001(\r\""
  "\027\n\025GetTargetSysIdRequest\".\n\026GetTargetSys"
  "IdResponse\022\024\n\014target_sysid\030\001 \001(\r\"\030\n\026GetT"
  "argetCompIdRequest\"0\n\027GetTargetCompIdRes"
  "ponse\022\025\n\rtarget_compid\030\001 \001(\r\"P\n\025SendComm"
  "andIntRequest\0227\n\013command_int\030\001 \001(\0132\".mav"
  "sdk.rpc.passthrough.CommandInt\"_\n\026SendCo"
  "mmandIntResponse\022E\n\022passthrough_result\030\001"
  " \001(\0132).mavsdk.rpc.passthrough.Passthroug"
  "hResult\"S\n\026SendCommandLongRequest\0229\n\014com"
  "mand_long\030\001 \001(\0132#.mavsdk.rpc.passthrough"
  ".CommandLong\"`\n\027SendCommandLongResponse\022"
  "E\n\022passthrough_result\030\001 \001(\0132).mavsdk.rpc"
  ".passthrough.PassthroughResult\"\306\001\n\016Mavli"
  "nkMessage\022\020\n\010checksum\030\001 \001(\r\022\r\n\005magic\030\002 \001"
  "(\r\022\013\n\003len\030\003 \001(\r\022\026\n\016incompat_flags\030\004 \001(\r\022"
  "\024\n\014compat_flags\030\005 \001(\r\022\013\n\003seq\030\006 \001(\r\022\r\n\005sy"
  "sid\030\007 \001(\r\022\016\n\006compid\030\010 \001(\r\022\r\n\005msgid\030\t \001(\r"
  "\022\021\n\tpayload64\030\n \003(\004\022\n\n\002ck\030\013 \003(\r\"\256\001\n\nComm"
  "andInt\022\030\n\020target_system_id\030\001 \001(\r\022\033\n\023targ"
  "et_component_id\030\002 \001(\r\022\017\n\007command\030\003 \001(\004\022\017"
  "\n\007current\030\004 \001(\010\022\024\n\014autocontinue\030\005 \001(\010\0221\n"
  "\006params\030\006 \001(\0132!.mavsdk.rpc.passthrough.P"
  "aramsInt\"l\n\tParamsInt\022\016\n\006param1\030\001 \001(\002\022\016\n"
  "\006param2\030\002 \001(\002\022\016\n\006param3\030\003 \001(\002\022\016\n\006param4\030"
  "\004 \001(\002\022\t\n\001x\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\t\n\001z\030\007 \001(\002\"\237"
  "\001\n\013CommandLong\022\030\n\020target_system_id\030\001 \001(\r"
  "\022\033\n\023target_component_id\030\002 \001(\r\022\017\n\007command"
  "\030\003 \001(\004\022\024\n\014confirmation\030\004 \001(\r\0222\n\006params\030\005"
  " \001(\0132\".mavsdk.rpc.passthrough.ParamsLong"
  "\"|\n\nParamsLong\022\016\n\006param1\030\001 \001(\002\022\016\n\006param2"
  "\030\002 \001(\002\022\016\n\006param3\030\003 \001(\002\022\016\n\006param4\030\004 \001(\002\022\016"
  "\n\006param5\030\005 \001(\002\022\016\n\006param6\030\006 \001(\002\022\016\n\006param7"
  "\030\007 \001(\002\"\243\001\n\021PassthroughResult\022@\n\006result\030\001"
  " \001(\01620.mavsdk.rpc.passthrough.Passthroug"
  "hResult.Result\022\022\n\nresult_str\030\002 \001(\t\"8\n\006Re"
  "sult\022\013\n\007UNKNOWN\020\000\022\013\n\007SUCCESS\020\001\022\024\n\020CONNEC"
  "TION_ERROR\020\0022\247\006\n\022PassthroughService\022h\n\013S"
  "endMessage\022*.mavsdk.rpc.passthrough.Send"
  "MessageRequest\032+.mavsdk.rpc.passthrough."
  "SendMessageResponse\"\000\022h\n\013GetOurSysId\022*.m"
  "avsdk.rpc.passthrough.GetOurSysIdRequest"
  "\032+.mavsdk.rpc.passthrough.GetOurSysIdRes"
  "ponse\"\000\022k\n\014GetOurCompId\022+.mavsdk.rpc.pas"
  "sthrough.GetOurCompIdRequest\032,.mavsdk.rp"
  "c.passthrough.GetOurCompIdResponse\"\000\022q\n\016"
  "GetTargetSysId\022-.mavsdk.rpc.passthrough."
  "GetTargetSysIdRequest\032..mavsdk.rpc.passt"
  "hrough.GetTargetSysIdResponse\"\000\022t\n\017GetTa"
  "rgetCompId\022..mavsdk.rpc.passthrough.GetT"
  "argetCompIdRequest\032/.mavsdk.rpc.passthro"
  "ugh.GetTargetCompIdResponse\"\000\022q\n\016SendCom"
  "mandInt\022-.mavsdk.rpc.passthrough.SendCom"
  "mandIntRequest\032..mavsdk.rpc.passthrough."
  "SendCommandIntResponse\"\000\022t\n\017SendCommandL"
  "ong\022..mavsdk.rpc.passthrough.SendCommand"
  "LongRequest\032/.mavsdk.rpc.passthrough.Sen"
  "dCommandLongResponse\"\000B)\n\025io.mavsdk.pass"
  "throughB\020PassthroughProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_passthrough_2fpassthrough_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_passthrough_2fpassthrough_2eproto_sccs[20] = {
  &scc_info_CommandInt_passthrough_2fpassthrough_2eproto.base,
  &scc_info_CommandLong_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetOurCompIdRequest_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetOurCompIdResponse_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetOurSysIdRequest_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetOurSysIdResponse_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetTargetCompIdRequest_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetTargetCompIdResponse_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetTargetSysIdRequest_passthrough_2fpassthrough_2eproto.base,
  &scc_info_GetTargetSysIdResponse_passthrough_2fpassthrough_2eproto.base,
  &scc_info_MavlinkMessage_passthrough_2fpassthrough_2eproto.base,
  &scc_info_ParamsInt_passthrough_2fpassthrough_2eproto.base,
  &scc_info_ParamsLong_passthrough_2fpassthrough_2eproto.base,
  &scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto.base,
  &scc_info_SendCommandIntRequest_passthrough_2fpassthrough_2eproto.base,
  &scc_info_SendCommandIntResponse_passthrough_2fpassthrough_2eproto.base,
  &scc_info_SendCommandLongRequest_passthrough_2fpassthrough_2eproto.base,
  &scc_info_SendCommandLongResponse_passthrough_2fpassthrough_2eproto.base,
  &scc_info_SendMessageRequest_passthrough_2fpassthrough_2eproto.base,
  &scc_info_SendMessageResponse_passthrough_2fpassthrough_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_passthrough_2fpassthrough_2eproto_once;
static bool descriptor_table_passthrough_2fpassthrough_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_passthrough_2fpassthrough_2eproto = {
  &descriptor_table_passthrough_2fpassthrough_2eproto_initialized, descriptor_table_protodef_passthrough_2fpassthrough_2eproto, "passthrough/passthrough.proto", 2673,
  &descriptor_table_passthrough_2fpassthrough_2eproto_once, descriptor_table_passthrough_2fpassthrough_2eproto_sccs, descriptor_table_passthrough_2fpassthrough_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_passthrough_2fpassthrough_2eproto::offsets,
  file_level_metadata_passthrough_2fpassthrough_2eproto, 20, file_level_enum_descriptors_passthrough_2fpassthrough_2eproto, file_level_service_descriptors_passthrough_2fpassthrough_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_passthrough_2fpassthrough_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_passthrough_2fpassthrough_2eproto), true);
namespace mavsdk {
namespace rpc {
namespace passthrough {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PassthroughResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_passthrough_2fpassthrough_2eproto);
  return file_level_enum_descriptors_passthrough_2fpassthrough_2eproto[0];
}
bool PassthroughResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PassthroughResult_Result PassthroughResult::UNKNOWN;
constexpr PassthroughResult_Result PassthroughResult::SUCCESS;
constexpr PassthroughResult_Result PassthroughResult::CONNECTION_ERROR;
constexpr PassthroughResult_Result PassthroughResult::Result_MIN;
constexpr PassthroughResult_Result PassthroughResult::Result_MAX;
constexpr int PassthroughResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SendMessageRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_SendMessageRequest_default_instance_._instance.get_mutable()->mavlink_message_ = const_cast< ::mavsdk::rpc::passthrough::MavlinkMessage*>(
      ::mavsdk::rpc::passthrough::MavlinkMessage::internal_default_instance());
}
class SendMessageRequest::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::MavlinkMessage& mavlink_message(const SendMessageRequest* msg);
};

const ::mavsdk::rpc::passthrough::MavlinkMessage&
SendMessageRequest::_Internal::mavlink_message(const SendMessageRequest* msg) {
  return *msg->mavlink_message_;
}
SendMessageRequest::SendMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.SendMessageRequest)
}
SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mavlink_message()) {
    mavlink_message_ = new ::mavsdk::rpc::passthrough::MavlinkMessage(*from.mavlink_message_);
  } else {
    mavlink_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.SendMessageRequest)
}

void SendMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageRequest_passthrough_2fpassthrough_2eproto.base);
  mavlink_message_ = nullptr;
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.SendMessageRequest)
  SharedDtor();
}

void SendMessageRequest::SharedDtor() {
  if (this != internal_default_instance()) delete mavlink_message_;
}

void SendMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageRequest& SendMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageRequest_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.SendMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mavlink_message_ != nullptr) {
    delete mavlink_message_;
  }
  mavlink_message_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.passthrough.MavlinkMessage mavlink_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mavlink_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendMessageRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.SendMessageRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.passthrough.MavlinkMessage mavlink_message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mavlink_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.SendMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.SendMessageRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.SendMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.MavlinkMessage mavlink_message = 1;
  if (this->has_mavlink_message()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::mavlink_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.SendMessageRequest)
  return target;
}

size_t SendMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.SendMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.MavlinkMessage mavlink_message = 1;
  if (this->has_mavlink_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mavlink_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.SendMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.SendMessageRequest)
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mavlink_message()) {
    mutable_mavlink_message()->::mavsdk::rpc::passthrough::MavlinkMessage::MergeFrom(from.mavlink_message());
  }
}

void SendMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  return true;
}

void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mavlink_message_, other->mavlink_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendMessageResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_SendMessageResponse_default_instance_._instance.get_mutable()->passthrough_result_ = const_cast< ::mavsdk::rpc::passthrough::PassthroughResult*>(
      ::mavsdk::rpc::passthrough::PassthroughResult::internal_default_instance());
}
class SendMessageResponse::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::PassthroughResult& passthrough_result(const SendMessageResponse* msg);
};

const ::mavsdk::rpc::passthrough::PassthroughResult&
SendMessageResponse::_Internal::passthrough_result(const SendMessageResponse* msg) {
  return *msg->passthrough_result_;
}
SendMessageResponse::SendMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.SendMessageResponse)
}
SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_passthrough_result()) {
    passthrough_result_ = new ::mavsdk::rpc::passthrough::PassthroughResult(*from.passthrough_result_);
  } else {
    passthrough_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.SendMessageResponse)
}

void SendMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageResponse_passthrough_2fpassthrough_2eproto.base);
  passthrough_result_ = nullptr;
}

SendMessageResponse::~SendMessageResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.SendMessageResponse)
  SharedDtor();
}

void SendMessageResponse::SharedDtor() {
  if (this != internal_default_instance()) delete passthrough_result_;
}

void SendMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageResponse& SendMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageResponse_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void SendMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.SendMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && passthrough_result_ != nullptr) {
    delete passthrough_result_;
  }
  passthrough_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_passthrough_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendMessageResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.SendMessageResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passthrough_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.SendMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.SendMessageResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.SendMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  if (this->has_passthrough_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::passthrough_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.SendMessageResponse)
  return target;
}

size_t SendMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.SendMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  if (this->has_passthrough_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passthrough_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.SendMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.SendMessageResponse)
    MergeFrom(*source);
  }
}

void SendMessageResponse::MergeFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_passthrough_result()) {
    mutable_passthrough_result()->::mavsdk::rpc::passthrough::PassthroughResult::MergeFrom(from.passthrough_result());
  }
}

void SendMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {
  return true;
}

void SendMessageResponse::InternalSwap(SendMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(passthrough_result_, other->passthrough_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOurSysIdRequest::InitAsDefaultInstance() {
}
class GetOurSysIdRequest::_Internal {
 public:
};

GetOurSysIdRequest::GetOurSysIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetOurSysIdRequest)
}
GetOurSysIdRequest::GetOurSysIdRequest(const GetOurSysIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetOurSysIdRequest)
}

void GetOurSysIdRequest::SharedCtor() {
}

GetOurSysIdRequest::~GetOurSysIdRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  SharedDtor();
}

void GetOurSysIdRequest::SharedDtor() {
}

void GetOurSysIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOurSysIdRequest& GetOurSysIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOurSysIdRequest_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetOurSysIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOurSysIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOurSysIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetOurSysIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  return target;
}

size_t GetOurSysIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOurSysIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOurSysIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOurSysIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetOurSysIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetOurSysIdRequest)
    MergeFrom(*source);
  }
}

void GetOurSysIdRequest::MergeFrom(const GetOurSysIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetOurSysIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOurSysIdRequest::CopyFrom(const GetOurSysIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetOurSysIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOurSysIdRequest::IsInitialized() const {
  return true;
}

void GetOurSysIdRequest::InternalSwap(GetOurSysIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOurSysIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOurSysIdResponse::InitAsDefaultInstance() {
}
class GetOurSysIdResponse::_Internal {
 public:
};

GetOurSysIdResponse::GetOurSysIdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetOurSysIdResponse)
}
GetOurSysIdResponse::GetOurSysIdResponse(const GetOurSysIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sysid_ = from.sysid_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetOurSysIdResponse)
}

void GetOurSysIdResponse::SharedCtor() {
  sysid_ = 0u;
}

GetOurSysIdResponse::~GetOurSysIdResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  SharedDtor();
}

void GetOurSysIdResponse::SharedDtor() {
}

void GetOurSysIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOurSysIdResponse& GetOurSysIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOurSysIdResponse_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetOurSysIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sysid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOurSysIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sysid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sysid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOurSysIdResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sysid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetOurSysIdResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sysid = 1;
  if (this->sysid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->sysid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  return target;
}

size_t GetOurSysIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sysid = 1;
  if (this->sysid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sysid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOurSysIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOurSysIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOurSysIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetOurSysIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetOurSysIdResponse)
    MergeFrom(*source);
  }
}

void GetOurSysIdResponse::MergeFrom(const GetOurSysIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sysid() != 0) {
    set_sysid(from.sysid());
  }
}

void GetOurSysIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOurSysIdResponse::CopyFrom(const GetOurSysIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetOurSysIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOurSysIdResponse::IsInitialized() const {
  return true;
}

void GetOurSysIdResponse::InternalSwap(GetOurSysIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sysid_, other->sysid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOurSysIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOurCompIdRequest::InitAsDefaultInstance() {
}
class GetOurCompIdRequest::_Internal {
 public:
};

GetOurCompIdRequest::GetOurCompIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetOurCompIdRequest)
}
GetOurCompIdRequest::GetOurCompIdRequest(const GetOurCompIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetOurCompIdRequest)
}

void GetOurCompIdRequest::SharedCtor() {
}

GetOurCompIdRequest::~GetOurCompIdRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  SharedDtor();
}

void GetOurCompIdRequest::SharedDtor() {
}

void GetOurCompIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOurCompIdRequest& GetOurCompIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOurCompIdRequest_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetOurCompIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOurCompIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOurCompIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetOurCompIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  return target;
}

size_t GetOurCompIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOurCompIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOurCompIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOurCompIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetOurCompIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetOurCompIdRequest)
    MergeFrom(*source);
  }
}

void GetOurCompIdRequest::MergeFrom(const GetOurCompIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetOurCompIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOurCompIdRequest::CopyFrom(const GetOurCompIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetOurCompIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOurCompIdRequest::IsInitialized() const {
  return true;
}

void GetOurCompIdRequest::InternalSwap(GetOurCompIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOurCompIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOurCompIdResponse::InitAsDefaultInstance() {
}
class GetOurCompIdResponse::_Internal {
 public:
};

GetOurCompIdResponse::GetOurCompIdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetOurCompIdResponse)
}
GetOurCompIdResponse::GetOurCompIdResponse(const GetOurCompIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compid_ = from.compid_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetOurCompIdResponse)
}

void GetOurCompIdResponse::SharedCtor() {
  compid_ = 0u;
}

GetOurCompIdResponse::~GetOurCompIdResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  SharedDtor();
}

void GetOurCompIdResponse::SharedDtor() {
}

void GetOurCompIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOurCompIdResponse& GetOurCompIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOurCompIdResponse_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetOurCompIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetOurCompIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 compid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          compid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetOurCompIdResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 compid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetOurCompIdResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 compid = 1;
  if (this->compid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->compid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  return target;
}

size_t GetOurCompIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 compid = 1;
  if (this->compid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->compid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOurCompIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOurCompIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOurCompIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetOurCompIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetOurCompIdResponse)
    MergeFrom(*source);
  }
}

void GetOurCompIdResponse::MergeFrom(const GetOurCompIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compid() != 0) {
    set_compid(from.compid());
  }
}

void GetOurCompIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOurCompIdResponse::CopyFrom(const GetOurCompIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetOurCompIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOurCompIdResponse::IsInitialized() const {
  return true;
}

void GetOurCompIdResponse::InternalSwap(GetOurCompIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(compid_, other->compid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOurCompIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTargetSysIdRequest::InitAsDefaultInstance() {
}
class GetTargetSysIdRequest::_Internal {
 public:
};

GetTargetSysIdRequest::GetTargetSysIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
}
GetTargetSysIdRequest::GetTargetSysIdRequest(const GetTargetSysIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
}

void GetTargetSysIdRequest::SharedCtor() {
}

GetTargetSysIdRequest::~GetTargetSysIdRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  SharedDtor();
}

void GetTargetSysIdRequest::SharedDtor() {
}

void GetTargetSysIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTargetSysIdRequest& GetTargetSysIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTargetSysIdRequest_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetTargetSysIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTargetSysIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTargetSysIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetTargetSysIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  return target;
}

size_t GetTargetSysIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTargetSysIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTargetSysIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTargetSysIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
    MergeFrom(*source);
  }
}

void GetTargetSysIdRequest::MergeFrom(const GetTargetSysIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTargetSysIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTargetSysIdRequest::CopyFrom(const GetTargetSysIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetSysIdRequest::IsInitialized() const {
  return true;
}

void GetTargetSysIdRequest::InternalSwap(GetTargetSysIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetSysIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTargetSysIdResponse::InitAsDefaultInstance() {
}
class GetTargetSysIdResponse::_Internal {
 public:
};

GetTargetSysIdResponse::GetTargetSysIdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
}
GetTargetSysIdResponse::GetTargetSysIdResponse(const GetTargetSysIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_sysid_ = from.target_sysid_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
}

void GetTargetSysIdResponse::SharedCtor() {
  target_sysid_ = 0u;
}

GetTargetSysIdResponse::~GetTargetSysIdResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  SharedDtor();
}

void GetTargetSysIdResponse::SharedDtor() {
}

void GetTargetSysIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTargetSysIdResponse& GetTargetSysIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTargetSysIdResponse_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetTargetSysIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_sysid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTargetSysIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 target_sysid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_sysid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTargetSysIdResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_sysid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_sysid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetTargetSysIdResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_sysid = 1;
  if (this->target_sysid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_sysid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  return target;
}

size_t GetTargetSysIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target_sysid = 1;
  if (this->target_sysid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->target_sysid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTargetSysIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTargetSysIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTargetSysIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
    MergeFrom(*source);
  }
}

void GetTargetSysIdResponse::MergeFrom(const GetTargetSysIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_sysid() != 0) {
    set_target_sysid(from.target_sysid());
  }
}

void GetTargetSysIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTargetSysIdResponse::CopyFrom(const GetTargetSysIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetSysIdResponse::IsInitialized() const {
  return true;
}

void GetTargetSysIdResponse::InternalSwap(GetTargetSysIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_sysid_, other->target_sysid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetSysIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTargetCompIdRequest::InitAsDefaultInstance() {
}
class GetTargetCompIdRequest::_Internal {
 public:
};

GetTargetCompIdRequest::GetTargetCompIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
}
GetTargetCompIdRequest::GetTargetCompIdRequest(const GetTargetCompIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
}

void GetTargetCompIdRequest::SharedCtor() {
}

GetTargetCompIdRequest::~GetTargetCompIdRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  SharedDtor();
}

void GetTargetCompIdRequest::SharedDtor() {
}

void GetTargetCompIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTargetCompIdRequest& GetTargetCompIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTargetCompIdRequest_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetTargetCompIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTargetCompIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTargetCompIdRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetTargetCompIdRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  return target;
}

size_t GetTargetCompIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTargetCompIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTargetCompIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTargetCompIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
    MergeFrom(*source);
  }
}

void GetTargetCompIdRequest::MergeFrom(const GetTargetCompIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTargetCompIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTargetCompIdRequest::CopyFrom(const GetTargetCompIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetCompIdRequest::IsInitialized() const {
  return true;
}

void GetTargetCompIdRequest::InternalSwap(GetTargetCompIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetCompIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTargetCompIdResponse::InitAsDefaultInstance() {
}
class GetTargetCompIdResponse::_Internal {
 public:
};

GetTargetCompIdResponse::GetTargetCompIdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
}
GetTargetCompIdResponse::GetTargetCompIdResponse(const GetTargetCompIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_compid_ = from.target_compid_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
}

void GetTargetCompIdResponse::SharedCtor() {
  target_compid_ = 0u;
}

GetTargetCompIdResponse::~GetTargetCompIdResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  SharedDtor();
}

void GetTargetCompIdResponse::SharedDtor() {
}

void GetTargetCompIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTargetCompIdResponse& GetTargetCompIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTargetCompIdResponse_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void GetTargetCompIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_compid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTargetCompIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 target_compid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_compid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTargetCompIdResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_compid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_compid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* GetTargetCompIdResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_compid = 1;
  if (this->target_compid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_compid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  return target;
}

size_t GetTargetCompIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 target_compid = 1;
  if (this->target_compid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->target_compid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTargetCompIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTargetCompIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTargetCompIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
    MergeFrom(*source);
  }
}

void GetTargetCompIdResponse::MergeFrom(const GetTargetCompIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_compid() != 0) {
    set_target_compid(from.target_compid());
  }
}

void GetTargetCompIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTargetCompIdResponse::CopyFrom(const GetTargetCompIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetCompIdResponse::IsInitialized() const {
  return true;
}

void GetTargetCompIdResponse::InternalSwap(GetTargetCompIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(target_compid_, other->target_compid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetCompIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendCommandIntRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_SendCommandIntRequest_default_instance_._instance.get_mutable()->command_int_ = const_cast< ::mavsdk::rpc::passthrough::CommandInt*>(
      ::mavsdk::rpc::passthrough::CommandInt::internal_default_instance());
}
class SendCommandIntRequest::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::CommandInt& command_int(const SendCommandIntRequest* msg);
};

const ::mavsdk::rpc::passthrough::CommandInt&
SendCommandIntRequest::_Internal::command_int(const SendCommandIntRequest* msg) {
  return *msg->command_int_;
}
SendCommandIntRequest::SendCommandIntRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.SendCommandIntRequest)
}
SendCommandIntRequest::SendCommandIntRequest(const SendCommandIntRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command_int()) {
    command_int_ = new ::mavsdk::rpc::passthrough::CommandInt(*from.command_int_);
  } else {
    command_int_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.SendCommandIntRequest)
}

void SendCommandIntRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendCommandIntRequest_passthrough_2fpassthrough_2eproto.base);
  command_int_ = nullptr;
}

SendCommandIntRequest::~SendCommandIntRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.SendCommandIntRequest)
  SharedDtor();
}

void SendCommandIntRequest::SharedDtor() {
  if (this != internal_default_instance()) delete command_int_;
}

void SendCommandIntRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendCommandIntRequest& SendCommandIntRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendCommandIntRequest_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void SendCommandIntRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && command_int_ != nullptr) {
    delete command_int_;
  }
  command_int_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendCommandIntRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.passthrough.CommandInt command_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_command_int(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendCommandIntRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.passthrough.CommandInt command_int = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_command_int()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.SendCommandIntRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.SendCommandIntRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendCommandIntRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.CommandInt command_int = 1;
  if (this->has_command_int()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::command_int(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.SendCommandIntRequest)
  return target;
}

size_t SendCommandIntRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.CommandInt command_int = 1;
  if (this->has_command_int()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_int_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCommandIntRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCommandIntRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendCommandIntRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.SendCommandIntRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.SendCommandIntRequest)
    MergeFrom(*source);
  }
}

void SendCommandIntRequest::MergeFrom(const SendCommandIntRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command_int()) {
    mutable_command_int()->::mavsdk::rpc::passthrough::CommandInt::MergeFrom(from.command_int());
  }
}

void SendCommandIntRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommandIntRequest::CopyFrom(const SendCommandIntRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.SendCommandIntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandIntRequest::IsInitialized() const {
  return true;
}

void SendCommandIntRequest::InternalSwap(SendCommandIntRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(command_int_, other->command_int_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCommandIntRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendCommandIntResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_SendCommandIntResponse_default_instance_._instance.get_mutable()->passthrough_result_ = const_cast< ::mavsdk::rpc::passthrough::PassthroughResult*>(
      ::mavsdk::rpc::passthrough::PassthroughResult::internal_default_instance());
}
class SendCommandIntResponse::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::PassthroughResult& passthrough_result(const SendCommandIntResponse* msg);
};

const ::mavsdk::rpc::passthrough::PassthroughResult&
SendCommandIntResponse::_Internal::passthrough_result(const SendCommandIntResponse* msg) {
  return *msg->passthrough_result_;
}
SendCommandIntResponse::SendCommandIntResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.SendCommandIntResponse)
}
SendCommandIntResponse::SendCommandIntResponse(const SendCommandIntResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_passthrough_result()) {
    passthrough_result_ = new ::mavsdk::rpc::passthrough::PassthroughResult(*from.passthrough_result_);
  } else {
    passthrough_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.SendCommandIntResponse)
}

void SendCommandIntResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendCommandIntResponse_passthrough_2fpassthrough_2eproto.base);
  passthrough_result_ = nullptr;
}

SendCommandIntResponse::~SendCommandIntResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.SendCommandIntResponse)
  SharedDtor();
}

void SendCommandIntResponse::SharedDtor() {
  if (this != internal_default_instance()) delete passthrough_result_;
}

void SendCommandIntResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendCommandIntResponse& SendCommandIntResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendCommandIntResponse_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void SendCommandIntResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && passthrough_result_ != nullptr) {
    delete passthrough_result_;
  }
  passthrough_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendCommandIntResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_passthrough_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendCommandIntResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passthrough_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.SendCommandIntResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.SendCommandIntResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendCommandIntResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  if (this->has_passthrough_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::passthrough_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.SendCommandIntResponse)
  return target;
}

size_t SendCommandIntResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  if (this->has_passthrough_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passthrough_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCommandIntResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCommandIntResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendCommandIntResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.SendCommandIntResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.SendCommandIntResponse)
    MergeFrom(*source);
  }
}

void SendCommandIntResponse::MergeFrom(const SendCommandIntResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_passthrough_result()) {
    mutable_passthrough_result()->::mavsdk::rpc::passthrough::PassthroughResult::MergeFrom(from.passthrough_result());
  }
}

void SendCommandIntResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommandIntResponse::CopyFrom(const SendCommandIntResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.SendCommandIntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandIntResponse::IsInitialized() const {
  return true;
}

void SendCommandIntResponse::InternalSwap(SendCommandIntResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(passthrough_result_, other->passthrough_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCommandIntResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendCommandLongRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_SendCommandLongRequest_default_instance_._instance.get_mutable()->command_long_ = const_cast< ::mavsdk::rpc::passthrough::CommandLong*>(
      ::mavsdk::rpc::passthrough::CommandLong::internal_default_instance());
}
class SendCommandLongRequest::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::CommandLong& command_long(const SendCommandLongRequest* msg);
};

const ::mavsdk::rpc::passthrough::CommandLong&
SendCommandLongRequest::_Internal::command_long(const SendCommandLongRequest* msg) {
  return *msg->command_long_;
}
SendCommandLongRequest::SendCommandLongRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.SendCommandLongRequest)
}
SendCommandLongRequest::SendCommandLongRequest(const SendCommandLongRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command_long()) {
    command_long_ = new ::mavsdk::rpc::passthrough::CommandLong(*from.command_long_);
  } else {
    command_long_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.SendCommandLongRequest)
}

void SendCommandLongRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendCommandLongRequest_passthrough_2fpassthrough_2eproto.base);
  command_long_ = nullptr;
}

SendCommandLongRequest::~SendCommandLongRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.SendCommandLongRequest)
  SharedDtor();
}

void SendCommandLongRequest::SharedDtor() {
  if (this != internal_default_instance()) delete command_long_;
}

void SendCommandLongRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendCommandLongRequest& SendCommandLongRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendCommandLongRequest_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void SendCommandLongRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && command_long_ != nullptr) {
    delete command_long_;
  }
  command_long_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendCommandLongRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.passthrough.CommandLong command_long = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_command_long(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendCommandLongRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.passthrough.CommandLong command_long = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_command_long()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.SendCommandLongRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.SendCommandLongRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendCommandLongRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.CommandLong command_long = 1;
  if (this->has_command_long()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::command_long(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.SendCommandLongRequest)
  return target;
}

size_t SendCommandLongRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.CommandLong command_long = 1;
  if (this->has_command_long()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_long_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCommandLongRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCommandLongRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendCommandLongRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.SendCommandLongRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.SendCommandLongRequest)
    MergeFrom(*source);
  }
}

void SendCommandLongRequest::MergeFrom(const SendCommandLongRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command_long()) {
    mutable_command_long()->::mavsdk::rpc::passthrough::CommandLong::MergeFrom(from.command_long());
  }
}

void SendCommandLongRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommandLongRequest::CopyFrom(const SendCommandLongRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.SendCommandLongRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandLongRequest::IsInitialized() const {
  return true;
}

void SendCommandLongRequest::InternalSwap(SendCommandLongRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(command_long_, other->command_long_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCommandLongRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendCommandLongResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_SendCommandLongResponse_default_instance_._instance.get_mutable()->passthrough_result_ = const_cast< ::mavsdk::rpc::passthrough::PassthroughResult*>(
      ::mavsdk::rpc::passthrough::PassthroughResult::internal_default_instance());
}
class SendCommandLongResponse::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::PassthroughResult& passthrough_result(const SendCommandLongResponse* msg);
};

const ::mavsdk::rpc::passthrough::PassthroughResult&
SendCommandLongResponse::_Internal::passthrough_result(const SendCommandLongResponse* msg) {
  return *msg->passthrough_result_;
}
SendCommandLongResponse::SendCommandLongResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.SendCommandLongResponse)
}
SendCommandLongResponse::SendCommandLongResponse(const SendCommandLongResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_passthrough_result()) {
    passthrough_result_ = new ::mavsdk::rpc::passthrough::PassthroughResult(*from.passthrough_result_);
  } else {
    passthrough_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.SendCommandLongResponse)
}

void SendCommandLongResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendCommandLongResponse_passthrough_2fpassthrough_2eproto.base);
  passthrough_result_ = nullptr;
}

SendCommandLongResponse::~SendCommandLongResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.SendCommandLongResponse)
  SharedDtor();
}

void SendCommandLongResponse::SharedDtor() {
  if (this != internal_default_instance()) delete passthrough_result_;
}

void SendCommandLongResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendCommandLongResponse& SendCommandLongResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendCommandLongResponse_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void SendCommandLongResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && passthrough_result_ != nullptr) {
    delete passthrough_result_;
  }
  passthrough_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendCommandLongResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_passthrough_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendCommandLongResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passthrough_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.SendCommandLongResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.SendCommandLongResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendCommandLongResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  if (this->has_passthrough_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::passthrough_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.SendCommandLongResponse)
  return target;
}

size_t SendCommandLongResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  if (this->has_passthrough_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passthrough_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCommandLongResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCommandLongResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendCommandLongResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.SendCommandLongResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.SendCommandLongResponse)
    MergeFrom(*source);
  }
}

void SendCommandLongResponse::MergeFrom(const SendCommandLongResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_passthrough_result()) {
    mutable_passthrough_result()->::mavsdk::rpc::passthrough::PassthroughResult::MergeFrom(from.passthrough_result());
  }
}

void SendCommandLongResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommandLongResponse::CopyFrom(const SendCommandLongResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.SendCommandLongResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandLongResponse::IsInitialized() const {
  return true;
}

void SendCommandLongResponse::InternalSwap(SendCommandLongResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(passthrough_result_, other->passthrough_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCommandLongResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MavlinkMessage::InitAsDefaultInstance() {
}
class MavlinkMessage::_Internal {
 public:
};

MavlinkMessage::MavlinkMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.MavlinkMessage)
}
MavlinkMessage::MavlinkMessage(const MavlinkMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      payload64_(from.payload64_),
      ck_(from.ck_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&checksum_, &from.checksum_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgid_) -
    reinterpret_cast<char*>(&checksum_)) + sizeof(msgid_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.MavlinkMessage)
}

void MavlinkMessage::SharedCtor() {
  ::memset(&checksum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&checksum_)) + sizeof(msgid_));
}

MavlinkMessage::~MavlinkMessage() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.MavlinkMessage)
  SharedDtor();
}

void MavlinkMessage::SharedDtor() {
}

void MavlinkMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MavlinkMessage& MavlinkMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MavlinkMessage_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void MavlinkMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.MavlinkMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload64_.Clear();
  ck_.Clear();
  ::memset(&checksum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgid_) -
      reinterpret_cast<char*>(&checksum_)) + sizeof(msgid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MavlinkMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 checksum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 magic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 incompat_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          incompat_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 compat_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compat_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sysid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sysid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 compid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          compid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msgid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 payload64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_payload64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          add_payload64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ck = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_ck(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          add_ck(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MavlinkMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.MavlinkMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 checksum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 magic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 len = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 incompat_flags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incompat_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 compat_flags = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compat_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seq = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sysid = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 compid = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msgid = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 payload64 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_payload64())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 82u, input, this->mutable_payload64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ck = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ck())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_ck())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.MavlinkMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.MavlinkMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MavlinkMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.MavlinkMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 checksum = 1;
  if (this->checksum() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->checksum(), target);
  }

  // uint32 magic = 2;
  if (this->magic() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic(), target);
  }

  // uint32 len = 3;
  if (this->len() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->len(), target);
  }

  // uint32 incompat_flags = 4;
  if (this->incompat_flags() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->incompat_flags(), target);
  }

  // uint32 compat_flags = 5;
  if (this->compat_flags() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->compat_flags(), target);
  }

  // uint32 seq = 6;
  if (this->seq() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq(), target);
  }

  // uint32 sysid = 7;
  if (this->sysid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->sysid(), target);
  }

  // uint32 compid = 8;
  if (this->compid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->compid(), target);
  }

  // uint32 msgid = 9;
  if (this->msgid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->msgid(), target);
  }

  // repeated uint64 payload64 = 10;
  {
    int byte_size = _payload64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          10, payload64_, byte_size, target);
    }
  }

  // repeated uint32 ck = 11;
  {
    int byte_size = _ck_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, ck_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.MavlinkMessage)
  return target;
}

size_t MavlinkMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.MavlinkMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 payload64 = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->payload64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _payload64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ck = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ck_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ck_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 checksum = 1;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->checksum());
  }

  // uint32 magic = 2;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->magic());
  }

  // uint32 len = 3;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->len());
  }

  // uint32 incompat_flags = 4;
  if (this->incompat_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->incompat_flags());
  }

  // uint32 compat_flags = 5;
  if (this->compat_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->compat_flags());
  }

  // uint32 seq = 6;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->seq());
  }

  // uint32 sysid = 7;
  if (this->sysid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->sysid());
  }

  // uint32 compid = 8;
  if (this->compid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->compid());
  }

  // uint32 msgid = 9;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MavlinkMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.MavlinkMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MavlinkMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MavlinkMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.MavlinkMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.MavlinkMessage)
    MergeFrom(*source);
  }
}

void MavlinkMessage::MergeFrom(const MavlinkMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.MavlinkMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload64_.MergeFrom(from.payload64_);
  ck_.MergeFrom(from.ck_);
  if (from.checksum() != 0) {
    set_checksum(from.checksum());
  }
  if (from.magic() != 0) {
    set_magic(from.magic());
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
  if (from.incompat_flags() != 0) {
    set_incompat_flags(from.incompat_flags());
  }
  if (from.compat_flags() != 0) {
    set_compat_flags(from.compat_flags());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.sysid() != 0) {
    set_sysid(from.sysid());
  }
  if (from.compid() != 0) {
    set_compid(from.compid());
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
}

void MavlinkMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.MavlinkMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MavlinkMessage::CopyFrom(const MavlinkMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.MavlinkMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MavlinkMessage::IsInitialized() const {
  return true;
}

void MavlinkMessage::InternalSwap(MavlinkMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payload64_.InternalSwap(&other->payload64_);
  ck_.InternalSwap(&other->ck_);
  swap(checksum_, other->checksum_);
  swap(magic_, other->magic_);
  swap(len_, other->len_);
  swap(incompat_flags_, other->incompat_flags_);
  swap(compat_flags_, other->compat_flags_);
  swap(seq_, other->seq_);
  swap(sysid_, other->sysid_);
  swap(compid_, other->compid_);
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MavlinkMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandInt::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_CommandInt_default_instance_._instance.get_mutable()->params_ = const_cast< ::mavsdk::rpc::passthrough::ParamsInt*>(
      ::mavsdk::rpc::passthrough::ParamsInt::internal_default_instance());
}
class CommandInt::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::ParamsInt& params(const CommandInt* msg);
};

const ::mavsdk::rpc::passthrough::ParamsInt&
CommandInt::_Internal::params(const CommandInt* msg) {
  return *msg->params_;
}
CommandInt::CommandInt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.CommandInt)
}
CommandInt::CommandInt(const CommandInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params()) {
    params_ = new ::mavsdk::rpc::passthrough::ParamsInt(*from.params_);
  } else {
    params_ = nullptr;
  }
  ::memcpy(&target_system_id_, &from.target_system_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&autocontinue_) -
    reinterpret_cast<char*>(&target_system_id_)) + sizeof(autocontinue_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.CommandInt)
}

void CommandInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandInt_passthrough_2fpassthrough_2eproto.base);
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autocontinue_) -
      reinterpret_cast<char*>(&params_)) + sizeof(autocontinue_));
}

CommandInt::~CommandInt() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.CommandInt)
  SharedDtor();
}

void CommandInt::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void CommandInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandInt& CommandInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandInt_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void CommandInt::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.CommandInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  ::memset(&target_system_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autocontinue_) -
      reinterpret_cast<char*>(&target_system_id_)) + sizeof(autocontinue_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommandInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 target_system_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_system_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target_component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool autocontinue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          autocontinue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.passthrough.ParamsInt params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommandInt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.CommandInt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_system_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_system_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_component_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_component_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 command = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool autocontinue = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autocontinue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.passthrough.ParamsInt params = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.CommandInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.CommandInt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* CommandInt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.CommandInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_system_id = 1;
  if (this->target_system_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_system_id(), target);
  }

  // uint32 target_component_id = 2;
  if (this->target_component_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_component_id(), target);
  }

  // uint64 command = 3;
  if (this->command() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->command(), target);
  }

  // bool current = 4;
  if (this->current() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->current(), target);
  }

  // bool autocontinue = 5;
  if (this->autocontinue() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->autocontinue(), target);
  }

  // .mavsdk.rpc.passthrough.ParamsInt params = 6;
  if (this->has_params()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.CommandInt)
  return target;
}

size_t CommandInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.CommandInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.ParamsInt params = 6;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // uint32 target_system_id = 1;
  if (this->target_system_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->target_system_id());
  }

  // uint32 target_component_id = 2;
  if (this->target_component_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->target_component_id());
  }

  // uint64 command = 3;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->command());
  }

  // bool current = 4;
  if (this->current() != 0) {
    total_size += 1 + 1;
  }

  // bool autocontinue = 5;
  if (this->autocontinue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.CommandInt)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.CommandInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.CommandInt)
    MergeFrom(*source);
  }
}

void CommandInt::MergeFrom(const CommandInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.CommandInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    mutable_params()->::mavsdk::rpc::passthrough::ParamsInt::MergeFrom(from.params());
  }
  if (from.target_system_id() != 0) {
    set_target_system_id(from.target_system_id());
  }
  if (from.target_component_id() != 0) {
    set_target_component_id(from.target_component_id());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.current() != 0) {
    set_current(from.current());
  }
  if (from.autocontinue() != 0) {
    set_autocontinue(from.autocontinue());
  }
}

void CommandInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.CommandInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInt::CopyFrom(const CommandInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.CommandInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInt::IsInitialized() const {
  return true;
}

void CommandInt::InternalSwap(CommandInt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
  swap(target_system_id_, other->target_system_id_);
  swap(target_component_id_, other->target_component_id_);
  swap(command_, other->command_);
  swap(current_, other->current_);
  swap(autocontinue_, other->autocontinue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParamsInt::InitAsDefaultInstance() {
}
class ParamsInt::_Internal {
 public:
};

ParamsInt::ParamsInt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.ParamsInt)
}
ParamsInt::ParamsInt(const ParamsInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&param1_, &from.param1_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&param1_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.ParamsInt)
}

void ParamsInt::SharedCtor() {
  ::memset(&param1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&param1_)) + sizeof(z_));
}

ParamsInt::~ParamsInt() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.ParamsInt)
  SharedDtor();
}

void ParamsInt::SharedDtor() {
}

void ParamsInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamsInt& ParamsInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamsInt_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void ParamsInt::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.ParamsInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&param1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&param1_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ParamsInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float param1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          param3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          param4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ParamsInt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.ParamsInt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float param1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param3 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param4 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.ParamsInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.ParamsInt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ParamsInt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.ParamsInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float param1 = 1;
  if (!(this->param1() <= 0 && this->param1() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->param1(), target);
  }

  // float param2 = 2;
  if (!(this->param2() <= 0 && this->param2() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->param2(), target);
  }

  // float param3 = 3;
  if (!(this->param3() <= 0 && this->param3() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->param3(), target);
  }

  // float param4 = 4;
  if (!(this->param4() <= 0 && this->param4() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->param4(), target);
  }

  // int32 x = 5;
  if (this->x() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->x(), target);
  }

  // int32 y = 6;
  if (this->y() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->y(), target);
  }

  // float z = 7;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.ParamsInt)
  return target;
}

size_t ParamsInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.ParamsInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float param1 = 1;
  if (!(this->param1() <= 0 && this->param1() >= 0)) {
    total_size += 1 + 4;
  }

  // float param2 = 2;
  if (!(this->param2() <= 0 && this->param2() >= 0)) {
    total_size += 1 + 4;
  }

  // float param3 = 3;
  if (!(this->param3() <= 0 && this->param3() >= 0)) {
    total_size += 1 + 4;
  }

  // float param4 = 4;
  if (!(this->param4() <= 0 && this->param4() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 x = 5;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 6;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // float z = 7;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamsInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.ParamsInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamsInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParamsInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.ParamsInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.ParamsInt)
    MergeFrom(*source);
  }
}

void ParamsInt::MergeFrom(const ParamsInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.ParamsInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.param1() <= 0 && from.param1() >= 0)) {
    set_param1(from.param1());
  }
  if (!(from.param2() <= 0 && from.param2() >= 0)) {
    set_param2(from.param2());
  }
  if (!(from.param3() <= 0 && from.param3() >= 0)) {
    set_param3(from.param3());
  }
  if (!(from.param4() <= 0 && from.param4() >= 0)) {
    set_param4(from.param4());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
}

void ParamsInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.ParamsInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamsInt::CopyFrom(const ParamsInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.ParamsInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamsInt::IsInitialized() const {
  return true;
}

void ParamsInt::InternalSwap(ParamsInt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(param1_, other->param1_);
  swap(param2_, other->param2_);
  swap(param3_, other->param3_);
  swap(param4_, other->param4_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamsInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandLong::InitAsDefaultInstance() {
  ::mavsdk::rpc::passthrough::_CommandLong_default_instance_._instance.get_mutable()->params_ = const_cast< ::mavsdk::rpc::passthrough::ParamsLong*>(
      ::mavsdk::rpc::passthrough::ParamsLong::internal_default_instance());
}
class CommandLong::_Internal {
 public:
  static const ::mavsdk::rpc::passthrough::ParamsLong& params(const CommandLong* msg);
};

const ::mavsdk::rpc::passthrough::ParamsLong&
CommandLong::_Internal::params(const CommandLong* msg) {
  return *msg->params_;
}
CommandLong::CommandLong()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.CommandLong)
}
CommandLong::CommandLong(const CommandLong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params()) {
    params_ = new ::mavsdk::rpc::passthrough::ParamsLong(*from.params_);
  } else {
    params_ = nullptr;
  }
  ::memcpy(&target_system_id_, &from.target_system_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confirmation_) -
    reinterpret_cast<char*>(&target_system_id_)) + sizeof(confirmation_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.CommandLong)
}

void CommandLong::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandLong_passthrough_2fpassthrough_2eproto.base);
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirmation_) -
      reinterpret_cast<char*>(&params_)) + sizeof(confirmation_));
}

CommandLong::~CommandLong() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.CommandLong)
  SharedDtor();
}

void CommandLong::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void CommandLong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandLong& CommandLong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandLong_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void CommandLong::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.CommandLong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  ::memset(&target_system_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirmation_) -
      reinterpret_cast<char*>(&target_system_id_)) + sizeof(confirmation_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommandLong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 target_system_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_system_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target_component_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_component_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 confirmation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          confirmation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.passthrough.ParamsLong params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommandLong::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.CommandLong)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_system_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_system_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_component_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_component_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 command = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 confirmation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confirmation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.passthrough.ParamsLong params = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.CommandLong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.CommandLong)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* CommandLong::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.CommandLong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_system_id = 1;
  if (this->target_system_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_system_id(), target);
  }

  // uint32 target_component_id = 2;
  if (this->target_component_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_component_id(), target);
  }

  // uint64 command = 3;
  if (this->command() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->command(), target);
  }

  // uint32 confirmation = 4;
  if (this->confirmation() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->confirmation(), target);
  }

  // .mavsdk.rpc.passthrough.ParamsLong params = 5;
  if (this->has_params()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.CommandLong)
  return target;
}

size_t CommandLong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.CommandLong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.ParamsLong params = 5;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // uint32 target_system_id = 1;
  if (this->target_system_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->target_system_id());
  }

  // uint32 target_component_id = 2;
  if (this->target_component_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->target_component_id());
  }

  // uint64 command = 3;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->command());
  }

  // uint32 confirmation = 4;
  if (this->confirmation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->confirmation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandLong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.CommandLong)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandLong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandLong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.CommandLong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.CommandLong)
    MergeFrom(*source);
  }
}

void CommandLong::MergeFrom(const CommandLong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.CommandLong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    mutable_params()->::mavsdk::rpc::passthrough::ParamsLong::MergeFrom(from.params());
  }
  if (from.target_system_id() != 0) {
    set_target_system_id(from.target_system_id());
  }
  if (from.target_component_id() != 0) {
    set_target_component_id(from.target_component_id());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.confirmation() != 0) {
    set_confirmation(from.confirmation());
  }
}

void CommandLong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.CommandLong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandLong::CopyFrom(const CommandLong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.CommandLong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandLong::IsInitialized() const {
  return true;
}

void CommandLong::InternalSwap(CommandLong* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
  swap(target_system_id_, other->target_system_id_);
  swap(target_component_id_, other->target_component_id_);
  swap(command_, other->command_);
  swap(confirmation_, other->confirmation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandLong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParamsLong::InitAsDefaultInstance() {
}
class ParamsLong::_Internal {
 public:
};

ParamsLong::ParamsLong()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.ParamsLong)
}
ParamsLong::ParamsLong(const ParamsLong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&param1_, &from.param1_,
    static_cast<size_t>(reinterpret_cast<char*>(&param7_) -
    reinterpret_cast<char*>(&param1_)) + sizeof(param7_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.ParamsLong)
}

void ParamsLong::SharedCtor() {
  ::memset(&param1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param7_) -
      reinterpret_cast<char*>(&param1_)) + sizeof(param7_));
}

ParamsLong::~ParamsLong() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.ParamsLong)
  SharedDtor();
}

void ParamsLong::SharedDtor() {
}

void ParamsLong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParamsLong& ParamsLong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParamsLong_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void ParamsLong::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.ParamsLong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&param1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param7_) -
      reinterpret_cast<char*>(&param1_)) + sizeof(param7_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ParamsLong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float param1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          param3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          param4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          param5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          param6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          param7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ParamsLong::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.ParamsLong)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float param1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param3 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param4 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param5 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param6 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float param7 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &param7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.ParamsLong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.ParamsLong)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ParamsLong::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.ParamsLong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float param1 = 1;
  if (!(this->param1() <= 0 && this->param1() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->param1(), target);
  }

  // float param2 = 2;
  if (!(this->param2() <= 0 && this->param2() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->param2(), target);
  }

  // float param3 = 3;
  if (!(this->param3() <= 0 && this->param3() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->param3(), target);
  }

  // float param4 = 4;
  if (!(this->param4() <= 0 && this->param4() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->param4(), target);
  }

  // float param5 = 5;
  if (!(this->param5() <= 0 && this->param5() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->param5(), target);
  }

  // float param6 = 6;
  if (!(this->param6() <= 0 && this->param6() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->param6(), target);
  }

  // float param7 = 7;
  if (!(this->param7() <= 0 && this->param7() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->param7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.ParamsLong)
  return target;
}

size_t ParamsLong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.ParamsLong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float param1 = 1;
  if (!(this->param1() <= 0 && this->param1() >= 0)) {
    total_size += 1 + 4;
  }

  // float param2 = 2;
  if (!(this->param2() <= 0 && this->param2() >= 0)) {
    total_size += 1 + 4;
  }

  // float param3 = 3;
  if (!(this->param3() <= 0 && this->param3() >= 0)) {
    total_size += 1 + 4;
  }

  // float param4 = 4;
  if (!(this->param4() <= 0 && this->param4() >= 0)) {
    total_size += 1 + 4;
  }

  // float param5 = 5;
  if (!(this->param5() <= 0 && this->param5() >= 0)) {
    total_size += 1 + 4;
  }

  // float param6 = 6;
  if (!(this->param6() <= 0 && this->param6() >= 0)) {
    total_size += 1 + 4;
  }

  // float param7 = 7;
  if (!(this->param7() <= 0 && this->param7() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamsLong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.ParamsLong)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamsLong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParamsLong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.ParamsLong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.ParamsLong)
    MergeFrom(*source);
  }
}

void ParamsLong::MergeFrom(const ParamsLong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.ParamsLong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.param1() <= 0 && from.param1() >= 0)) {
    set_param1(from.param1());
  }
  if (!(from.param2() <= 0 && from.param2() >= 0)) {
    set_param2(from.param2());
  }
  if (!(from.param3() <= 0 && from.param3() >= 0)) {
    set_param3(from.param3());
  }
  if (!(from.param4() <= 0 && from.param4() >= 0)) {
    set_param4(from.param4());
  }
  if (!(from.param5() <= 0 && from.param5() >= 0)) {
    set_param5(from.param5());
  }
  if (!(from.param6() <= 0 && from.param6() >= 0)) {
    set_param6(from.param6());
  }
  if (!(from.param7() <= 0 && from.param7() >= 0)) {
    set_param7(from.param7());
  }
}

void ParamsLong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.ParamsLong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamsLong::CopyFrom(const ParamsLong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.ParamsLong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamsLong::IsInitialized() const {
  return true;
}

void ParamsLong::InternalSwap(ParamsLong* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(param1_, other->param1_);
  swap(param2_, other->param2_);
  swap(param3_, other->param3_);
  swap(param4_, other->param4_);
  swap(param5_, other->param5_);
  swap(param6_, other->param6_);
  swap(param7_, other->param7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParamsLong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PassthroughResult::InitAsDefaultInstance() {
}
class PassthroughResult::_Internal {
 public:
};

PassthroughResult::PassthroughResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.passthrough.PassthroughResult)
}
PassthroughResult::PassthroughResult(const PassthroughResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.passthrough.PassthroughResult)
}

void PassthroughResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

PassthroughResult::~PassthroughResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.passthrough.PassthroughResult)
  SharedDtor();
}

void PassthroughResult::SharedDtor() {
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PassthroughResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PassthroughResult& PassthroughResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PassthroughResult_passthrough_2fpassthrough_2eproto.base);
  return *internal_default_instance();
}


void PassthroughResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.passthrough.PassthroughResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PassthroughResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.passthrough.PassthroughResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result(static_cast<::mavsdk::rpc::passthrough::PassthroughResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_result_str(), ptr, ctx, "mavsdk.rpc.passthrough.PassthroughResult.result_str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PassthroughResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.passthrough.PassthroughResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.passthrough.PassthroughResult.Result result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::mavsdk::rpc::passthrough::PassthroughResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_result_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.passthrough.PassthroughResult.result_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.passthrough.PassthroughResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.passthrough.PassthroughResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* PassthroughResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.passthrough.PassthroughResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.passthrough.PassthroughResult.Result result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.passthrough.PassthroughResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.passthrough.PassthroughResult)
  return target;
}

size_t PassthroughResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.passthrough.PassthroughResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.passthrough.PassthroughResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PassthroughResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.passthrough.PassthroughResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PassthroughResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PassthroughResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.passthrough.PassthroughResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.passthrough.PassthroughResult)
    MergeFrom(*source);
  }
}

void PassthroughResult::MergeFrom(const PassthroughResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.passthrough.PassthroughResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void PassthroughResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.passthrough.PassthroughResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassthroughResult::CopyFrom(const PassthroughResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.passthrough.PassthroughResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassthroughResult::IsInitialized() const {
  return true;
}

void PassthroughResult::InternalSwap(PassthroughResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassthroughResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace passthrough
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::SendMessageRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::SendMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::SendMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::SendMessageResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::SendMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::SendMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetOurSysIdRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetOurSysIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetOurSysIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetOurSysIdResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetOurSysIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetOurSysIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetOurCompIdRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetOurCompIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetOurCompIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetOurCompIdResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetOurCompIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetOurCompIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetTargetSysIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetTargetSysIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetTargetCompIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetTargetCompIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::SendCommandIntRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::SendCommandIntRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::SendCommandIntRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::SendCommandIntResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::SendCommandIntResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::SendCommandIntResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::SendCommandLongRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::SendCommandLongRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::SendCommandLongRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::SendCommandLongResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::SendCommandLongResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::SendCommandLongResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::MavlinkMessage* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::MavlinkMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::MavlinkMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::CommandInt* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::CommandInt >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::CommandInt >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::ParamsInt* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::ParamsInt >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::ParamsInt >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::CommandLong* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::CommandLong >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::CommandLong >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::ParamsLong* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::ParamsLong >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::ParamsLong >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::passthrough::PassthroughResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::passthrough::PassthroughResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::passthrough::PassthroughResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
