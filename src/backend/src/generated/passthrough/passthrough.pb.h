// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: passthrough/passthrough.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_passthrough_2fpassthrough_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_passthrough_2fpassthrough_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_passthrough_2fpassthrough_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_passthrough_2fpassthrough_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_passthrough_2fpassthrough_2eproto;
namespace mavsdk {
namespace rpc {
namespace passthrough {
class CommandInt;
class CommandIntDefaultTypeInternal;
extern CommandIntDefaultTypeInternal _CommandInt_default_instance_;
class CommandLong;
class CommandLongDefaultTypeInternal;
extern CommandLongDefaultTypeInternal _CommandLong_default_instance_;
class GetOurCompIdRequest;
class GetOurCompIdRequestDefaultTypeInternal;
extern GetOurCompIdRequestDefaultTypeInternal _GetOurCompIdRequest_default_instance_;
class GetOurCompIdResponse;
class GetOurCompIdResponseDefaultTypeInternal;
extern GetOurCompIdResponseDefaultTypeInternal _GetOurCompIdResponse_default_instance_;
class GetOurSysIdRequest;
class GetOurSysIdRequestDefaultTypeInternal;
extern GetOurSysIdRequestDefaultTypeInternal _GetOurSysIdRequest_default_instance_;
class GetOurSysIdResponse;
class GetOurSysIdResponseDefaultTypeInternal;
extern GetOurSysIdResponseDefaultTypeInternal _GetOurSysIdResponse_default_instance_;
class GetTargetCompIdRequest;
class GetTargetCompIdRequestDefaultTypeInternal;
extern GetTargetCompIdRequestDefaultTypeInternal _GetTargetCompIdRequest_default_instance_;
class GetTargetCompIdResponse;
class GetTargetCompIdResponseDefaultTypeInternal;
extern GetTargetCompIdResponseDefaultTypeInternal _GetTargetCompIdResponse_default_instance_;
class GetTargetSysIdRequest;
class GetTargetSysIdRequestDefaultTypeInternal;
extern GetTargetSysIdRequestDefaultTypeInternal _GetTargetSysIdRequest_default_instance_;
class GetTargetSysIdResponse;
class GetTargetSysIdResponseDefaultTypeInternal;
extern GetTargetSysIdResponseDefaultTypeInternal _GetTargetSysIdResponse_default_instance_;
class MavlinkMessage;
class MavlinkMessageDefaultTypeInternal;
extern MavlinkMessageDefaultTypeInternal _MavlinkMessage_default_instance_;
class ParamsInt;
class ParamsIntDefaultTypeInternal;
extern ParamsIntDefaultTypeInternal _ParamsInt_default_instance_;
class ParamsLong;
class ParamsLongDefaultTypeInternal;
extern ParamsLongDefaultTypeInternal _ParamsLong_default_instance_;
class PassthroughResult;
class PassthroughResultDefaultTypeInternal;
extern PassthroughResultDefaultTypeInternal _PassthroughResult_default_instance_;
class SendCommandIntRequest;
class SendCommandIntRequestDefaultTypeInternal;
extern SendCommandIntRequestDefaultTypeInternal _SendCommandIntRequest_default_instance_;
class SendCommandIntResponse;
class SendCommandIntResponseDefaultTypeInternal;
extern SendCommandIntResponseDefaultTypeInternal _SendCommandIntResponse_default_instance_;
class SendCommandLongRequest;
class SendCommandLongRequestDefaultTypeInternal;
extern SendCommandLongRequestDefaultTypeInternal _SendCommandLongRequest_default_instance_;
class SendCommandLongResponse;
class SendCommandLongResponseDefaultTypeInternal;
extern SendCommandLongResponseDefaultTypeInternal _SendCommandLongResponse_default_instance_;
class SendMessageRequest;
class SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
class SendMessageResponse;
class SendMessageResponseDefaultTypeInternal;
extern SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
}  // namespace passthrough
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::passthrough::CommandInt* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::CommandInt>(Arena*);
template<> ::mavsdk::rpc::passthrough::CommandLong* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::CommandLong>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetOurCompIdRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetOurCompIdRequest>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetOurCompIdResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetOurCompIdResponse>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetOurSysIdRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetOurSysIdRequest>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetOurSysIdResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetOurSysIdResponse>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetTargetCompIdRequest>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetTargetCompIdResponse>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetTargetSysIdRequest>(Arena*);
template<> ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::GetTargetSysIdResponse>(Arena*);
template<> ::mavsdk::rpc::passthrough::MavlinkMessage* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::MavlinkMessage>(Arena*);
template<> ::mavsdk::rpc::passthrough::ParamsInt* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::ParamsInt>(Arena*);
template<> ::mavsdk::rpc::passthrough::ParamsLong* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::ParamsLong>(Arena*);
template<> ::mavsdk::rpc::passthrough::PassthroughResult* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::PassthroughResult>(Arena*);
template<> ::mavsdk::rpc::passthrough::SendCommandIntRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::SendCommandIntRequest>(Arena*);
template<> ::mavsdk::rpc::passthrough::SendCommandIntResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::SendCommandIntResponse>(Arena*);
template<> ::mavsdk::rpc::passthrough::SendCommandLongRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::SendCommandLongRequest>(Arena*);
template<> ::mavsdk::rpc::passthrough::SendCommandLongResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::SendCommandLongResponse>(Arena*);
template<> ::mavsdk::rpc::passthrough::SendMessageRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::SendMessageRequest>(Arena*);
template<> ::mavsdk::rpc::passthrough::SendMessageResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::passthrough::SendMessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace passthrough {

enum PassthroughResult_Result : int {
  PassthroughResult_Result_UNKNOWN = 0,
  PassthroughResult_Result_SUCCESS = 1,
  PassthroughResult_Result_CONNECTION_ERROR = 2,
  PassthroughResult_Result_PassthroughResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PassthroughResult_Result_PassthroughResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PassthroughResult_Result_IsValid(int value);
constexpr PassthroughResult_Result PassthroughResult_Result_Result_MIN = PassthroughResult_Result_UNKNOWN;
constexpr PassthroughResult_Result PassthroughResult_Result_Result_MAX = PassthroughResult_Result_CONNECTION_ERROR;
constexpr int PassthroughResult_Result_Result_ARRAYSIZE = PassthroughResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PassthroughResult_Result_descriptor();
template<typename T>
inline const std::string& PassthroughResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PassthroughResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PassthroughResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PassthroughResult_Result_descriptor(), enum_t_value);
}
inline bool PassthroughResult_Result_Parse(
    const std::string& name, PassthroughResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PassthroughResult_Result>(
    PassthroughResult_Result_descriptor(), name, value);
}
// ===================================================================

class SendMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.SendMessageRequest) */ {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);
  SendMessageRequest(SendMessageRequest&& from) noexcept
    : SendMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
               &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendMessageRequest& a, SendMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const final {
    return CreateMaybeMessage<SendMessageRequest>(nullptr);
  }

  SendMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.SendMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMavlinkMessageFieldNumber = 1,
  };
  // .mavsdk.rpc.passthrough.MavlinkMessage mavlink_message = 1;
  bool has_mavlink_message() const;
  private:
  bool _internal_has_mavlink_message() const;
  public:
  void clear_mavlink_message();
  const ::mavsdk::rpc::passthrough::MavlinkMessage& mavlink_message() const;
  ::mavsdk::rpc::passthrough::MavlinkMessage* release_mavlink_message();
  ::mavsdk::rpc::passthrough::MavlinkMessage* mutable_mavlink_message();
  void set_allocated_mavlink_message(::mavsdk::rpc::passthrough::MavlinkMessage* mavlink_message);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.SendMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::MavlinkMessage* mavlink_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class SendMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.SendMessageResponse) */ {
 public:
  SendMessageResponse();
  virtual ~SendMessageResponse();

  SendMessageResponse(const SendMessageResponse& from);
  SendMessageResponse(SendMessageResponse&& from) noexcept
    : SendMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendMessageResponse& operator=(const SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageResponse& operator=(SendMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendMessageResponse*>(
               &_SendMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendMessageResponse& a, SendMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageResponse* New() const final {
    return CreateMaybeMessage<SendMessageResponse>(nullptr);
  }

  SendMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageResponse& from);
  void MergeFrom(const SendMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.SendMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassthroughResultFieldNumber = 1,
  };
  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  bool has_passthrough_result() const;
  private:
  bool _internal_has_passthrough_result() const;
  public:
  void clear_passthrough_result();
  const ::mavsdk::rpc::passthrough::PassthroughResult& passthrough_result() const;
  ::mavsdk::rpc::passthrough::PassthroughResult* release_passthrough_result();
  ::mavsdk::rpc::passthrough::PassthroughResult* mutable_passthrough_result();
  void set_allocated_passthrough_result(::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.SendMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetOurSysIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetOurSysIdRequest) */ {
 public:
  GetOurSysIdRequest();
  virtual ~GetOurSysIdRequest();

  GetOurSysIdRequest(const GetOurSysIdRequest& from);
  GetOurSysIdRequest(GetOurSysIdRequest&& from) noexcept
    : GetOurSysIdRequest() {
    *this = ::std::move(from);
  }

  inline GetOurSysIdRequest& operator=(const GetOurSysIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOurSysIdRequest& operator=(GetOurSysIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOurSysIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOurSysIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetOurSysIdRequest*>(
               &_GetOurSysIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetOurSysIdRequest& a, GetOurSysIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOurSysIdRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOurSysIdRequest* New() const final {
    return CreateMaybeMessage<GetOurSysIdRequest>(nullptr);
  }

  GetOurSysIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOurSysIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOurSysIdRequest& from);
  void MergeFrom(const GetOurSysIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOurSysIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetOurSysIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetOurSysIdRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetOurSysIdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetOurSysIdResponse) */ {
 public:
  GetOurSysIdResponse();
  virtual ~GetOurSysIdResponse();

  GetOurSysIdResponse(const GetOurSysIdResponse& from);
  GetOurSysIdResponse(GetOurSysIdResponse&& from) noexcept
    : GetOurSysIdResponse() {
    *this = ::std::move(from);
  }

  inline GetOurSysIdResponse& operator=(const GetOurSysIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOurSysIdResponse& operator=(GetOurSysIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOurSysIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOurSysIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetOurSysIdResponse*>(
               &_GetOurSysIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetOurSysIdResponse& a, GetOurSysIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOurSysIdResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOurSysIdResponse* New() const final {
    return CreateMaybeMessage<GetOurSysIdResponse>(nullptr);
  }

  GetOurSysIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOurSysIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOurSysIdResponse& from);
  void MergeFrom(const GetOurSysIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOurSysIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetOurSysIdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysidFieldNumber = 1,
  };
  // uint32 sysid = 1;
  void clear_sysid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid() const;
  void set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetOurSysIdResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetOurCompIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetOurCompIdRequest) */ {
 public:
  GetOurCompIdRequest();
  virtual ~GetOurCompIdRequest();

  GetOurCompIdRequest(const GetOurCompIdRequest& from);
  GetOurCompIdRequest(GetOurCompIdRequest&& from) noexcept
    : GetOurCompIdRequest() {
    *this = ::std::move(from);
  }

  inline GetOurCompIdRequest& operator=(const GetOurCompIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOurCompIdRequest& operator=(GetOurCompIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOurCompIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOurCompIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetOurCompIdRequest*>(
               &_GetOurCompIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetOurCompIdRequest& a, GetOurCompIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOurCompIdRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOurCompIdRequest* New() const final {
    return CreateMaybeMessage<GetOurCompIdRequest>(nullptr);
  }

  GetOurCompIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOurCompIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOurCompIdRequest& from);
  void MergeFrom(const GetOurCompIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOurCompIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetOurCompIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetOurCompIdRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetOurCompIdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetOurCompIdResponse) */ {
 public:
  GetOurCompIdResponse();
  virtual ~GetOurCompIdResponse();

  GetOurCompIdResponse(const GetOurCompIdResponse& from);
  GetOurCompIdResponse(GetOurCompIdResponse&& from) noexcept
    : GetOurCompIdResponse() {
    *this = ::std::move(from);
  }

  inline GetOurCompIdResponse& operator=(const GetOurCompIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOurCompIdResponse& operator=(GetOurCompIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOurCompIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOurCompIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetOurCompIdResponse*>(
               &_GetOurCompIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetOurCompIdResponse& a, GetOurCompIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOurCompIdResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOurCompIdResponse* New() const final {
    return CreateMaybeMessage<GetOurCompIdResponse>(nullptr);
  }

  GetOurCompIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOurCompIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOurCompIdResponse& from);
  void MergeFrom(const GetOurCompIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOurCompIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetOurCompIdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompidFieldNumber = 1,
  };
  // uint32 compid = 1;
  void clear_compid();
  ::PROTOBUF_NAMESPACE_ID::uint32 compid() const;
  void set_compid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetOurCompIdResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetTargetSysIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetTargetSysIdRequest) */ {
 public:
  GetTargetSysIdRequest();
  virtual ~GetTargetSysIdRequest();

  GetTargetSysIdRequest(const GetTargetSysIdRequest& from);
  GetTargetSysIdRequest(GetTargetSysIdRequest&& from) noexcept
    : GetTargetSysIdRequest() {
    *this = ::std::move(from);
  }

  inline GetTargetSysIdRequest& operator=(const GetTargetSysIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetSysIdRequest& operator=(GetTargetSysIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTargetSysIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTargetSysIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetTargetSysIdRequest*>(
               &_GetTargetSysIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTargetSysIdRequest& a, GetTargetSysIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetSysIdRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTargetSysIdRequest* New() const final {
    return CreateMaybeMessage<GetTargetSysIdRequest>(nullptr);
  }

  GetTargetSysIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTargetSysIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTargetSysIdRequest& from);
  void MergeFrom(const GetTargetSysIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetSysIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetTargetSysIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetTargetSysIdRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetTargetSysIdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetTargetSysIdResponse) */ {
 public:
  GetTargetSysIdResponse();
  virtual ~GetTargetSysIdResponse();

  GetTargetSysIdResponse(const GetTargetSysIdResponse& from);
  GetTargetSysIdResponse(GetTargetSysIdResponse&& from) noexcept
    : GetTargetSysIdResponse() {
    *this = ::std::move(from);
  }

  inline GetTargetSysIdResponse& operator=(const GetTargetSysIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetSysIdResponse& operator=(GetTargetSysIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTargetSysIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTargetSysIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetTargetSysIdResponse*>(
               &_GetTargetSysIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetTargetSysIdResponse& a, GetTargetSysIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetSysIdResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTargetSysIdResponse* New() const final {
    return CreateMaybeMessage<GetTargetSysIdResponse>(nullptr);
  }

  GetTargetSysIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTargetSysIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTargetSysIdResponse& from);
  void MergeFrom(const GetTargetSysIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetSysIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetTargetSysIdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSysidFieldNumber = 1,
  };
  // uint32 target_sysid = 1;
  void clear_target_sysid();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_sysid() const;
  void set_target_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetTargetSysIdResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_sysid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetTargetCompIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetTargetCompIdRequest) */ {
 public:
  GetTargetCompIdRequest();
  virtual ~GetTargetCompIdRequest();

  GetTargetCompIdRequest(const GetTargetCompIdRequest& from);
  GetTargetCompIdRequest(GetTargetCompIdRequest&& from) noexcept
    : GetTargetCompIdRequest() {
    *this = ::std::move(from);
  }

  inline GetTargetCompIdRequest& operator=(const GetTargetCompIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetCompIdRequest& operator=(GetTargetCompIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTargetCompIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTargetCompIdRequest* internal_default_instance() {
    return reinterpret_cast<const GetTargetCompIdRequest*>(
               &_GetTargetCompIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetTargetCompIdRequest& a, GetTargetCompIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetCompIdRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTargetCompIdRequest* New() const final {
    return CreateMaybeMessage<GetTargetCompIdRequest>(nullptr);
  }

  GetTargetCompIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTargetCompIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTargetCompIdRequest& from);
  void MergeFrom(const GetTargetCompIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetCompIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetTargetCompIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetTargetCompIdRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class GetTargetCompIdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.GetTargetCompIdResponse) */ {
 public:
  GetTargetCompIdResponse();
  virtual ~GetTargetCompIdResponse();

  GetTargetCompIdResponse(const GetTargetCompIdResponse& from);
  GetTargetCompIdResponse(GetTargetCompIdResponse&& from) noexcept
    : GetTargetCompIdResponse() {
    *this = ::std::move(from);
  }

  inline GetTargetCompIdResponse& operator=(const GetTargetCompIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetCompIdResponse& operator=(GetTargetCompIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTargetCompIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTargetCompIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetTargetCompIdResponse*>(
               &_GetTargetCompIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetTargetCompIdResponse& a, GetTargetCompIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetCompIdResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTargetCompIdResponse* New() const final {
    return CreateMaybeMessage<GetTargetCompIdResponse>(nullptr);
  }

  GetTargetCompIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTargetCompIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTargetCompIdResponse& from);
  void MergeFrom(const GetTargetCompIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetCompIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.GetTargetCompIdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetCompidFieldNumber = 1,
  };
  // uint32 target_compid = 1;
  void clear_target_compid();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_compid() const;
  void set_target_compid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.GetTargetCompIdResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_compid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class SendCommandIntRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.SendCommandIntRequest) */ {
 public:
  SendCommandIntRequest();
  virtual ~SendCommandIntRequest();

  SendCommandIntRequest(const SendCommandIntRequest& from);
  SendCommandIntRequest(SendCommandIntRequest&& from) noexcept
    : SendCommandIntRequest() {
    *this = ::std::move(from);
  }

  inline SendCommandIntRequest& operator=(const SendCommandIntRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandIntRequest& operator=(SendCommandIntRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCommandIntRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandIntRequest* internal_default_instance() {
    return reinterpret_cast<const SendCommandIntRequest*>(
               &_SendCommandIntRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendCommandIntRequest& a, SendCommandIntRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandIntRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandIntRequest* New() const final {
    return CreateMaybeMessage<SendCommandIntRequest>(nullptr);
  }

  SendCommandIntRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandIntRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandIntRequest& from);
  void MergeFrom(const SendCommandIntRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandIntRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.SendCommandIntRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandIntFieldNumber = 1,
  };
  // .mavsdk.rpc.passthrough.CommandInt command_int = 1;
  bool has_command_int() const;
  private:
  bool _internal_has_command_int() const;
  public:
  void clear_command_int();
  const ::mavsdk::rpc::passthrough::CommandInt& command_int() const;
  ::mavsdk::rpc::passthrough::CommandInt* release_command_int();
  ::mavsdk::rpc::passthrough::CommandInt* mutable_command_int();
  void set_allocated_command_int(::mavsdk::rpc::passthrough::CommandInt* command_int);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.SendCommandIntRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::CommandInt* command_int_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class SendCommandIntResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.SendCommandIntResponse) */ {
 public:
  SendCommandIntResponse();
  virtual ~SendCommandIntResponse();

  SendCommandIntResponse(const SendCommandIntResponse& from);
  SendCommandIntResponse(SendCommandIntResponse&& from) noexcept
    : SendCommandIntResponse() {
    *this = ::std::move(from);
  }

  inline SendCommandIntResponse& operator=(const SendCommandIntResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandIntResponse& operator=(SendCommandIntResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCommandIntResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandIntResponse* internal_default_instance() {
    return reinterpret_cast<const SendCommandIntResponse*>(
               &_SendCommandIntResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendCommandIntResponse& a, SendCommandIntResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandIntResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandIntResponse* New() const final {
    return CreateMaybeMessage<SendCommandIntResponse>(nullptr);
  }

  SendCommandIntResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandIntResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandIntResponse& from);
  void MergeFrom(const SendCommandIntResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandIntResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.SendCommandIntResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassthroughResultFieldNumber = 1,
  };
  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  bool has_passthrough_result() const;
  private:
  bool _internal_has_passthrough_result() const;
  public:
  void clear_passthrough_result();
  const ::mavsdk::rpc::passthrough::PassthroughResult& passthrough_result() const;
  ::mavsdk::rpc::passthrough::PassthroughResult* release_passthrough_result();
  ::mavsdk::rpc::passthrough::PassthroughResult* mutable_passthrough_result();
  void set_allocated_passthrough_result(::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.SendCommandIntResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class SendCommandLongRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.SendCommandLongRequest) */ {
 public:
  SendCommandLongRequest();
  virtual ~SendCommandLongRequest();

  SendCommandLongRequest(const SendCommandLongRequest& from);
  SendCommandLongRequest(SendCommandLongRequest&& from) noexcept
    : SendCommandLongRequest() {
    *this = ::std::move(from);
  }

  inline SendCommandLongRequest& operator=(const SendCommandLongRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandLongRequest& operator=(SendCommandLongRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCommandLongRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandLongRequest* internal_default_instance() {
    return reinterpret_cast<const SendCommandLongRequest*>(
               &_SendCommandLongRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SendCommandLongRequest& a, SendCommandLongRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandLongRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandLongRequest* New() const final {
    return CreateMaybeMessage<SendCommandLongRequest>(nullptr);
  }

  SendCommandLongRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandLongRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandLongRequest& from);
  void MergeFrom(const SendCommandLongRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandLongRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.SendCommandLongRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandLongFieldNumber = 1,
  };
  // .mavsdk.rpc.passthrough.CommandLong command_long = 1;
  bool has_command_long() const;
  private:
  bool _internal_has_command_long() const;
  public:
  void clear_command_long();
  const ::mavsdk::rpc::passthrough::CommandLong& command_long() const;
  ::mavsdk::rpc::passthrough::CommandLong* release_command_long();
  ::mavsdk::rpc::passthrough::CommandLong* mutable_command_long();
  void set_allocated_command_long(::mavsdk::rpc::passthrough::CommandLong* command_long);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.SendCommandLongRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::CommandLong* command_long_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class SendCommandLongResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.SendCommandLongResponse) */ {
 public:
  SendCommandLongResponse();
  virtual ~SendCommandLongResponse();

  SendCommandLongResponse(const SendCommandLongResponse& from);
  SendCommandLongResponse(SendCommandLongResponse&& from) noexcept
    : SendCommandLongResponse() {
    *this = ::std::move(from);
  }

  inline SendCommandLongResponse& operator=(const SendCommandLongResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandLongResponse& operator=(SendCommandLongResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCommandLongResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCommandLongResponse* internal_default_instance() {
    return reinterpret_cast<const SendCommandLongResponse*>(
               &_SendCommandLongResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SendCommandLongResponse& a, SendCommandLongResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandLongResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandLongResponse* New() const final {
    return CreateMaybeMessage<SendCommandLongResponse>(nullptr);
  }

  SendCommandLongResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandLongResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandLongResponse& from);
  void MergeFrom(const SendCommandLongResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandLongResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.SendCommandLongResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassthroughResultFieldNumber = 1,
  };
  // .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
  bool has_passthrough_result() const;
  private:
  bool _internal_has_passthrough_result() const;
  public:
  void clear_passthrough_result();
  const ::mavsdk::rpc::passthrough::PassthroughResult& passthrough_result() const;
  ::mavsdk::rpc::passthrough::PassthroughResult* release_passthrough_result();
  ::mavsdk::rpc::passthrough::PassthroughResult* mutable_passthrough_result();
  void set_allocated_passthrough_result(::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.SendCommandLongResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class MavlinkMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.MavlinkMessage) */ {
 public:
  MavlinkMessage();
  virtual ~MavlinkMessage();

  MavlinkMessage(const MavlinkMessage& from);
  MavlinkMessage(MavlinkMessage&& from) noexcept
    : MavlinkMessage() {
    *this = ::std::move(from);
  }

  inline MavlinkMessage& operator=(const MavlinkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MavlinkMessage& operator=(MavlinkMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MavlinkMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MavlinkMessage* internal_default_instance() {
    return reinterpret_cast<const MavlinkMessage*>(
               &_MavlinkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MavlinkMessage& a, MavlinkMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MavlinkMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MavlinkMessage* New() const final {
    return CreateMaybeMessage<MavlinkMessage>(nullptr);
  }

  MavlinkMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MavlinkMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MavlinkMessage& from);
  void MergeFrom(const MavlinkMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MavlinkMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.MavlinkMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayload64FieldNumber = 10,
    kCkFieldNumber = 11,
    kChecksumFieldNumber = 1,
    kMagicFieldNumber = 2,
    kLenFieldNumber = 3,
    kIncompatFlagsFieldNumber = 4,
    kCompatFlagsFieldNumber = 5,
    kSeqFieldNumber = 6,
    kSysidFieldNumber = 7,
    kCompidFieldNumber = 8,
    kMsgidFieldNumber = 9,
  };
  // repeated uint64 payload64 = 10;
  int payload64_size() const;
  void clear_payload64();
  ::PROTOBUF_NAMESPACE_ID::uint64 payload64(int index) const;
  void set_payload64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_payload64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      payload64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_payload64();

  // repeated uint32 ck = 11;
  int ck_size() const;
  void clear_ck();
  ::PROTOBUF_NAMESPACE_ID::uint32 ck(int index) const;
  void set_ck(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ck(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ck() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ck();

  // uint32 checksum = 1;
  void clear_checksum();
  ::PROTOBUF_NAMESPACE_ID::uint32 checksum() const;
  void set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 magic = 2;
  void clear_magic();
  ::PROTOBUF_NAMESPACE_ID::uint32 magic() const;
  void set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 len = 3;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 incompat_flags = 4;
  void clear_incompat_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 incompat_flags() const;
  void set_incompat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 compat_flags = 5;
  void clear_compat_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 compat_flags() const;
  void set_compat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 seq = 6;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 sysid = 7;
  void clear_sysid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid() const;
  void set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 compid = 8;
  void clear_compid();
  ::PROTOBUF_NAMESPACE_ID::uint32 compid() const;
  void set_compid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 msgid = 9;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.MavlinkMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > payload64_;
  mutable std::atomic<int> _payload64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ck_;
  mutable std::atomic<int> _ck_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checksum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 incompat_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compat_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sysid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class CommandInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.CommandInt) */ {
 public:
  CommandInt();
  virtual ~CommandInt();

  CommandInt(const CommandInt& from);
  CommandInt(CommandInt&& from) noexcept
    : CommandInt() {
    *this = ::std::move(from);
  }

  inline CommandInt& operator=(const CommandInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInt& operator=(CommandInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandInt* internal_default_instance() {
    return reinterpret_cast<const CommandInt*>(
               &_CommandInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CommandInt& a, CommandInt& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandInt* New() const final {
    return CreateMaybeMessage<CommandInt>(nullptr);
  }

  CommandInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandInt& from);
  void MergeFrom(const CommandInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.CommandInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 6,
    kTargetSystemIdFieldNumber = 1,
    kTargetComponentIdFieldNumber = 2,
    kCommandFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kAutocontinueFieldNumber = 5,
  };
  // .mavsdk.rpc.passthrough.ParamsInt params = 6;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::mavsdk::rpc::passthrough::ParamsInt& params() const;
  ::mavsdk::rpc::passthrough::ParamsInt* release_params();
  ::mavsdk::rpc::passthrough::ParamsInt* mutable_params();
  void set_allocated_params(::mavsdk::rpc::passthrough::ParamsInt* params);

  // uint32 target_system_id = 1;
  void clear_target_system_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_system_id() const;
  void set_target_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 target_component_id = 2;
  void clear_target_component_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_component_id() const;
  void set_target_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint64 command = 3;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint64 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool current = 4;
  void clear_current();
  bool current() const;
  void set_current(bool value);

  // bool autocontinue = 5;
  void clear_autocontinue();
  bool autocontinue() const;
  void set_autocontinue(bool value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.CommandInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::ParamsInt* params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_system_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_component_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 command_;
  bool current_;
  bool autocontinue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class ParamsInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.ParamsInt) */ {
 public:
  ParamsInt();
  virtual ~ParamsInt();

  ParamsInt(const ParamsInt& from);
  ParamsInt(ParamsInt&& from) noexcept
    : ParamsInt() {
    *this = ::std::move(from);
  }

  inline ParamsInt& operator=(const ParamsInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamsInt& operator=(ParamsInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParamsInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamsInt* internal_default_instance() {
    return reinterpret_cast<const ParamsInt*>(
               &_ParamsInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ParamsInt& a, ParamsInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamsInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamsInt* New() const final {
    return CreateMaybeMessage<ParamsInt>(nullptr);
  }

  ParamsInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamsInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParamsInt& from);
  void MergeFrom(const ParamsInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamsInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.ParamsInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParam1FieldNumber = 1,
    kParam2FieldNumber = 2,
    kParam3FieldNumber = 3,
    kParam4FieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kZFieldNumber = 7,
  };
  // float param1 = 1;
  void clear_param1();
  float param1() const;
  void set_param1(float value);

  // float param2 = 2;
  void clear_param2();
  float param2() const;
  void set_param2(float value);

  // float param3 = 3;
  void clear_param3();
  float param3() const;
  void set_param3(float value);

  // float param4 = 4;
  void clear_param4();
  float param4() const;
  void set_param4(float value);

  // int32 x = 5;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 y = 6;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float z = 7;
  void clear_z();
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.ParamsInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class CommandLong :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.CommandLong) */ {
 public:
  CommandLong();
  virtual ~CommandLong();

  CommandLong(const CommandLong& from);
  CommandLong(CommandLong&& from) noexcept
    : CommandLong() {
    *this = ::std::move(from);
  }

  inline CommandLong& operator=(const CommandLong& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandLong& operator=(CommandLong&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandLong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandLong* internal_default_instance() {
    return reinterpret_cast<const CommandLong*>(
               &_CommandLong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CommandLong& a, CommandLong& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandLong* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandLong* New() const final {
    return CreateMaybeMessage<CommandLong>(nullptr);
  }

  CommandLong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandLong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandLong& from);
  void MergeFrom(const CommandLong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandLong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.CommandLong";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 5,
    kTargetSystemIdFieldNumber = 1,
    kTargetComponentIdFieldNumber = 2,
    kCommandFieldNumber = 3,
    kConfirmationFieldNumber = 4,
  };
  // .mavsdk.rpc.passthrough.ParamsLong params = 5;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::mavsdk::rpc::passthrough::ParamsLong& params() const;
  ::mavsdk::rpc::passthrough::ParamsLong* release_params();
  ::mavsdk::rpc::passthrough::ParamsLong* mutable_params();
  void set_allocated_params(::mavsdk::rpc::passthrough::ParamsLong* params);

  // uint32 target_system_id = 1;
  void clear_target_system_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_system_id() const;
  void set_target_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 target_component_id = 2;
  void clear_target_component_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_component_id() const;
  void set_target_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint64 command = 3;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint64 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 confirmation = 4;
  void clear_confirmation();
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmation() const;
  void set_confirmation(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.CommandLong)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::passthrough::ParamsLong* params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_system_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_component_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class ParamsLong :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.ParamsLong) */ {
 public:
  ParamsLong();
  virtual ~ParamsLong();

  ParamsLong(const ParamsLong& from);
  ParamsLong(ParamsLong&& from) noexcept
    : ParamsLong() {
    *this = ::std::move(from);
  }

  inline ParamsLong& operator=(const ParamsLong& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamsLong& operator=(ParamsLong&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParamsLong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamsLong* internal_default_instance() {
    return reinterpret_cast<const ParamsLong*>(
               &_ParamsLong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ParamsLong& a, ParamsLong& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamsLong* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParamsLong* New() const final {
    return CreateMaybeMessage<ParamsLong>(nullptr);
  }

  ParamsLong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParamsLong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParamsLong& from);
  void MergeFrom(const ParamsLong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamsLong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.ParamsLong";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParam1FieldNumber = 1,
    kParam2FieldNumber = 2,
    kParam3FieldNumber = 3,
    kParam4FieldNumber = 4,
    kParam5FieldNumber = 5,
    kParam6FieldNumber = 6,
    kParam7FieldNumber = 7,
  };
  // float param1 = 1;
  void clear_param1();
  float param1() const;
  void set_param1(float value);

  // float param2 = 2;
  void clear_param2();
  float param2() const;
  void set_param2(float value);

  // float param3 = 3;
  void clear_param3();
  float param3() const;
  void set_param3(float value);

  // float param4 = 4;
  void clear_param4();
  float param4() const;
  void set_param4(float value);

  // float param5 = 5;
  void clear_param5();
  float param5() const;
  void set_param5(float value);

  // float param6 = 6;
  void clear_param6();
  float param6() const;
  void set_param6(float value);

  // float param7 = 7;
  void clear_param7();
  float param7() const;
  void set_param7(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.ParamsLong)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  float param5_;
  float param6_;
  float param7_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// -------------------------------------------------------------------

class PassthroughResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.passthrough.PassthroughResult) */ {
 public:
  PassthroughResult();
  virtual ~PassthroughResult();

  PassthroughResult(const PassthroughResult& from);
  PassthroughResult(PassthroughResult&& from) noexcept
    : PassthroughResult() {
    *this = ::std::move(from);
  }

  inline PassthroughResult& operator=(const PassthroughResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassthroughResult& operator=(PassthroughResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PassthroughResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassthroughResult* internal_default_instance() {
    return reinterpret_cast<const PassthroughResult*>(
               &_PassthroughResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PassthroughResult& a, PassthroughResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PassthroughResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PassthroughResult* New() const final {
    return CreateMaybeMessage<PassthroughResult>(nullptr);
  }

  PassthroughResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PassthroughResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PassthroughResult& from);
  void MergeFrom(const PassthroughResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassthroughResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.passthrough.PassthroughResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_passthrough_2fpassthrough_2eproto);
    return ::descriptor_table_passthrough_2fpassthrough_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PassthroughResult_Result Result;
  static constexpr Result UNKNOWN =
    PassthroughResult_Result_UNKNOWN;
  static constexpr Result SUCCESS =
    PassthroughResult_Result_SUCCESS;
  static constexpr Result CONNECTION_ERROR =
    PassthroughResult_Result_CONNECTION_ERROR;
  static inline bool Result_IsValid(int value) {
    return PassthroughResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    PassthroughResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    PassthroughResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    PassthroughResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return PassthroughResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return PassthroughResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return PassthroughResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.passthrough.PassthroughResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::passthrough::PassthroughResult_Result result() const;
  void set_result(::mavsdk::rpc::passthrough::PassthroughResult_Result value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.passthrough.PassthroughResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_passthrough_2fpassthrough_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendMessageRequest

// .mavsdk.rpc.passthrough.MavlinkMessage mavlink_message = 1;
inline bool SendMessageRequest::has_mavlink_message() const {
  return this != internal_default_instance() && mavlink_message_ != nullptr;
}
inline void SendMessageRequest::clear_mavlink_message() {
  if (GetArenaNoVirtual() == nullptr && mavlink_message_ != nullptr) {
    delete mavlink_message_;
  }
  mavlink_message_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::MavlinkMessage& SendMessageRequest::mavlink_message() const {
  const ::mavsdk::rpc::passthrough::MavlinkMessage* p = mavlink_message_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.SendMessageRequest.mavlink_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::MavlinkMessage*>(
      &::mavsdk::rpc::passthrough::_MavlinkMessage_default_instance_);
}
inline ::mavsdk::rpc::passthrough::MavlinkMessage* SendMessageRequest::release_mavlink_message() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.SendMessageRequest.mavlink_message)
  
  ::mavsdk::rpc::passthrough::MavlinkMessage* temp = mavlink_message_;
  mavlink_message_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::MavlinkMessage* SendMessageRequest::mutable_mavlink_message() {
  
  if (mavlink_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::MavlinkMessage>(GetArenaNoVirtual());
    mavlink_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.SendMessageRequest.mavlink_message)
  return mavlink_message_;
}
inline void SendMessageRequest::set_allocated_mavlink_message(::mavsdk::rpc::passthrough::MavlinkMessage* mavlink_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mavlink_message_;
  }
  if (mavlink_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mavlink_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mavlink_message, submessage_arena);
    }
    
  } else {
    
  }
  mavlink_message_ = mavlink_message;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.SendMessageRequest.mavlink_message)
}

// -------------------------------------------------------------------

// SendMessageResponse

// .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
inline bool SendMessageResponse::has_passthrough_result() const {
  return this != internal_default_instance() && passthrough_result_ != nullptr;
}
inline void SendMessageResponse::clear_passthrough_result() {
  if (GetArenaNoVirtual() == nullptr && passthrough_result_ != nullptr) {
    delete passthrough_result_;
  }
  passthrough_result_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::PassthroughResult& SendMessageResponse::passthrough_result() const {
  const ::mavsdk::rpc::passthrough::PassthroughResult* p = passthrough_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.SendMessageResponse.passthrough_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::PassthroughResult*>(
      &::mavsdk::rpc::passthrough::_PassthroughResult_default_instance_);
}
inline ::mavsdk::rpc::passthrough::PassthroughResult* SendMessageResponse::release_passthrough_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.SendMessageResponse.passthrough_result)
  
  ::mavsdk::rpc::passthrough::PassthroughResult* temp = passthrough_result_;
  passthrough_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::PassthroughResult* SendMessageResponse::mutable_passthrough_result() {
  
  if (passthrough_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::PassthroughResult>(GetArenaNoVirtual());
    passthrough_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.SendMessageResponse.passthrough_result)
  return passthrough_result_;
}
inline void SendMessageResponse::set_allocated_passthrough_result(::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete passthrough_result_;
  }
  if (passthrough_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      passthrough_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passthrough_result, submessage_arena);
    }
    
  } else {
    
  }
  passthrough_result_ = passthrough_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.SendMessageResponse.passthrough_result)
}

// -------------------------------------------------------------------

// GetOurSysIdRequest

// -------------------------------------------------------------------

// GetOurSysIdResponse

// uint32 sysid = 1;
inline void GetOurSysIdResponse::clear_sysid() {
  sysid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOurSysIdResponse::sysid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.GetOurSysIdResponse.sysid)
  return sysid_;
}
inline void GetOurSysIdResponse::set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sysid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.GetOurSysIdResponse.sysid)
}

// -------------------------------------------------------------------

// GetOurCompIdRequest

// -------------------------------------------------------------------

// GetOurCompIdResponse

// uint32 compid = 1;
inline void GetOurCompIdResponse::clear_compid() {
  compid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetOurCompIdResponse::compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.GetOurCompIdResponse.compid)
  return compid_;
}
inline void GetOurCompIdResponse::set_compid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  compid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.GetOurCompIdResponse.compid)
}

// -------------------------------------------------------------------

// GetTargetSysIdRequest

// -------------------------------------------------------------------

// GetTargetSysIdResponse

// uint32 target_sysid = 1;
inline void GetTargetSysIdResponse::clear_target_sysid() {
  target_sysid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTargetSysIdResponse::target_sysid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.GetTargetSysIdResponse.target_sysid)
  return target_sysid_;
}
inline void GetTargetSysIdResponse::set_target_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_sysid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.GetTargetSysIdResponse.target_sysid)
}

// -------------------------------------------------------------------

// GetTargetCompIdRequest

// -------------------------------------------------------------------

// GetTargetCompIdResponse

// uint32 target_compid = 1;
inline void GetTargetCompIdResponse::clear_target_compid() {
  target_compid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTargetCompIdResponse::target_compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.GetTargetCompIdResponse.target_compid)
  return target_compid_;
}
inline void GetTargetCompIdResponse::set_target_compid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_compid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.GetTargetCompIdResponse.target_compid)
}

// -------------------------------------------------------------------

// SendCommandIntRequest

// .mavsdk.rpc.passthrough.CommandInt command_int = 1;
inline bool SendCommandIntRequest::has_command_int() const {
  return this != internal_default_instance() && command_int_ != nullptr;
}
inline void SendCommandIntRequest::clear_command_int() {
  if (GetArenaNoVirtual() == nullptr && command_int_ != nullptr) {
    delete command_int_;
  }
  command_int_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::CommandInt& SendCommandIntRequest::command_int() const {
  const ::mavsdk::rpc::passthrough::CommandInt* p = command_int_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.SendCommandIntRequest.command_int)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::CommandInt*>(
      &::mavsdk::rpc::passthrough::_CommandInt_default_instance_);
}
inline ::mavsdk::rpc::passthrough::CommandInt* SendCommandIntRequest::release_command_int() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.SendCommandIntRequest.command_int)
  
  ::mavsdk::rpc::passthrough::CommandInt* temp = command_int_;
  command_int_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::CommandInt* SendCommandIntRequest::mutable_command_int() {
  
  if (command_int_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::CommandInt>(GetArenaNoVirtual());
    command_int_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.SendCommandIntRequest.command_int)
  return command_int_;
}
inline void SendCommandIntRequest::set_allocated_command_int(::mavsdk::rpc::passthrough::CommandInt* command_int) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete command_int_;
  }
  if (command_int) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command_int = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_int, submessage_arena);
    }
    
  } else {
    
  }
  command_int_ = command_int;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.SendCommandIntRequest.command_int)
}

// -------------------------------------------------------------------

// SendCommandIntResponse

// .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
inline bool SendCommandIntResponse::has_passthrough_result() const {
  return this != internal_default_instance() && passthrough_result_ != nullptr;
}
inline void SendCommandIntResponse::clear_passthrough_result() {
  if (GetArenaNoVirtual() == nullptr && passthrough_result_ != nullptr) {
    delete passthrough_result_;
  }
  passthrough_result_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::PassthroughResult& SendCommandIntResponse::passthrough_result() const {
  const ::mavsdk::rpc::passthrough::PassthroughResult* p = passthrough_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.SendCommandIntResponse.passthrough_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::PassthroughResult*>(
      &::mavsdk::rpc::passthrough::_PassthroughResult_default_instance_);
}
inline ::mavsdk::rpc::passthrough::PassthroughResult* SendCommandIntResponse::release_passthrough_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.SendCommandIntResponse.passthrough_result)
  
  ::mavsdk::rpc::passthrough::PassthroughResult* temp = passthrough_result_;
  passthrough_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::PassthroughResult* SendCommandIntResponse::mutable_passthrough_result() {
  
  if (passthrough_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::PassthroughResult>(GetArenaNoVirtual());
    passthrough_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.SendCommandIntResponse.passthrough_result)
  return passthrough_result_;
}
inline void SendCommandIntResponse::set_allocated_passthrough_result(::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete passthrough_result_;
  }
  if (passthrough_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      passthrough_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passthrough_result, submessage_arena);
    }
    
  } else {
    
  }
  passthrough_result_ = passthrough_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.SendCommandIntResponse.passthrough_result)
}

// -------------------------------------------------------------------

// SendCommandLongRequest

// .mavsdk.rpc.passthrough.CommandLong command_long = 1;
inline bool SendCommandLongRequest::has_command_long() const {
  return this != internal_default_instance() && command_long_ != nullptr;
}
inline void SendCommandLongRequest::clear_command_long() {
  if (GetArenaNoVirtual() == nullptr && command_long_ != nullptr) {
    delete command_long_;
  }
  command_long_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::CommandLong& SendCommandLongRequest::command_long() const {
  const ::mavsdk::rpc::passthrough::CommandLong* p = command_long_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.SendCommandLongRequest.command_long)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::CommandLong*>(
      &::mavsdk::rpc::passthrough::_CommandLong_default_instance_);
}
inline ::mavsdk::rpc::passthrough::CommandLong* SendCommandLongRequest::release_command_long() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.SendCommandLongRequest.command_long)
  
  ::mavsdk::rpc::passthrough::CommandLong* temp = command_long_;
  command_long_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::CommandLong* SendCommandLongRequest::mutable_command_long() {
  
  if (command_long_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::CommandLong>(GetArenaNoVirtual());
    command_long_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.SendCommandLongRequest.command_long)
  return command_long_;
}
inline void SendCommandLongRequest::set_allocated_command_long(::mavsdk::rpc::passthrough::CommandLong* command_long) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete command_long_;
  }
  if (command_long) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command_long = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_long, submessage_arena);
    }
    
  } else {
    
  }
  command_long_ = command_long;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.SendCommandLongRequest.command_long)
}

// -------------------------------------------------------------------

// SendCommandLongResponse

// .mavsdk.rpc.passthrough.PassthroughResult passthrough_result = 1;
inline bool SendCommandLongResponse::has_passthrough_result() const {
  return this != internal_default_instance() && passthrough_result_ != nullptr;
}
inline void SendCommandLongResponse::clear_passthrough_result() {
  if (GetArenaNoVirtual() == nullptr && passthrough_result_ != nullptr) {
    delete passthrough_result_;
  }
  passthrough_result_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::PassthroughResult& SendCommandLongResponse::passthrough_result() const {
  const ::mavsdk::rpc::passthrough::PassthroughResult* p = passthrough_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.SendCommandLongResponse.passthrough_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::PassthroughResult*>(
      &::mavsdk::rpc::passthrough::_PassthroughResult_default_instance_);
}
inline ::mavsdk::rpc::passthrough::PassthroughResult* SendCommandLongResponse::release_passthrough_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.SendCommandLongResponse.passthrough_result)
  
  ::mavsdk::rpc::passthrough::PassthroughResult* temp = passthrough_result_;
  passthrough_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::PassthroughResult* SendCommandLongResponse::mutable_passthrough_result() {
  
  if (passthrough_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::PassthroughResult>(GetArenaNoVirtual());
    passthrough_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.SendCommandLongResponse.passthrough_result)
  return passthrough_result_;
}
inline void SendCommandLongResponse::set_allocated_passthrough_result(::mavsdk::rpc::passthrough::PassthroughResult* passthrough_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete passthrough_result_;
  }
  if (passthrough_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      passthrough_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passthrough_result, submessage_arena);
    }
    
  } else {
    
  }
  passthrough_result_ = passthrough_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.SendCommandLongResponse.passthrough_result)
}

// -------------------------------------------------------------------

// MavlinkMessage

// uint32 checksum = 1;
inline void MavlinkMessage::clear_checksum() {
  checksum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::checksum() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.checksum)
  return checksum_;
}
inline void MavlinkMessage::set_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.checksum)
}

// uint32 magic = 2;
inline void MavlinkMessage::clear_magic() {
  magic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::magic() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.magic)
  return magic_;
}
inline void MavlinkMessage::set_magic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.magic)
}

// uint32 len = 3;
inline void MavlinkMessage::clear_len() {
  len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::len() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.len)
  return len_;
}
inline void MavlinkMessage::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.len)
}

// uint32 incompat_flags = 4;
inline void MavlinkMessage::clear_incompat_flags() {
  incompat_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::incompat_flags() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.incompat_flags)
  return incompat_flags_;
}
inline void MavlinkMessage::set_incompat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  incompat_flags_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.incompat_flags)
}

// uint32 compat_flags = 5;
inline void MavlinkMessage::clear_compat_flags() {
  compat_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::compat_flags() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.compat_flags)
  return compat_flags_;
}
inline void MavlinkMessage::set_compat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  compat_flags_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.compat_flags)
}

// uint32 seq = 6;
inline void MavlinkMessage::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::seq() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.seq)
  return seq_;
}
inline void MavlinkMessage::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.seq)
}

// uint32 sysid = 7;
inline void MavlinkMessage::clear_sysid() {
  sysid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::sysid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.sysid)
  return sysid_;
}
inline void MavlinkMessage::set_sysid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sysid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.sysid)
}

// uint32 compid = 8;
inline void MavlinkMessage::clear_compid() {
  compid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::compid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.compid)
  return compid_;
}
inline void MavlinkMessage::set_compid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  compid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.compid)
}

// uint32 msgid = 9;
inline void MavlinkMessage::clear_msgid() {
  msgid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::msgid() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.msgid)
  return msgid_;
}
inline void MavlinkMessage::set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.msgid)
}

// repeated uint64 payload64 = 10;
inline int MavlinkMessage::payload64_size() const {
  return payload64_.size();
}
inline void MavlinkMessage::clear_payload64() {
  payload64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MavlinkMessage::payload64(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.payload64)
  return payload64_.Get(index);
}
inline void MavlinkMessage::set_payload64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  payload64_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.payload64)
}
inline void MavlinkMessage::add_payload64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  payload64_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.passthrough.MavlinkMessage.payload64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
MavlinkMessage::payload64() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.passthrough.MavlinkMessage.payload64)
  return payload64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
MavlinkMessage::mutable_payload64() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.passthrough.MavlinkMessage.payload64)
  return &payload64_;
}

// repeated uint32 ck = 11;
inline int MavlinkMessage::ck_size() const {
  return ck_.size();
}
inline void MavlinkMessage::clear_ck() {
  ck_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MavlinkMessage::ck(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.MavlinkMessage.ck)
  return ck_.Get(index);
}
inline void MavlinkMessage::set_ck(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ck_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.MavlinkMessage.ck)
}
inline void MavlinkMessage::add_ck(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ck_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.passthrough.MavlinkMessage.ck)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MavlinkMessage::ck() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.passthrough.MavlinkMessage.ck)
  return ck_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MavlinkMessage::mutable_ck() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.passthrough.MavlinkMessage.ck)
  return &ck_;
}

// -------------------------------------------------------------------

// CommandInt

// uint32 target_system_id = 1;
inline void CommandInt::clear_target_system_id() {
  target_system_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandInt::target_system_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandInt.target_system_id)
  return target_system_id_;
}
inline void CommandInt::set_target_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_system_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandInt.target_system_id)
}

// uint32 target_component_id = 2;
inline void CommandInt::clear_target_component_id() {
  target_component_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandInt::target_component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandInt.target_component_id)
  return target_component_id_;
}
inline void CommandInt::set_target_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_component_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandInt.target_component_id)
}

// uint64 command = 3;
inline void CommandInt::clear_command() {
  command_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandInt::command() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandInt.command)
  return command_;
}
inline void CommandInt::set_command(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandInt.command)
}

// bool current = 4;
inline void CommandInt::clear_current() {
  current_ = false;
}
inline bool CommandInt::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandInt.current)
  return current_;
}
inline void CommandInt::set_current(bool value) {
  
  current_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandInt.current)
}

// bool autocontinue = 5;
inline void CommandInt::clear_autocontinue() {
  autocontinue_ = false;
}
inline bool CommandInt::autocontinue() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandInt.autocontinue)
  return autocontinue_;
}
inline void CommandInt::set_autocontinue(bool value) {
  
  autocontinue_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandInt.autocontinue)
}

// .mavsdk.rpc.passthrough.ParamsInt params = 6;
inline bool CommandInt::has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline void CommandInt::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::ParamsInt& CommandInt::params() const {
  const ::mavsdk::rpc::passthrough::ParamsInt* p = params_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandInt.params)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::ParamsInt*>(
      &::mavsdk::rpc::passthrough::_ParamsInt_default_instance_);
}
inline ::mavsdk::rpc::passthrough::ParamsInt* CommandInt::release_params() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.CommandInt.params)
  
  ::mavsdk::rpc::passthrough::ParamsInt* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::ParamsInt* CommandInt::mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::ParamsInt>(GetArenaNoVirtual());
    params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.CommandInt.params)
  return params_;
}
inline void CommandInt::set_allocated_params(::mavsdk::rpc::passthrough::ParamsInt* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.CommandInt.params)
}

// -------------------------------------------------------------------

// ParamsInt

// float param1 = 1;
inline void ParamsInt::clear_param1() {
  param1_ = 0;
}
inline float ParamsInt::param1() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsInt.param1)
  return param1_;
}
inline void ParamsInt::set_param1(float value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsInt.param1)
}

// float param2 = 2;
inline void ParamsInt::clear_param2() {
  param2_ = 0;
}
inline float ParamsInt::param2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsInt.param2)
  return param2_;
}
inline void ParamsInt::set_param2(float value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsInt.param2)
}

// float param3 = 3;
inline void ParamsInt::clear_param3() {
  param3_ = 0;
}
inline float ParamsInt::param3() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsInt.param3)
  return param3_;
}
inline void ParamsInt::set_param3(float value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsInt.param3)
}

// float param4 = 4;
inline void ParamsInt::clear_param4() {
  param4_ = 0;
}
inline float ParamsInt::param4() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsInt.param4)
  return param4_;
}
inline void ParamsInt::set_param4(float value) {
  
  param4_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsInt.param4)
}

// int32 x = 5;
inline void ParamsInt::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParamsInt::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsInt.x)
  return x_;
}
inline void ParamsInt::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsInt.x)
}

// int32 y = 6;
inline void ParamsInt::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParamsInt::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsInt.y)
  return y_;
}
inline void ParamsInt::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsInt.y)
}

// float z = 7;
inline void ParamsInt::clear_z() {
  z_ = 0;
}
inline float ParamsInt::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsInt.z)
  return z_;
}
inline void ParamsInt::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsInt.z)
}

// -------------------------------------------------------------------

// CommandLong

// uint32 target_system_id = 1;
inline void CommandLong::clear_target_system_id() {
  target_system_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::target_system_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandLong.target_system_id)
  return target_system_id_;
}
inline void CommandLong::set_target_system_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_system_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandLong.target_system_id)
}

// uint32 target_component_id = 2;
inline void CommandLong::clear_target_component_id() {
  target_component_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::target_component_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandLong.target_component_id)
  return target_component_id_;
}
inline void CommandLong::set_target_component_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_component_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandLong.target_component_id)
}

// uint64 command = 3;
inline void CommandLong::clear_command() {
  command_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommandLong::command() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandLong.command)
  return command_;
}
inline void CommandLong::set_command(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandLong.command)
}

// uint32 confirmation = 4;
inline void CommandLong::clear_confirmation() {
  confirmation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandLong::confirmation() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandLong.confirmation)
  return confirmation_;
}
inline void CommandLong::set_confirmation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confirmation_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.CommandLong.confirmation)
}

// .mavsdk.rpc.passthrough.ParamsLong params = 5;
inline bool CommandLong::has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline void CommandLong::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::mavsdk::rpc::passthrough::ParamsLong& CommandLong::params() const {
  const ::mavsdk::rpc::passthrough::ParamsLong* p = params_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.CommandLong.params)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::passthrough::ParamsLong*>(
      &::mavsdk::rpc::passthrough::_ParamsLong_default_instance_);
}
inline ::mavsdk::rpc::passthrough::ParamsLong* CommandLong::release_params() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.CommandLong.params)
  
  ::mavsdk::rpc::passthrough::ParamsLong* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::passthrough::ParamsLong* CommandLong::mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::passthrough::ParamsLong>(GetArenaNoVirtual());
    params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.CommandLong.params)
  return params_;
}
inline void CommandLong::set_allocated_params(::mavsdk::rpc::passthrough::ParamsLong* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.CommandLong.params)
}

// -------------------------------------------------------------------

// ParamsLong

// float param1 = 1;
inline void ParamsLong::clear_param1() {
  param1_ = 0;
}
inline float ParamsLong::param1() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsLong.param1)
  return param1_;
}
inline void ParamsLong::set_param1(float value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsLong.param1)
}

// float param2 = 2;
inline void ParamsLong::clear_param2() {
  param2_ = 0;
}
inline float ParamsLong::param2() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsLong.param2)
  return param2_;
}
inline void ParamsLong::set_param2(float value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsLong.param2)
}

// float param3 = 3;
inline void ParamsLong::clear_param3() {
  param3_ = 0;
}
inline float ParamsLong::param3() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsLong.param3)
  return param3_;
}
inline void ParamsLong::set_param3(float value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsLong.param3)
}

// float param4 = 4;
inline void ParamsLong::clear_param4() {
  param4_ = 0;
}
inline float ParamsLong::param4() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsLong.param4)
  return param4_;
}
inline void ParamsLong::set_param4(float value) {
  
  param4_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsLong.param4)
}

// float param5 = 5;
inline void ParamsLong::clear_param5() {
  param5_ = 0;
}
inline float ParamsLong::param5() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsLong.param5)
  return param5_;
}
inline void ParamsLong::set_param5(float value) {
  
  param5_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsLong.param5)
}

// float param6 = 6;
inline void ParamsLong::clear_param6() {
  param6_ = 0;
}
inline float ParamsLong::param6() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsLong.param6)
  return param6_;
}
inline void ParamsLong::set_param6(float value) {
  
  param6_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsLong.param6)
}

// float param7 = 7;
inline void ParamsLong::clear_param7() {
  param7_ = 0;
}
inline float ParamsLong::param7() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.ParamsLong.param7)
  return param7_;
}
inline void ParamsLong::set_param7(float value) {
  
  param7_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.ParamsLong.param7)
}

// -------------------------------------------------------------------

// PassthroughResult

// .mavsdk.rpc.passthrough.PassthroughResult.Result result = 1;
inline void PassthroughResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::passthrough::PassthroughResult_Result PassthroughResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.PassthroughResult.result)
  return static_cast< ::mavsdk::rpc::passthrough::PassthroughResult_Result >(result_);
}
inline void PassthroughResult::set_result(::mavsdk::rpc::passthrough::PassthroughResult_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.PassthroughResult.result)
}

// string result_str = 2;
inline void PassthroughResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PassthroughResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.passthrough.PassthroughResult.result_str)
  return _internal_result_str();
}
inline void PassthroughResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.passthrough.PassthroughResult.result_str)
}
inline std::string* PassthroughResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.passthrough.PassthroughResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& PassthroughResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void PassthroughResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PassthroughResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.passthrough.PassthroughResult.result_str)
}
inline void PassthroughResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.passthrough.PassthroughResult.result_str)
}
inline void PassthroughResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.passthrough.PassthroughResult.result_str)
}
inline std::string* PassthroughResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PassthroughResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.passthrough.PassthroughResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PassthroughResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.passthrough.PassthroughResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace passthrough
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::passthrough::PassthroughResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::passthrough::PassthroughResult_Result>() {
  return ::mavsdk::rpc::passthrough::PassthroughResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_passthrough_2fpassthrough_2eproto
