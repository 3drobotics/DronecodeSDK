// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: passthrough/passthrough.proto
#ifndef GRPC_passthrough_2fpassthrough_2eproto__INCLUDED
#define GRPC_passthrough_2fpassthrough_2eproto__INCLUDED

#include "passthrough/passthrough.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace mavsdk {
namespace rpc {
namespace passthrough {

// Provide raw access to mavlink commands.
class PassthroughService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.passthrough.PassthroughService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::mavsdk::rpc::passthrough::SendMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>> AsyncGetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>>(AsyncGetOurSysIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>> PrepareAsyncGetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>>(PrepareAsyncGetOurSysIdRaw(context, request, cq));
    }
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>> AsyncGetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>>(AsyncGetOurCompIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>> PrepareAsyncGetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>>(PrepareAsyncGetOurCompIdRaw(context, request, cq));
    }
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>> AsyncGetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>>(AsyncGetTargetSysIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>> PrepareAsyncGetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>>(PrepareAsyncGetTargetSysIdRaw(context, request, cq));
    }
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>> AsyncGetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>>(AsyncGetTargetCompIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>> PrepareAsyncGetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>>(PrepareAsyncGetTargetCompIdRaw(context, request, cq));
    }
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status SendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandIntResponse>> AsyncSendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandIntResponse>>(AsyncSendCommandIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandIntResponse>> PrepareAsyncSendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandIntResponse>>(PrepareAsyncSendCommandIntRaw(context, request, cq));
    }
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status SendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandLongResponse>> AsyncSendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandLongResponse>>(AsyncSendCommandLongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandLongResponse>> PrepareAsyncSendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandLongResponse>>(PrepareAsyncSendCommandLongRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // Send Message.
      //
      // If the type is wrong, the result will be `WRONG_TYPE`.
      virtual void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //
      // Send Message.
      //
      // If the type is wrong, the result will be `WRONG_TYPE`.
      virtual void GetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOurSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetOurSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //
      // Send Message.
      //
      // If the type is wrong, the result will be `WRONG_TYPE`.
      virtual void GetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOurCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetOurCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //
      // Send Message.
      //
      // If the type is wrong, the result will be `WRONG_TYPE`.
      virtual void GetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTargetSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTargetSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //
      // Send Message.
      //
      // If the type is wrong, the result will be `WRONG_TYPE`.
      virtual void GetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTargetCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTargetCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //
      // Send Message.
      //
      // If the type is wrong, the result will be `WRONG_TYPE`.
      virtual void SendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCommandInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SendCommandInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //
      // Send Message.
      //
      // If the type is wrong, the result will be `WRONG_TYPE`.
      virtual void SendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCommandLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SendCommandLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>* AsyncGetOurSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>* PrepareAsyncGetOurSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>* AsyncGetOurCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>* PrepareAsyncGetOurCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>* AsyncGetTargetSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>* PrepareAsyncGetTargetSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>* AsyncGetTargetCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>* PrepareAsyncGetTargetCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandIntResponse>* AsyncSendCommandIntRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandIntResponse>* PrepareAsyncSendCommandIntRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandLongResponse>* AsyncSendCommandLongRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::passthrough::SendCommandLongResponse>* PrepareAsyncSendCommandLongRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::mavsdk::rpc::passthrough::SendMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendMessageResponse>> AsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendMessageResponse>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendMessageResponse>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendMessageResponse>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status GetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>> AsyncGetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>>(AsyncGetOurSysIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>> PrepareAsyncGetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>>(PrepareAsyncGetOurSysIdRaw(context, request, cq));
    }
    ::grpc::Status GetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>> AsyncGetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>>(AsyncGetOurCompIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>> PrepareAsyncGetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>>(PrepareAsyncGetOurCompIdRaw(context, request, cq));
    }
    ::grpc::Status GetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>> AsyncGetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>>(AsyncGetTargetSysIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>> PrepareAsyncGetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>>(PrepareAsyncGetTargetSysIdRaw(context, request, cq));
    }
    ::grpc::Status GetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>> AsyncGetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>>(AsyncGetTargetCompIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>> PrepareAsyncGetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>>(PrepareAsyncGetTargetCompIdRaw(context, request, cq));
    }
    ::grpc::Status SendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandIntResponse>> AsyncSendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandIntResponse>>(AsyncSendCommandIntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandIntResponse>> PrepareAsyncSendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandIntResponse>>(PrepareAsyncSendCommandIntRaw(context, request, cq));
    }
    ::grpc::Status SendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandLongResponse>> AsyncSendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandLongResponse>>(AsyncSendCommandLongRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandLongResponse>> PrepareAsyncSendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandLongResponse>>(PrepareAsyncSendCommandLongRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOurSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOurSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOurSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOurCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOurCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetOurCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTargetSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTargetSysId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTargetSysId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTargetCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTargetCompId(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTargetCompId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCommandInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCommandInt(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendCommandInt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCommandLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCommandLong(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SendCommandLong(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendMessageResponse>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendMessageResponse>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>* AsyncGetOurSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>* PrepareAsyncGetOurSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>* AsyncGetOurCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>* PrepareAsyncGetOurCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>* AsyncGetTargetSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>* PrepareAsyncGetTargetSysIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>* AsyncGetTargetCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>* PrepareAsyncGetTargetCompIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandIntResponse>* AsyncSendCommandIntRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandIntResponse>* PrepareAsyncSendCommandIntRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandLongResponse>* AsyncSendCommandLongRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::passthrough::SendCommandLongResponse>* PrepareAsyncSendCommandLongRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOurSysId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOurCompId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTargetSysId_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTargetCompId_;
    const ::grpc::internal::RpcMethod rpcmethod_SendCommandInt_;
    const ::grpc::internal::RpcMethod rpcmethod_SendCommandLong_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::mavsdk::rpc::passthrough::SendMessageRequest* request, ::mavsdk::rpc::passthrough::SendMessageResponse* response);
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetOurSysId(::grpc::ServerContext* context, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* request, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response);
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetOurCompId(::grpc::ServerContext* context, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* request, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response);
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetTargetSysId(::grpc::ServerContext* context, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response);
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status GetTargetCompId(::grpc::ServerContext* context, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* request, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response);
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status SendCommandInt(::grpc::ServerContext* context, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* request, ::mavsdk::rpc::passthrough::SendCommandIntResponse* response);
    //
    // Send Message.
    //
    // If the type is wrong, the result will be `WRONG_TYPE`.
    virtual ::grpc::Status SendCommandLong(::grpc::ServerContext* context, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* request, ::mavsdk::rpc::passthrough::SendCommandLongResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendMessageRequest* /*request*/, ::mavsdk::rpc::passthrough::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::mavsdk::rpc::passthrough::SendMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::passthrough::SendMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOurSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOurSysId() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOurSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOurSysId(::grpc::ServerContext* context, ::mavsdk::rpc::passthrough::GetOurSysIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::passthrough::GetOurSysIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOurCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOurCompId() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetOurCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOurCompId(::grpc::ServerContext* context, ::mavsdk::rpc::passthrough::GetOurCompIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::passthrough::GetOurCompIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTargetSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTargetSysId() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTargetSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTargetSysId(::grpc::ServerContext* context, ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTargetCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTargetCompId() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetTargetCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTargetCompId(::grpc::ServerContext* context, ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendCommandInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendCommandInt() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SendCommandInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandInt(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandIntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommandInt(::grpc::ServerContext* context, ::mavsdk::rpc::passthrough::SendCommandIntRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::passthrough::SendCommandIntResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendCommandLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendCommandLong() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SendCommandLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandLong(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandLongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommandLong(::grpc::ServerContext* context, ::mavsdk::rpc::passthrough::SendCommandLongRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::passthrough::SendCommandLongResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessage<WithAsyncMethod_GetOurSysId<WithAsyncMethod_GetOurCompId<WithAsyncMethod_GetTargetSysId<WithAsyncMethod_GetTargetCompId<WithAsyncMethod_SendCommandInt<WithAsyncMethod_SendCommandLong<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendMessage() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::SendMessageRequest, ::mavsdk::rpc::passthrough::SendMessageResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::passthrough::SendMessageRequest* request,
                 ::mavsdk::rpc::passthrough::SendMessageResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SendMessage(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::passthrough::SendMessageRequest, ::mavsdk::rpc::passthrough::SendMessageResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::SendMessageRequest, ::mavsdk::rpc::passthrough::SendMessageResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendMessageRequest* /*request*/, ::mavsdk::rpc::passthrough::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendMessageRequest* /*request*/, ::mavsdk::rpc::passthrough::SendMessageResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOurSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOurSysId() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetOurSysIdRequest, ::mavsdk::rpc::passthrough::GetOurSysIdResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* request,
                 ::mavsdk::rpc::passthrough::GetOurSysIdResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetOurSysId(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetOurSysId(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::passthrough::GetOurSysIdRequest, ::mavsdk::rpc::passthrough::GetOurSysIdResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetOurSysIdRequest, ::mavsdk::rpc::passthrough::GetOurSysIdResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOurSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOurSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOurCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOurCompId() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetOurCompIdRequest, ::mavsdk::rpc::passthrough::GetOurCompIdResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* request,
                 ::mavsdk::rpc::passthrough::GetOurCompIdResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetOurCompId(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetOurCompId(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::passthrough::GetOurCompIdRequest, ::mavsdk::rpc::passthrough::GetOurCompIdResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetOurCompIdRequest, ::mavsdk::rpc::passthrough::GetOurCompIdResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOurCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOurCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTargetSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTargetSysId() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetTargetSysIdRequest, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* request,
                 ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTargetSysId(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetTargetSysId(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::passthrough::GetTargetSysIdRequest, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetTargetSysIdRequest, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTargetSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTargetSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTargetCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTargetCompId() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetTargetCompIdRequest, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* request,
                 ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTargetCompId(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetTargetCompId(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::passthrough::GetTargetCompIdRequest, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::GetTargetCompIdRequest, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTargetCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTargetCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendCommandInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendCommandInt() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::SendCommandIntRequest, ::mavsdk::rpc::passthrough::SendCommandIntResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::passthrough::SendCommandIntRequest* request,
                 ::mavsdk::rpc::passthrough::SendCommandIntResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SendCommandInt(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SendCommandInt(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::passthrough::SendCommandIntRequest, ::mavsdk::rpc::passthrough::SendCommandIntResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::SendCommandIntRequest, ::mavsdk::rpc::passthrough::SendCommandIntResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendCommandInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandInt(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandIntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendCommandInt(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandIntResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendCommandLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendCommandLong() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::SendCommandLongRequest, ::mavsdk::rpc::passthrough::SendCommandLongResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::passthrough::SendCommandLongRequest* request,
                 ::mavsdk::rpc::passthrough::SendCommandLongResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SendCommandLong(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SendCommandLong(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::passthrough::SendCommandLongRequest, ::mavsdk::rpc::passthrough::SendCommandLongResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::mavsdk::rpc::passthrough::SendCommandLongRequest, ::mavsdk::rpc::passthrough::SendCommandLongResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendCommandLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandLong(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandLongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendCommandLong(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandLongResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SendMessage<ExperimentalWithCallbackMethod_GetOurSysId<ExperimentalWithCallbackMethod_GetOurCompId<ExperimentalWithCallbackMethod_GetTargetSysId<ExperimentalWithCallbackMethod_GetTargetCompId<ExperimentalWithCallbackMethod_SendCommandInt<ExperimentalWithCallbackMethod_SendCommandLong<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendMessageRequest* /*request*/, ::mavsdk::rpc::passthrough::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOurSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOurSysId() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOurSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOurCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOurCompId() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetOurCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTargetSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTargetSysId() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTargetSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTargetCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTargetCompId() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetTargetCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendCommandInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendCommandInt() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SendCommandInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandInt(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandIntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendCommandLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendCommandLong() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SendCommandLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandLong(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandLongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendMessageRequest* /*request*/, ::mavsdk::rpc::passthrough::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOurSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOurSysId() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOurSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOurSysId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOurCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOurCompId() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetOurCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOurCompId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTargetSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTargetSysId() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTargetSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTargetSysId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTargetCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTargetCompId() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetTargetCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTargetCompId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendCommandInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendCommandInt() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SendCommandInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandInt(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandIntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommandInt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendCommandLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendCommandLong() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SendCommandLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandLong(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandLongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCommandLong(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendMessage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendMessage(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendMessageRequest* /*request*/, ::mavsdk::rpc::passthrough::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendMessage(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOurSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOurSysId() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetOurSysId(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOurSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOurSysId(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOurCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOurCompId() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetOurCompId(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOurCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOurCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetOurCompId(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTargetSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTargetSysId() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTargetSysId(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTargetSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTargetSysId(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTargetCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTargetCompId() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTargetCompId(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTargetCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTargetCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTargetCompId(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendCommandInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendCommandInt() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendCommandInt(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SendCommandInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandInt(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandIntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendCommandInt(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendCommandLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendCommandLong() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SendCommandLong(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SendCommandLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCommandLong(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandLongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SendCommandLong(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::passthrough::SendMessageRequest, ::mavsdk::rpc::passthrough::SendMessageResponse>(std::bind(&WithStreamedUnaryMethod_SendMessage<BaseClass>::StreamedSendMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendMessageRequest* /*request*/, ::mavsdk::rpc::passthrough::SendMessageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::passthrough::SendMessageRequest,::mavsdk::rpc::passthrough::SendMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOurSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOurSysId() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::passthrough::GetOurSysIdRequest, ::mavsdk::rpc::passthrough::GetOurSysIdResponse>(std::bind(&WithStreamedUnaryMethod_GetOurSysId<BaseClass>::StreamedGetOurSysId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOurSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOurSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOurSysId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::passthrough::GetOurSysIdRequest,::mavsdk::rpc::passthrough::GetOurSysIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOurCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOurCompId() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::passthrough::GetOurCompIdRequest, ::mavsdk::rpc::passthrough::GetOurCompIdResponse>(std::bind(&WithStreamedUnaryMethod_GetOurCompId<BaseClass>::StreamedGetOurCompId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOurCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOurCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetOurCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetOurCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOurCompId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::passthrough::GetOurCompIdRequest,::mavsdk::rpc::passthrough::GetOurCompIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTargetSysId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTargetSysId() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::passthrough::GetTargetSysIdRequest, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse>(std::bind(&WithStreamedUnaryMethod_GetTargetSysId<BaseClass>::StreamedGetTargetSysId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTargetSysId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTargetSysId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetSysIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetSysIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTargetSysId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::passthrough::GetTargetSysIdRequest,::mavsdk::rpc::passthrough::GetTargetSysIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTargetCompId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTargetCompId() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::passthrough::GetTargetCompIdRequest, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse>(std::bind(&WithStreamedUnaryMethod_GetTargetCompId<BaseClass>::StreamedGetTargetCompId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTargetCompId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTargetCompId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::GetTargetCompIdRequest* /*request*/, ::mavsdk::rpc::passthrough::GetTargetCompIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTargetCompId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::passthrough::GetTargetCompIdRequest,::mavsdk::rpc::passthrough::GetTargetCompIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendCommandInt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendCommandInt() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::passthrough::SendCommandIntRequest, ::mavsdk::rpc::passthrough::SendCommandIntResponse>(std::bind(&WithStreamedUnaryMethod_SendCommandInt<BaseClass>::StreamedSendCommandInt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendCommandInt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendCommandInt(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandIntRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandIntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendCommandInt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::passthrough::SendCommandIntRequest,::mavsdk::rpc::passthrough::SendCommandIntResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendCommandLong : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendCommandLong() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::passthrough::SendCommandLongRequest, ::mavsdk::rpc::passthrough::SendCommandLongResponse>(std::bind(&WithStreamedUnaryMethod_SendCommandLong<BaseClass>::StreamedSendCommandLong, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendCommandLong() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendCommandLong(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::passthrough::SendCommandLongRequest* /*request*/, ::mavsdk::rpc::passthrough::SendCommandLongResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendCommandLong(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::passthrough::SendCommandLongRequest,::mavsdk::rpc::passthrough::SendCommandLongResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetOurSysId<WithStreamedUnaryMethod_GetOurCompId<WithStreamedUnaryMethod_GetTargetSysId<WithStreamedUnaryMethod_GetTargetCompId<WithStreamedUnaryMethod_SendCommandInt<WithStreamedUnaryMethod_SendCommandLong<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetOurSysId<WithStreamedUnaryMethod_GetOurCompId<WithStreamedUnaryMethod_GetTargetSysId<WithStreamedUnaryMethod_GetTargetCompId<WithStreamedUnaryMethod_SendCommandInt<WithStreamedUnaryMethod_SendCommandLong<Service > > > > > > > StreamedService;
};

}  // namespace passthrough
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_passthrough_2fpassthrough_2eproto__INCLUDED
