// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/core.proto

#include "core/core.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_core_2fcore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ConnectionState_core_2fcore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fcore_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PluginInfo_core_2fcore_2eproto;
namespace mavsdk {
namespace rpc {
namespace core {
class SubscribeConnectionStateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeConnectionStateRequest> _instance;
} _SubscribeConnectionStateRequest_default_instance_;
class ConnectionStateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionStateResponse> _instance;
} _ConnectionStateResponse_default_instance_;
class ListRunningPluginsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRunningPluginsRequest> _instance;
} _ListRunningPluginsRequest_default_instance_;
class ListRunningPluginsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRunningPluginsResponse> _instance;
} _ListRunningPluginsResponse_default_instance_;
class ConnectionStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectionState> _instance;
} _ConnectionState_default_instance_;
class PluginInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PluginInfo> _instance;
} _PluginInfo_default_instance_;
}  // namespace core
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsSubscribeConnectionStateRequest_core_2fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::core::_SubscribeConnectionStateRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::core::SubscribeConnectionStateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::core::SubscribeConnectionStateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeConnectionStateRequest_core_2fcore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeConnectionStateRequest_core_2fcore_2eproto}, {}};

static void InitDefaultsConnectionStateResponse_core_2fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::core::_ConnectionStateResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::core::ConnectionStateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::core::ConnectionStateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConnectionStateResponse_core_2fcore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConnectionStateResponse_core_2fcore_2eproto}, {
      &scc_info_ConnectionState_core_2fcore_2eproto.base,}};

static void InitDefaultsListRunningPluginsRequest_core_2fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::core::_ListRunningPluginsRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::core::ListRunningPluginsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::core::ListRunningPluginsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListRunningPluginsRequest_core_2fcore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListRunningPluginsRequest_core_2fcore_2eproto}, {}};

static void InitDefaultsListRunningPluginsResponse_core_2fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::core::_ListRunningPluginsResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::core::ListRunningPluginsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::core::ListRunningPluginsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListRunningPluginsResponse_core_2fcore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListRunningPluginsResponse_core_2fcore_2eproto}, {
      &scc_info_PluginInfo_core_2fcore_2eproto.base,}};

static void InitDefaultsConnectionState_core_2fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::core::_ConnectionState_default_instance_;
    new (ptr) ::mavsdk::rpc::core::ConnectionState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::core::ConnectionState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectionState_core_2fcore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectionState_core_2fcore_2eproto}, {}};

static void InitDefaultsPluginInfo_core_2fcore_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::core::_PluginInfo_default_instance_;
    new (ptr) ::mavsdk::rpc::core::PluginInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::core::PluginInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PluginInfo_core_2fcore_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPluginInfo_core_2fcore_2eproto}, {}};

void InitDefaults_core_2fcore_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeConnectionStateRequest_core_2fcore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectionStateResponse_core_2fcore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListRunningPluginsRequest_core_2fcore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListRunningPluginsResponse_core_2fcore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectionState_core_2fcore_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PluginInfo_core_2fcore_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_core_2fcore_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_core_2fcore_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_core_2fcore_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_core_2fcore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::SubscribeConnectionStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ConnectionStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ConnectionStateResponse, connection_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ListRunningPluginsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ListRunningPluginsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ListRunningPluginsResponse, plugin_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ConnectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ConnectionState, uuid_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::ConnectionState, is_connected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::PluginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::PluginInfo, name_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::PluginInfo, address_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::core::PluginInfo, port_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::core::SubscribeConnectionStateRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::core::ConnectionStateResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::core::ListRunningPluginsRequest)},
  { 16, -1, sizeof(::mavsdk::rpc::core::ListRunningPluginsResponse)},
  { 22, -1, sizeof(::mavsdk::rpc::core::ConnectionState)},
  { 29, -1, sizeof(::mavsdk::rpc::core::PluginInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::core::_SubscribeConnectionStateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::core::_ConnectionStateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::core::_ListRunningPluginsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::core::_ListRunningPluginsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::core::_ConnectionState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::core::_PluginInfo_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_core_2fcore_2eproto = {
  {}, AddDescriptors_core_2fcore_2eproto, "core/core.proto", schemas,
  file_default_instances, TableStruct_core_2fcore_2eproto::offsets,
  file_level_metadata_core_2fcore_2eproto, 6, file_level_enum_descriptors_core_2fcore_2eproto, file_level_service_descriptors_core_2fcore_2eproto,
};

const char descriptor_table_protodef_core_2fcore_2eproto[] =
  "\n\017core/core.proto\022\017mavsdk.rpc.core\"!\n\037Su"
  "bscribeConnectionStateRequest\"U\n\027Connect"
  "ionStateResponse\022:\n\020connection_state\030\001 \001"
  "(\0132 .mavsdk.rpc.core.ConnectionState\"\033\n\031"
  "ListRunningPluginsRequest\"N\n\032ListRunning"
  "PluginsResponse\0220\n\013plugin_info\030\001 \003(\0132\033.m"
  "avsdk.rpc.core.PluginInfo\"5\n\017ConnectionS"
  "tate\022\014\n\004uuid\030\001 \001(\004\022\024\n\014is_connected\030\002 \001(\010"
  "\"9\n\nPluginInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007address\030"
  "\002 \001(\t\022\014\n\004port\030\003 \001(\0052\372\001\n\013CoreService\022z\n\030S"
  "ubscribeConnectionState\0220.mavsdk.rpc.cor"
  "e.SubscribeConnectionStateRequest\032(.mavs"
  "dk.rpc.core.ConnectionStateResponse\"\0000\001\022"
  "o\n\022ListRunningPlugins\022*.mavsdk.rpc.core."
  "ListRunningPluginsRequest\032+.mavsdk.rpc.c"
  "ore.ListRunningPluginsResponse\"\000B\033\n\016io.m"
  "avsdk.coreB\tCoreProtob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_core_2fcore_2eproto = {
  false, InitDefaults_core_2fcore_2eproto, 
  descriptor_table_protodef_core_2fcore_2eproto,
  "core/core.proto", &assign_descriptors_table_core_2fcore_2eproto, 669,
};

void AddDescriptors_core_2fcore_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_core_2fcore_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2fcore_2eproto = []() { AddDescriptors_core_2fcore_2eproto(); return true; }();
namespace mavsdk {
namespace rpc {
namespace core {

// ===================================================================

void SubscribeConnectionStateRequest::InitAsDefaultInstance() {
}
class SubscribeConnectionStateRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeConnectionStateRequest::SubscribeConnectionStateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.core.SubscribeConnectionStateRequest)
}
SubscribeConnectionStateRequest::SubscribeConnectionStateRequest(const SubscribeConnectionStateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.core.SubscribeConnectionStateRequest)
}

void SubscribeConnectionStateRequest::SharedCtor() {
}

SubscribeConnectionStateRequest::~SubscribeConnectionStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  SharedDtor();
}

void SubscribeConnectionStateRequest::SharedDtor() {
}

void SubscribeConnectionStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeConnectionStateRequest& SubscribeConnectionStateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeConnectionStateRequest_core_2fcore_2eproto.base);
  return *internal_default_instance();
}


void SubscribeConnectionStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeConnectionStateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeConnectionStateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeConnectionStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeConnectionStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.core.SubscribeConnectionStateRequest)
}

::google::protobuf::uint8* SubscribeConnectionStateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  return target;
}

size_t SubscribeConnectionStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeConnectionStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeConnectionStateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeConnectionStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.core.SubscribeConnectionStateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.core.SubscribeConnectionStateRequest)
    MergeFrom(*source);
  }
}

void SubscribeConnectionStateRequest::MergeFrom(const SubscribeConnectionStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeConnectionStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeConnectionStateRequest::CopyFrom(const SubscribeConnectionStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.core.SubscribeConnectionStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeConnectionStateRequest::IsInitialized() const {
  return true;
}

void SubscribeConnectionStateRequest::Swap(SubscribeConnectionStateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeConnectionStateRequest::InternalSwap(SubscribeConnectionStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeConnectionStateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2fcore_2eproto);
  return ::file_level_metadata_core_2fcore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConnectionStateResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::core::_ConnectionStateResponse_default_instance_._instance.get_mutable()->connection_state_ = const_cast< ::mavsdk::rpc::core::ConnectionState*>(
      ::mavsdk::rpc::core::ConnectionState::internal_default_instance());
}
class ConnectionStateResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::core::ConnectionState& connection_state(const ConnectionStateResponse* msg);
};

const ::mavsdk::rpc::core::ConnectionState&
ConnectionStateResponse::HasBitSetters::connection_state(const ConnectionStateResponse* msg) {
  return *msg->connection_state_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionStateResponse::kConnectionStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionStateResponse::ConnectionStateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.core.ConnectionStateResponse)
}
ConnectionStateResponse::ConnectionStateResponse(const ConnectionStateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_connection_state()) {
    connection_state_ = new ::mavsdk::rpc::core::ConnectionState(*from.connection_state_);
  } else {
    connection_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.core.ConnectionStateResponse)
}

void ConnectionStateResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConnectionStateResponse_core_2fcore_2eproto.base);
  connection_state_ = nullptr;
}

ConnectionStateResponse::~ConnectionStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.core.ConnectionStateResponse)
  SharedDtor();
}

void ConnectionStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete connection_state_;
}

void ConnectionStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionStateResponse& ConnectionStateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConnectionStateResponse_core_2fcore_2eproto.base);
  return *internal_default_instance();
}


void ConnectionStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.core.ConnectionStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && connection_state_ != nullptr) {
    delete connection_state_;
  }
  connection_state_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectionStateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConnectionStateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.core.ConnectionState connection_state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::core::ConnectionState::_InternalParse;
        object = msg->mutable_connection_state();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectionStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.core.ConnectionStateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.core.ConnectionState connection_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.core.ConnectionStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.core.ConnectionStateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectionStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.core.ConnectionStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.core.ConnectionState connection_state = 1;
  if (this->has_connection_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::connection_state(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.core.ConnectionStateResponse)
}

::google::protobuf::uint8* ConnectionStateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.core.ConnectionStateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.core.ConnectionState connection_state = 1;
  if (this->has_connection_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::connection_state(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.core.ConnectionStateResponse)
  return target;
}

size_t ConnectionStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.core.ConnectionStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.core.ConnectionState connection_state = 1;
  if (this->has_connection_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connection_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.core.ConnectionStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionStateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ConnectionStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.core.ConnectionStateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.core.ConnectionStateResponse)
    MergeFrom(*source);
  }
}

void ConnectionStateResponse::MergeFrom(const ConnectionStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.core.ConnectionStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_state()) {
    mutable_connection_state()->::mavsdk::rpc::core::ConnectionState::MergeFrom(from.connection_state());
  }
}

void ConnectionStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.core.ConnectionStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionStateResponse::CopyFrom(const ConnectionStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.core.ConnectionStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionStateResponse::IsInitialized() const {
  return true;
}

void ConnectionStateResponse::Swap(ConnectionStateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionStateResponse::InternalSwap(ConnectionStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(connection_state_, other->connection_state_);
}

::google::protobuf::Metadata ConnectionStateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2fcore_2eproto);
  return ::file_level_metadata_core_2fcore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListRunningPluginsRequest::InitAsDefaultInstance() {
}
class ListRunningPluginsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRunningPluginsRequest::ListRunningPluginsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.core.ListRunningPluginsRequest)
}
ListRunningPluginsRequest::ListRunningPluginsRequest(const ListRunningPluginsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.core.ListRunningPluginsRequest)
}

void ListRunningPluginsRequest::SharedCtor() {
}

ListRunningPluginsRequest::~ListRunningPluginsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.core.ListRunningPluginsRequest)
  SharedDtor();
}

void ListRunningPluginsRequest::SharedDtor() {
}

void ListRunningPluginsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRunningPluginsRequest& ListRunningPluginsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListRunningPluginsRequest_core_2fcore_2eproto.base);
  return *internal_default_instance();
}


void ListRunningPluginsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListRunningPluginsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListRunningPluginsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListRunningPluginsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.core.ListRunningPluginsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.core.ListRunningPluginsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListRunningPluginsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.core.ListRunningPluginsRequest)
}

::google::protobuf::uint8* ListRunningPluginsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.core.ListRunningPluginsRequest)
  return target;
}

size_t ListRunningPluginsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRunningPluginsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRunningPluginsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListRunningPluginsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.core.ListRunningPluginsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.core.ListRunningPluginsRequest)
    MergeFrom(*source);
  }
}

void ListRunningPluginsRequest::MergeFrom(const ListRunningPluginsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListRunningPluginsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRunningPluginsRequest::CopyFrom(const ListRunningPluginsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.core.ListRunningPluginsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRunningPluginsRequest::IsInitialized() const {
  return true;
}

void ListRunningPluginsRequest::Swap(ListRunningPluginsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRunningPluginsRequest::InternalSwap(ListRunningPluginsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListRunningPluginsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2fcore_2eproto);
  return ::file_level_metadata_core_2fcore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListRunningPluginsResponse::InitAsDefaultInstance() {
}
class ListRunningPluginsResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRunningPluginsResponse::kPluginInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRunningPluginsResponse::ListRunningPluginsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.core.ListRunningPluginsResponse)
}
ListRunningPluginsResponse::ListRunningPluginsResponse(const ListRunningPluginsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      plugin_info_(from.plugin_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.core.ListRunningPluginsResponse)
}

void ListRunningPluginsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListRunningPluginsResponse_core_2fcore_2eproto.base);
}

ListRunningPluginsResponse::~ListRunningPluginsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.core.ListRunningPluginsResponse)
  SharedDtor();
}

void ListRunningPluginsResponse::SharedDtor() {
}

void ListRunningPluginsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListRunningPluginsResponse& ListRunningPluginsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListRunningPluginsResponse_core_2fcore_2eproto.base);
  return *internal_default_instance();
}


void ListRunningPluginsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListRunningPluginsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListRunningPluginsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::mavsdk::rpc::core::PluginInfo::_InternalParse;
          object = msg->add_plugin_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListRunningPluginsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_plugin_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.core.ListRunningPluginsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.core.ListRunningPluginsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListRunningPluginsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->plugin_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.core.ListRunningPluginsResponse)
}

::google::protobuf::uint8* ListRunningPluginsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->plugin_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->plugin_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.core.ListRunningPluginsResponse)
  return target;
}

size_t ListRunningPluginsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->plugin_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->plugin_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRunningPluginsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRunningPluginsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListRunningPluginsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.core.ListRunningPluginsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.core.ListRunningPluginsResponse)
    MergeFrom(*source);
  }
}

void ListRunningPluginsResponse::MergeFrom(const ListRunningPluginsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plugin_info_.MergeFrom(from.plugin_info_);
}

void ListRunningPluginsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRunningPluginsResponse::CopyFrom(const ListRunningPluginsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.core.ListRunningPluginsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRunningPluginsResponse::IsInitialized() const {
  return true;
}

void ListRunningPluginsResponse::Swap(ListRunningPluginsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRunningPluginsResponse::InternalSwap(ListRunningPluginsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&plugin_info_)->InternalSwap(CastToBase(&other->plugin_info_));
}

::google::protobuf::Metadata ListRunningPluginsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2fcore_2eproto);
  return ::file_level_metadata_core_2fcore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConnectionState::InitAsDefaultInstance() {
}
class ConnectionState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionState::kUuidFieldNumber;
const int ConnectionState::kIsConnectedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionState::ConnectionState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.core.ConnectionState)
}
ConnectionState::ConnectionState(const ConnectionState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_connected_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(is_connected_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.core.ConnectionState)
}

void ConnectionState::SharedCtor() {
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_connected_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(is_connected_));
}

ConnectionState::~ConnectionState() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.core.ConnectionState)
  SharedDtor();
}

void ConnectionState::SharedDtor() {
}

void ConnectionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionState& ConnectionState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConnectionState_core_2fcore_2eproto.base);
  return *internal_default_instance();
}


void ConnectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.core.ConnectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_connected_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(is_connected_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectionState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConnectionState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 uuid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_uuid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_connected = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_connected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectionState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.core.ConnectionState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 uuid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_connected = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.core.ConnectionState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.core.ConnectionState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectionState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.core.ConnectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uuid = 1;
  if (this->uuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // bool is_connected = 2;
  if (this->is_connected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_connected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.core.ConnectionState)
}

::google::protobuf::uint8* ConnectionState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.core.ConnectionState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uuid = 1;
  if (this->uuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // bool is_connected = 2;
  if (this->is_connected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_connected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.core.ConnectionState)
  return target;
}

size_t ConnectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.core.ConnectionState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 uuid = 1;
  if (this->uuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uuid());
  }

  // bool is_connected = 2;
  if (this->is_connected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.core.ConnectionState)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionState* source =
      ::google::protobuf::DynamicCastToGenerated<ConnectionState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.core.ConnectionState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.core.ConnectionState)
    MergeFrom(*source);
  }
}

void ConnectionState::MergeFrom(const ConnectionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.core.ConnectionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid() != 0) {
    set_uuid(from.uuid());
  }
  if (from.is_connected() != 0) {
    set_is_connected(from.is_connected());
  }
}

void ConnectionState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.core.ConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionState::CopyFrom(const ConnectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.core.ConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionState::IsInitialized() const {
  return true;
}

void ConnectionState::Swap(ConnectionState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionState::InternalSwap(ConnectionState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uuid_, other->uuid_);
  swap(is_connected_, other->is_connected_);
}

::google::protobuf::Metadata ConnectionState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2fcore_2eproto);
  return ::file_level_metadata_core_2fcore_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PluginInfo::InitAsDefaultInstance() {
}
class PluginInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PluginInfo::kNameFieldNumber;
const int PluginInfo::kAddressFieldNumber;
const int PluginInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PluginInfo::PluginInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.core.PluginInfo)
}
PluginInfo::PluginInfo(const PluginInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.core.PluginInfo)
}

void PluginInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PluginInfo_core_2fcore_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

PluginInfo::~PluginInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.core.PluginInfo)
  SharedDtor();
}

void PluginInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PluginInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PluginInfo& PluginInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PluginInfo_core_2fcore_2eproto.base);
  return *internal_default_instance();
}


void PluginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.core.PluginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PluginInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PluginInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.core.PluginInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string address = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.core.PluginInfo.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PluginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.core.PluginInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.core.PluginInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.core.PluginInfo.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.core.PluginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.core.PluginInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PluginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.core.PluginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.core.PluginInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.core.PluginInfo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.core.PluginInfo)
}

::google::protobuf::uint8* PluginInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.core.PluginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.core.PluginInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.core.PluginInfo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.core.PluginInfo)
  return target;
}

size_t PluginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.core.PluginInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PluginInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.core.PluginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PluginInfo* source =
      ::google::protobuf::DynamicCastToGenerated<PluginInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.core.PluginInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.core.PluginInfo)
    MergeFrom(*source);
  }
}

void PluginInfo::MergeFrom(const PluginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.core.PluginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void PluginInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.core.PluginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PluginInfo::CopyFrom(const PluginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.core.PluginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PluginInfo::IsInitialized() const {
  return true;
}

void PluginInfo::Swap(PluginInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PluginInfo::InternalSwap(PluginInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::google::protobuf::Metadata PluginInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_core_2fcore_2eproto);
  return ::file_level_metadata_core_2fcore_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::core::SubscribeConnectionStateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::core::SubscribeConnectionStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::core::SubscribeConnectionStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::core::ConnectionStateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::core::ConnectionStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::core::ConnectionStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::core::ListRunningPluginsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::core::ListRunningPluginsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::core::ListRunningPluginsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::core::ListRunningPluginsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::core::ListRunningPluginsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::core::ListRunningPluginsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::core::ConnectionState* Arena::CreateMaybeMessage< ::mavsdk::rpc::core::ConnectionState >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::core::ConnectionState >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::core::PluginInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::core::PluginInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::core::PluginInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
