// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration/calibration.proto

#include "calibration/calibration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_calibration_2fcalibration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CalibrationResult_calibration_2fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_calibration_2fcalibration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProgressData_calibration_2fcalibration_2eproto;
namespace mavsdk {
namespace rpc {
namespace calibration {
class SubscribeCalibrateGyroRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeCalibrateGyroRequest> _instance;
} _SubscribeCalibrateGyroRequest_default_instance_;
class CalibrateGyroResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalibrateGyroResponse> _instance;
} _CalibrateGyroResponse_default_instance_;
class SubscribeCalibrateAccelerometerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeCalibrateAccelerometerRequest> _instance;
} _SubscribeCalibrateAccelerometerRequest_default_instance_;
class CalibrateAccelerometerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalibrateAccelerometerResponse> _instance;
} _CalibrateAccelerometerResponse_default_instance_;
class SubscribeCalibrateMagnetometerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeCalibrateMagnetometerRequest> _instance;
} _SubscribeCalibrateMagnetometerRequest_default_instance_;
class CalibrateMagnetometerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalibrateMagnetometerResponse> _instance;
} _CalibrateMagnetometerResponse_default_instance_;
class SubscribeCalibrateGimbalAccelerometerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubscribeCalibrateGimbalAccelerometerRequest> _instance;
} _SubscribeCalibrateGimbalAccelerometerRequest_default_instance_;
class CalibrateGimbalAccelerometerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalibrateGimbalAccelerometerResponse> _instance;
} _CalibrateGimbalAccelerometerResponse_default_instance_;
class CancelRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelRequest> _instance;
} _CancelRequest_default_instance_;
class CancelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelResponse> _instance;
} _CancelResponse_default_instance_;
class CalibrationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalibrationResult> _instance;
} _CalibrationResult_default_instance_;
class ProgressDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProgressData> _instance;
} _ProgressData_default_instance_;
}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsSubscribeCalibrateGyroRequest_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_SubscribeCalibrateGyroRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeCalibrateGyroRequest_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeCalibrateGyroRequest_calibration_2fcalibration_2eproto}, {}};

static void InitDefaultsCalibrateGyroResponse_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_CalibrateGyroResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::CalibrateGyroResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::CalibrateGyroResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CalibrateGyroResponse_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCalibrateGyroResponse_calibration_2fcalibration_2eproto}, {
      &scc_info_CalibrationResult_calibration_2fcalibration_2eproto.base,
      &scc_info_ProgressData_calibration_2fcalibration_2eproto.base,}};

static void InitDefaultsSubscribeCalibrateAccelerometerRequest_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_SubscribeCalibrateAccelerometerRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeCalibrateAccelerometerRequest_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeCalibrateAccelerometerRequest_calibration_2fcalibration_2eproto}, {}};

static void InitDefaultsCalibrateAccelerometerResponse_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_CalibrateAccelerometerResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::CalibrateAccelerometerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::CalibrateAccelerometerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CalibrateAccelerometerResponse_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCalibrateAccelerometerResponse_calibration_2fcalibration_2eproto}, {
      &scc_info_CalibrationResult_calibration_2fcalibration_2eproto.base,
      &scc_info_ProgressData_calibration_2fcalibration_2eproto.base,}};

static void InitDefaultsSubscribeCalibrateMagnetometerRequest_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_SubscribeCalibrateMagnetometerRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeCalibrateMagnetometerRequest_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeCalibrateMagnetometerRequest_calibration_2fcalibration_2eproto}, {}};

static void InitDefaultsCalibrateMagnetometerResponse_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_CalibrateMagnetometerResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::CalibrateMagnetometerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::CalibrateMagnetometerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CalibrateMagnetometerResponse_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCalibrateMagnetometerResponse_calibration_2fcalibration_2eproto}, {
      &scc_info_CalibrationResult_calibration_2fcalibration_2eproto.base,
      &scc_info_ProgressData_calibration_2fcalibration_2eproto.base,}};

static void InitDefaultsSubscribeCalibrateGimbalAccelerometerRequest_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_SubscribeCalibrateGimbalAccelerometerRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubscribeCalibrateGimbalAccelerometerRequest_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscribeCalibrateGimbalAccelerometerRequest_calibration_2fcalibration_2eproto}, {}};

static void InitDefaultsCalibrateGimbalAccelerometerResponse_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_CalibrateGimbalAccelerometerResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CalibrateGimbalAccelerometerResponse_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCalibrateGimbalAccelerometerResponse_calibration_2fcalibration_2eproto}, {
      &scc_info_CalibrationResult_calibration_2fcalibration_2eproto.base,
      &scc_info_ProgressData_calibration_2fcalibration_2eproto.base,}};

static void InitDefaultsCancelRequest_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_CancelRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::CancelRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::CancelRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelRequest_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelRequest_calibration_2fcalibration_2eproto}, {}};

static void InitDefaultsCancelResponse_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_CancelResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::CancelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::CancelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CancelResponse_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCancelResponse_calibration_2fcalibration_2eproto}, {}};

static void InitDefaultsCalibrationResult_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_CalibrationResult_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::CalibrationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::CalibrationResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CalibrationResult_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCalibrationResult_calibration_2fcalibration_2eproto}, {}};

static void InitDefaultsProgressData_calibration_2fcalibration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::calibration::_ProgressData_default_instance_;
    new (ptr) ::mavsdk::rpc::calibration::ProgressData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::calibration::ProgressData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProgressData_calibration_2fcalibration_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProgressData_calibration_2fcalibration_2eproto}, {}};

void InitDefaults_calibration_2fcalibration_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeCalibrateGyroRequest_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CalibrateGyroResponse_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeCalibrateAccelerometerRequest_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CalibrateAccelerometerResponse_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeCalibrateMagnetometerRequest_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CalibrateMagnetometerResponse_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SubscribeCalibrateGimbalAccelerometerRequest_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CalibrateGimbalAccelerometerResponse_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelRequest_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelResponse_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CalibrationResult_calibration_2fcalibration_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProgressData_calibration_2fcalibration_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_calibration_2fcalibration_2eproto[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_calibration_2fcalibration_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_calibration_2fcalibration_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_calibration_2fcalibration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGyroResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGyroResponse, calibration_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGyroResponse, progress_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse, calibration_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse, progress_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse, calibration_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse, progress_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse, calibration_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse, progress_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrationResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::CalibrationResult, result_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, has_progress_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, progress_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, has_status_text_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::calibration::ProgressData, status_text_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::calibration::CalibrateGyroResponse)},
  { 12, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest)},
  { 17, -1, sizeof(::mavsdk::rpc::calibration::CalibrateAccelerometerResponse)},
  { 24, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest)},
  { 29, -1, sizeof(::mavsdk::rpc::calibration::CalibrateMagnetometerResponse)},
  { 36, -1, sizeof(::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest)},
  { 41, -1, sizeof(::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse)},
  { 48, -1, sizeof(::mavsdk::rpc::calibration::CancelRequest)},
  { 53, -1, sizeof(::mavsdk::rpc::calibration::CancelResponse)},
  { 58, -1, sizeof(::mavsdk::rpc::calibration::CalibrationResult)},
  { 65, -1, sizeof(::mavsdk::rpc::calibration::ProgressData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_SubscribeCalibrateGyroRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_CalibrateGyroResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_SubscribeCalibrateAccelerometerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_CalibrateAccelerometerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_SubscribeCalibrateMagnetometerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_CalibrateMagnetometerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_SubscribeCalibrateGimbalAccelerometerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_CalibrateGimbalAccelerometerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_CancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_CancelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_CalibrationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mavsdk::rpc::calibration::_ProgressData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_calibration_2fcalibration_2eproto = {
  {}, AddDescriptors_calibration_2fcalibration_2eproto, "calibration/calibration.proto", schemas,
  file_default_instances, TableStruct_calibration_2fcalibration_2eproto::offsets,
  file_level_metadata_calibration_2fcalibration_2eproto, 12, file_level_enum_descriptors_calibration_2fcalibration_2eproto, file_level_service_descriptors_calibration_2fcalibration_2eproto,
};

const char descriptor_table_protodef_calibration_2fcalibration_2eproto[] =
  "\n\035calibration/calibration.proto\022\026mavsdk."
  "rpc.calibration\"\037\n\035SubscribeCalibrateGyr"
  "oRequest\"\233\001\n\025CalibrateGyroResponse\022E\n\022ca"
  "libration_result\030\001 \001(\0132).mavsdk.rpc.cali"
  "bration.CalibrationResult\022;\n\rprogress_da"
  "ta\030\002 \001(\0132$.mavsdk.rpc.calibration.Progre"
  "ssData\"(\n&SubscribeCalibrateAcceleromete"
  "rRequest\"\244\001\n\036CalibrateAccelerometerRespo"
  "nse\022E\n\022calibration_result\030\001 \001(\0132).mavsdk"
  ".rpc.calibration.CalibrationResult\022;\n\rpr"
  "ogress_data\030\002 \001(\0132$.mavsdk.rpc.calibrati"
  "on.ProgressData\"\'\n%SubscribeCalibrateMag"
  "netometerRequest\"\243\001\n\035CalibrateMagnetomet"
  "erResponse\022E\n\022calibration_result\030\001 \001(\0132)"
  ".mavsdk.rpc.calibration.CalibrationResul"
  "t\022;\n\rprogress_data\030\002 \001(\0132$.mavsdk.rpc.ca"
  "libration.ProgressData\".\n,SubscribeCalib"
  "rateGimbalAccelerometerRequest\"\252\001\n$Calib"
  "rateGimbalAccelerometerResponse\022E\n\022calib"
  "ration_result\030\001 \001(\0132).mavsdk.rpc.calibra"
  "tion.CalibrationResult\022;\n\rprogress_data\030"
  "\002 \001(\0132$.mavsdk.rpc.calibration.ProgressD"
  "ata\"\017\n\rCancelRequest\"\020\n\016CancelResponse\"\233"
  "\002\n\021CalibrationResult\022@\n\006result\030\001 \001(\01620.m"
  "avsdk.rpc.calibration.CalibrationResult."
  "Result\022\022\n\nresult_str\030\002 \001(\t\"\257\001\n\006Result\022\013\n"
  "\007UNKNOWN\020\000\022\013\n\007SUCCESS\020\001\022\017\n\013IN_PROGRESS\020\002"
  "\022\017\n\013INSTRUCTION\020\003\022\n\n\006FAILED\020\004\022\r\n\tNO_SYST"
  "EM\020\005\022\024\n\020CONNECTION_ERROR\020\006\022\010\n\004BUSY\020\007\022\022\n\016"
  "COMMAND_DENIED\020\010\022\013\n\007TIMEOUT\020\t\022\r\n\tCANCELL"
  "ED\020\n\"d\n\014ProgressData\022\024\n\014has_progress\030\001 \001"
  "(\010\022\020\n\010progress\030\002 \001(\002\022\027\n\017has_status_text\030"
  "\003 \001(\010\022\023\n\013status_text\030\004 \001(\t2\343\005\n\022Calibrati"
  "onService\022\202\001\n\026SubscribeCalibrateGyro\0225.m"
  "avsdk.rpc.calibration.SubscribeCalibrate"
  "GyroRequest\032-.mavsdk.rpc.calibration.Cal"
  "ibrateGyroResponse\"\0000\001\022\235\001\n\037SubscribeCali"
  "brateAccelerometer\022>.mavsdk.rpc.calibrat"
  "ion.SubscribeCalibrateAccelerometerReque"
  "st\0326.mavsdk.rpc.calibration.CalibrateAcc"
  "elerometerResponse\"\0000\001\022\232\001\n\036SubscribeCali"
  "brateMagnetometer\022=.mavsdk.rpc.calibrati"
  "on.SubscribeCalibrateMagnetometerRequest"
  "\0325.mavsdk.rpc.calibration.CalibrateMagne"
  "tometerResponse\"\0000\001\022\257\001\n%SubscribeCalibra"
  "teGimbalAccelerometer\022D.mavsdk.rpc.calib"
  "ration.SubscribeCalibrateGimbalAccelerom"
  "eterRequest\032<.mavsdk.rpc.calibration.Cal"
  "ibrateGimbalAccelerometerResponse\"\0000\001\022Y\n"
  "\006Cancel\022%.mavsdk.rpc.calibration.CancelR"
  "equest\032&.mavsdk.rpc.calibration.CancelRe"
  "sponse\"\000B)\n\025io.mavsdk.calibrationB\020Calib"
  "rationProtob\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_calibration_2fcalibration_2eproto = {
  false, InitDefaults_calibration_2fcalibration_2eproto, 
  descriptor_table_protodef_calibration_2fcalibration_2eproto,
  "calibration/calibration.proto", &assign_descriptors_table_calibration_2fcalibration_2eproto, 2099,
};

void AddDescriptors_calibration_2fcalibration_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_calibration_2fcalibration_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_calibration_2fcalibration_2eproto = []() { AddDescriptors_calibration_2fcalibration_2eproto(); return true; }();
namespace mavsdk {
namespace rpc {
namespace calibration {
const ::google::protobuf::EnumDescriptor* CalibrationResult_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_calibration_2fcalibration_2eproto);
  return file_level_enum_descriptors_calibration_2fcalibration_2eproto[0];
}
bool CalibrationResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CalibrationResult_Result CalibrationResult::UNKNOWN;
const CalibrationResult_Result CalibrationResult::SUCCESS;
const CalibrationResult_Result CalibrationResult::IN_PROGRESS;
const CalibrationResult_Result CalibrationResult::INSTRUCTION;
const CalibrationResult_Result CalibrationResult::FAILED;
const CalibrationResult_Result CalibrationResult::NO_SYSTEM;
const CalibrationResult_Result CalibrationResult::CONNECTION_ERROR;
const CalibrationResult_Result CalibrationResult::BUSY;
const CalibrationResult_Result CalibrationResult::COMMAND_DENIED;
const CalibrationResult_Result CalibrationResult::TIMEOUT;
const CalibrationResult_Result CalibrationResult::CANCELLED;
const CalibrationResult_Result CalibrationResult::Result_MIN;
const CalibrationResult_Result CalibrationResult::Result_MAX;
const int CalibrationResult::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SubscribeCalibrateGyroRequest::InitAsDefaultInstance() {
}
class SubscribeCalibrateGyroRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeCalibrateGyroRequest::SubscribeCalibrateGyroRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
}
SubscribeCalibrateGyroRequest::SubscribeCalibrateGyroRequest(const SubscribeCalibrateGyroRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
}

void SubscribeCalibrateGyroRequest::SharedCtor() {
}

SubscribeCalibrateGyroRequest::~SubscribeCalibrateGyroRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  SharedDtor();
}

void SubscribeCalibrateGyroRequest::SharedDtor() {
}

void SubscribeCalibrateGyroRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCalibrateGyroRequest& SubscribeCalibrateGyroRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeCalibrateGyroRequest_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCalibrateGyroRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeCalibrateGyroRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeCalibrateGyroRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeCalibrateGyroRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeCalibrateGyroRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
}

::google::protobuf::uint8* SubscribeCalibrateGyroRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  return target;
}

size_t SubscribeCalibrateGyroRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCalibrateGyroRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCalibrateGyroRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeCalibrateGyroRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
    MergeFrom(*source);
  }
}

void SubscribeCalibrateGyroRequest::MergeFrom(const SubscribeCalibrateGyroRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCalibrateGyroRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCalibrateGyroRequest::CopyFrom(const SubscribeCalibrateGyroRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGyroRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCalibrateGyroRequest::IsInitialized() const {
  return true;
}

void SubscribeCalibrateGyroRequest::Swap(SubscribeCalibrateGyroRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeCalibrateGyroRequest::InternalSwap(SubscribeCalibrateGyroRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeCalibrateGyroRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CalibrateGyroResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::calibration::_CalibrateGyroResponse_default_instance_._instance.get_mutable()->calibration_result_ = const_cast< ::mavsdk::rpc::calibration::CalibrationResult*>(
      ::mavsdk::rpc::calibration::CalibrationResult::internal_default_instance());
  ::mavsdk::rpc::calibration::_CalibrateGyroResponse_default_instance_._instance.get_mutable()->progress_data_ = const_cast< ::mavsdk::rpc::calibration::ProgressData*>(
      ::mavsdk::rpc::calibration::ProgressData::internal_default_instance());
}
class CalibrateGyroResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result(const CalibrateGyroResponse* msg);
  static const ::mavsdk::rpc::calibration::ProgressData& progress_data(const CalibrateGyroResponse* msg);
};

const ::mavsdk::rpc::calibration::CalibrationResult&
CalibrateGyroResponse::HasBitSetters::calibration_result(const CalibrateGyroResponse* msg) {
  return *msg->calibration_result_;
}
const ::mavsdk::rpc::calibration::ProgressData&
CalibrateGyroResponse::HasBitSetters::progress_data(const CalibrateGyroResponse* msg) {
  return *msg->progress_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrateGyroResponse::kCalibrationResultFieldNumber;
const int CalibrateGyroResponse::kProgressDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrateGyroResponse::CalibrateGyroResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.CalibrateGyroResponse)
}
CalibrateGyroResponse::CalibrateGyroResponse(const CalibrateGyroResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calibration_result()) {
    calibration_result_ = new ::mavsdk::rpc::calibration::CalibrationResult(*from.calibration_result_);
  } else {
    calibration_result_ = nullptr;
  }
  if (from.has_progress_data()) {
    progress_data_ = new ::mavsdk::rpc::calibration::ProgressData(*from.progress_data_);
  } else {
    progress_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateGyroResponse)
}

void CalibrateGyroResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CalibrateGyroResponse_calibration_2fcalibration_2eproto.base);
  ::memset(&calibration_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_data_) -
      reinterpret_cast<char*>(&calibration_result_)) + sizeof(progress_data_));
}

CalibrateGyroResponse::~CalibrateGyroResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateGyroResponse)
  SharedDtor();
}

void CalibrateGyroResponse::SharedDtor() {
  if (this != internal_default_instance()) delete calibration_result_;
  if (this != internal_default_instance()) delete progress_data_;
}

void CalibrateGyroResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrateGyroResponse& CalibrateGyroResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CalibrateGyroResponse_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CalibrateGyroResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrateGyroResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CalibrateGyroResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::CalibrationResult::_InternalParse;
        object = msg->mutable_calibration_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::ProgressData::_InternalParse;
        object = msg->mutable_progress_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrateGyroResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_progress_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.CalibrateGyroResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.CalibrateGyroResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrateGyroResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::calibration_result(this), output);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::progress_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.CalibrateGyroResponse)
}

::google::protobuf::uint8* CalibrateGyroResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::calibration_result(this), target);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::progress_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateGyroResponse)
  return target;
}

size_t CalibrateGyroResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *calibration_result_);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *progress_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrateGyroResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrateGyroResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CalibrateGyroResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.CalibrateGyroResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.CalibrateGyroResponse)
    MergeFrom(*source);
  }
}

void CalibrateGyroResponse::MergeFrom(const CalibrateGyroResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calibration_result()) {
    mutable_calibration_result()->::mavsdk::rpc::calibration::CalibrationResult::MergeFrom(from.calibration_result());
  }
  if (from.has_progress_data()) {
    mutable_progress_data()->::mavsdk::rpc::calibration::ProgressData::MergeFrom(from.progress_data());
  }
}

void CalibrateGyroResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrateGyroResponse::CopyFrom(const CalibrateGyroResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateGyroResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrateGyroResponse::IsInitialized() const {
  return true;
}

void CalibrateGyroResponse::Swap(CalibrateGyroResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrateGyroResponse::InternalSwap(CalibrateGyroResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(calibration_result_, other->calibration_result_);
  swap(progress_data_, other->progress_data_);
}

::google::protobuf::Metadata CalibrateGyroResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeCalibrateAccelerometerRequest::InitAsDefaultInstance() {
}
class SubscribeCalibrateAccelerometerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeCalibrateAccelerometerRequest::SubscribeCalibrateAccelerometerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
}
SubscribeCalibrateAccelerometerRequest::SubscribeCalibrateAccelerometerRequest(const SubscribeCalibrateAccelerometerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
}

void SubscribeCalibrateAccelerometerRequest::SharedCtor() {
}

SubscribeCalibrateAccelerometerRequest::~SubscribeCalibrateAccelerometerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  SharedDtor();
}

void SubscribeCalibrateAccelerometerRequest::SharedDtor() {
}

void SubscribeCalibrateAccelerometerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCalibrateAccelerometerRequest& SubscribeCalibrateAccelerometerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeCalibrateAccelerometerRequest_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCalibrateAccelerometerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeCalibrateAccelerometerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeCalibrateAccelerometerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeCalibrateAccelerometerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeCalibrateAccelerometerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
}

::google::protobuf::uint8* SubscribeCalibrateAccelerometerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  return target;
}

size_t SubscribeCalibrateAccelerometerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCalibrateAccelerometerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCalibrateAccelerometerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeCalibrateAccelerometerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
    MergeFrom(*source);
  }
}

void SubscribeCalibrateAccelerometerRequest::MergeFrom(const SubscribeCalibrateAccelerometerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCalibrateAccelerometerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCalibrateAccelerometerRequest::CopyFrom(const SubscribeCalibrateAccelerometerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCalibrateAccelerometerRequest::IsInitialized() const {
  return true;
}

void SubscribeCalibrateAccelerometerRequest::Swap(SubscribeCalibrateAccelerometerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeCalibrateAccelerometerRequest::InternalSwap(SubscribeCalibrateAccelerometerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeCalibrateAccelerometerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CalibrateAccelerometerResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::calibration::_CalibrateAccelerometerResponse_default_instance_._instance.get_mutable()->calibration_result_ = const_cast< ::mavsdk::rpc::calibration::CalibrationResult*>(
      ::mavsdk::rpc::calibration::CalibrationResult::internal_default_instance());
  ::mavsdk::rpc::calibration::_CalibrateAccelerometerResponse_default_instance_._instance.get_mutable()->progress_data_ = const_cast< ::mavsdk::rpc::calibration::ProgressData*>(
      ::mavsdk::rpc::calibration::ProgressData::internal_default_instance());
}
class CalibrateAccelerometerResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result(const CalibrateAccelerometerResponse* msg);
  static const ::mavsdk::rpc::calibration::ProgressData& progress_data(const CalibrateAccelerometerResponse* msg);
};

const ::mavsdk::rpc::calibration::CalibrationResult&
CalibrateAccelerometerResponse::HasBitSetters::calibration_result(const CalibrateAccelerometerResponse* msg) {
  return *msg->calibration_result_;
}
const ::mavsdk::rpc::calibration::ProgressData&
CalibrateAccelerometerResponse::HasBitSetters::progress_data(const CalibrateAccelerometerResponse* msg) {
  return *msg->progress_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrateAccelerometerResponse::kCalibrationResultFieldNumber;
const int CalibrateAccelerometerResponse::kProgressDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrateAccelerometerResponse::CalibrateAccelerometerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
}
CalibrateAccelerometerResponse::CalibrateAccelerometerResponse(const CalibrateAccelerometerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calibration_result()) {
    calibration_result_ = new ::mavsdk::rpc::calibration::CalibrationResult(*from.calibration_result_);
  } else {
    calibration_result_ = nullptr;
  }
  if (from.has_progress_data()) {
    progress_data_ = new ::mavsdk::rpc::calibration::ProgressData(*from.progress_data_);
  } else {
    progress_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
}

void CalibrateAccelerometerResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CalibrateAccelerometerResponse_calibration_2fcalibration_2eproto.base);
  ::memset(&calibration_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_data_) -
      reinterpret_cast<char*>(&calibration_result_)) + sizeof(progress_data_));
}

CalibrateAccelerometerResponse::~CalibrateAccelerometerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  SharedDtor();
}

void CalibrateAccelerometerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete calibration_result_;
  if (this != internal_default_instance()) delete progress_data_;
}

void CalibrateAccelerometerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrateAccelerometerResponse& CalibrateAccelerometerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CalibrateAccelerometerResponse_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CalibrateAccelerometerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrateAccelerometerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CalibrateAccelerometerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::CalibrationResult::_InternalParse;
        object = msg->mutable_calibration_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::ProgressData::_InternalParse;
        object = msg->mutable_progress_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrateAccelerometerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_progress_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrateAccelerometerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::calibration_result(this), output);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::progress_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
}

::google::protobuf::uint8* CalibrateAccelerometerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::calibration_result(this), target);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::progress_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  return target;
}

size_t CalibrateAccelerometerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *calibration_result_);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *progress_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrateAccelerometerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrateAccelerometerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CalibrateAccelerometerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
    MergeFrom(*source);
  }
}

void CalibrateAccelerometerResponse::MergeFrom(const CalibrateAccelerometerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calibration_result()) {
    mutable_calibration_result()->::mavsdk::rpc::calibration::CalibrationResult::MergeFrom(from.calibration_result());
  }
  if (from.has_progress_data()) {
    mutable_progress_data()->::mavsdk::rpc::calibration::ProgressData::MergeFrom(from.progress_data());
  }
}

void CalibrateAccelerometerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrateAccelerometerResponse::CopyFrom(const CalibrateAccelerometerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateAccelerometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrateAccelerometerResponse::IsInitialized() const {
  return true;
}

void CalibrateAccelerometerResponse::Swap(CalibrateAccelerometerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrateAccelerometerResponse::InternalSwap(CalibrateAccelerometerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(calibration_result_, other->calibration_result_);
  swap(progress_data_, other->progress_data_);
}

::google::protobuf::Metadata CalibrateAccelerometerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeCalibrateMagnetometerRequest::InitAsDefaultInstance() {
}
class SubscribeCalibrateMagnetometerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeCalibrateMagnetometerRequest::SubscribeCalibrateMagnetometerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
}
SubscribeCalibrateMagnetometerRequest::SubscribeCalibrateMagnetometerRequest(const SubscribeCalibrateMagnetometerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
}

void SubscribeCalibrateMagnetometerRequest::SharedCtor() {
}

SubscribeCalibrateMagnetometerRequest::~SubscribeCalibrateMagnetometerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  SharedDtor();
}

void SubscribeCalibrateMagnetometerRequest::SharedDtor() {
}

void SubscribeCalibrateMagnetometerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCalibrateMagnetometerRequest& SubscribeCalibrateMagnetometerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeCalibrateMagnetometerRequest_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCalibrateMagnetometerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeCalibrateMagnetometerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeCalibrateMagnetometerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeCalibrateMagnetometerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeCalibrateMagnetometerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
}

::google::protobuf::uint8* SubscribeCalibrateMagnetometerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  return target;
}

size_t SubscribeCalibrateMagnetometerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCalibrateMagnetometerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCalibrateMagnetometerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeCalibrateMagnetometerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
    MergeFrom(*source);
  }
}

void SubscribeCalibrateMagnetometerRequest::MergeFrom(const SubscribeCalibrateMagnetometerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCalibrateMagnetometerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCalibrateMagnetometerRequest::CopyFrom(const SubscribeCalibrateMagnetometerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateMagnetometerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCalibrateMagnetometerRequest::IsInitialized() const {
  return true;
}

void SubscribeCalibrateMagnetometerRequest::Swap(SubscribeCalibrateMagnetometerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeCalibrateMagnetometerRequest::InternalSwap(SubscribeCalibrateMagnetometerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeCalibrateMagnetometerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CalibrateMagnetometerResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::calibration::_CalibrateMagnetometerResponse_default_instance_._instance.get_mutable()->calibration_result_ = const_cast< ::mavsdk::rpc::calibration::CalibrationResult*>(
      ::mavsdk::rpc::calibration::CalibrationResult::internal_default_instance());
  ::mavsdk::rpc::calibration::_CalibrateMagnetometerResponse_default_instance_._instance.get_mutable()->progress_data_ = const_cast< ::mavsdk::rpc::calibration::ProgressData*>(
      ::mavsdk::rpc::calibration::ProgressData::internal_default_instance());
}
class CalibrateMagnetometerResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result(const CalibrateMagnetometerResponse* msg);
  static const ::mavsdk::rpc::calibration::ProgressData& progress_data(const CalibrateMagnetometerResponse* msg);
};

const ::mavsdk::rpc::calibration::CalibrationResult&
CalibrateMagnetometerResponse::HasBitSetters::calibration_result(const CalibrateMagnetometerResponse* msg) {
  return *msg->calibration_result_;
}
const ::mavsdk::rpc::calibration::ProgressData&
CalibrateMagnetometerResponse::HasBitSetters::progress_data(const CalibrateMagnetometerResponse* msg) {
  return *msg->progress_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrateMagnetometerResponse::kCalibrationResultFieldNumber;
const int CalibrateMagnetometerResponse::kProgressDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrateMagnetometerResponse::CalibrateMagnetometerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
}
CalibrateMagnetometerResponse::CalibrateMagnetometerResponse(const CalibrateMagnetometerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calibration_result()) {
    calibration_result_ = new ::mavsdk::rpc::calibration::CalibrationResult(*from.calibration_result_);
  } else {
    calibration_result_ = nullptr;
  }
  if (from.has_progress_data()) {
    progress_data_ = new ::mavsdk::rpc::calibration::ProgressData(*from.progress_data_);
  } else {
    progress_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
}

void CalibrateMagnetometerResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CalibrateMagnetometerResponse_calibration_2fcalibration_2eproto.base);
  ::memset(&calibration_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_data_) -
      reinterpret_cast<char*>(&calibration_result_)) + sizeof(progress_data_));
}

CalibrateMagnetometerResponse::~CalibrateMagnetometerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  SharedDtor();
}

void CalibrateMagnetometerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete calibration_result_;
  if (this != internal_default_instance()) delete progress_data_;
}

void CalibrateMagnetometerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrateMagnetometerResponse& CalibrateMagnetometerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CalibrateMagnetometerResponse_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CalibrateMagnetometerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrateMagnetometerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CalibrateMagnetometerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::CalibrationResult::_InternalParse;
        object = msg->mutable_calibration_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::ProgressData::_InternalParse;
        object = msg->mutable_progress_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrateMagnetometerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_progress_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrateMagnetometerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::calibration_result(this), output);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::progress_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
}

::google::protobuf::uint8* CalibrateMagnetometerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::calibration_result(this), target);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::progress_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  return target;
}

size_t CalibrateMagnetometerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *calibration_result_);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *progress_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrateMagnetometerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrateMagnetometerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CalibrateMagnetometerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
    MergeFrom(*source);
  }
}

void CalibrateMagnetometerResponse::MergeFrom(const CalibrateMagnetometerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calibration_result()) {
    mutable_calibration_result()->::mavsdk::rpc::calibration::CalibrationResult::MergeFrom(from.calibration_result());
  }
  if (from.has_progress_data()) {
    mutable_progress_data()->::mavsdk::rpc::calibration::ProgressData::MergeFrom(from.progress_data());
  }
}

void CalibrateMagnetometerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrateMagnetometerResponse::CopyFrom(const CalibrateMagnetometerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateMagnetometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrateMagnetometerResponse::IsInitialized() const {
  return true;
}

void CalibrateMagnetometerResponse::Swap(CalibrateMagnetometerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrateMagnetometerResponse::InternalSwap(CalibrateMagnetometerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(calibration_result_, other->calibration_result_);
  swap(progress_data_, other->progress_data_);
}

::google::protobuf::Metadata CalibrateMagnetometerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SubscribeCalibrateGimbalAccelerometerRequest::InitAsDefaultInstance() {
}
class SubscribeCalibrateGimbalAccelerometerRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeCalibrateGimbalAccelerometerRequest::SubscribeCalibrateGimbalAccelerometerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
}
SubscribeCalibrateGimbalAccelerometerRequest::SubscribeCalibrateGimbalAccelerometerRequest(const SubscribeCalibrateGimbalAccelerometerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
}

void SubscribeCalibrateGimbalAccelerometerRequest::SharedCtor() {
}

SubscribeCalibrateGimbalAccelerometerRequest::~SubscribeCalibrateGimbalAccelerometerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  SharedDtor();
}

void SubscribeCalibrateGimbalAccelerometerRequest::SharedDtor() {
}

void SubscribeCalibrateGimbalAccelerometerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCalibrateGimbalAccelerometerRequest& SubscribeCalibrateGimbalAccelerometerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubscribeCalibrateGimbalAccelerometerRequest_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCalibrateGimbalAccelerometerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeCalibrateGimbalAccelerometerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubscribeCalibrateGimbalAccelerometerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeCalibrateGimbalAccelerometerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeCalibrateGimbalAccelerometerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
}

::google::protobuf::uint8* SubscribeCalibrateGimbalAccelerometerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  return target;
}

size_t SubscribeCalibrateGimbalAccelerometerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCalibrateGimbalAccelerometerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCalibrateGimbalAccelerometerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SubscribeCalibrateGimbalAccelerometerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
    MergeFrom(*source);
  }
}

void SubscribeCalibrateGimbalAccelerometerRequest::MergeFrom(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCalibrateGimbalAccelerometerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCalibrateGimbalAccelerometerRequest::CopyFrom(const SubscribeCalibrateGimbalAccelerometerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerometerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCalibrateGimbalAccelerometerRequest::IsInitialized() const {
  return true;
}

void SubscribeCalibrateGimbalAccelerometerRequest::Swap(SubscribeCalibrateGimbalAccelerometerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeCalibrateGimbalAccelerometerRequest::InternalSwap(SubscribeCalibrateGimbalAccelerometerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SubscribeCalibrateGimbalAccelerometerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CalibrateGimbalAccelerometerResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::calibration::_CalibrateGimbalAccelerometerResponse_default_instance_._instance.get_mutable()->calibration_result_ = const_cast< ::mavsdk::rpc::calibration::CalibrationResult*>(
      ::mavsdk::rpc::calibration::CalibrationResult::internal_default_instance());
  ::mavsdk::rpc::calibration::_CalibrateGimbalAccelerometerResponse_default_instance_._instance.get_mutable()->progress_data_ = const_cast< ::mavsdk::rpc::calibration::ProgressData*>(
      ::mavsdk::rpc::calibration::ProgressData::internal_default_instance());
}
class CalibrateGimbalAccelerometerResponse::HasBitSetters {
 public:
  static const ::mavsdk::rpc::calibration::CalibrationResult& calibration_result(const CalibrateGimbalAccelerometerResponse* msg);
  static const ::mavsdk::rpc::calibration::ProgressData& progress_data(const CalibrateGimbalAccelerometerResponse* msg);
};

const ::mavsdk::rpc::calibration::CalibrationResult&
CalibrateGimbalAccelerometerResponse::HasBitSetters::calibration_result(const CalibrateGimbalAccelerometerResponse* msg) {
  return *msg->calibration_result_;
}
const ::mavsdk::rpc::calibration::ProgressData&
CalibrateGimbalAccelerometerResponse::HasBitSetters::progress_data(const CalibrateGimbalAccelerometerResponse* msg) {
  return *msg->progress_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrateGimbalAccelerometerResponse::kCalibrationResultFieldNumber;
const int CalibrateGimbalAccelerometerResponse::kProgressDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrateGimbalAccelerometerResponse::CalibrateGimbalAccelerometerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
}
CalibrateGimbalAccelerometerResponse::CalibrateGimbalAccelerometerResponse(const CalibrateGimbalAccelerometerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_calibration_result()) {
    calibration_result_ = new ::mavsdk::rpc::calibration::CalibrationResult(*from.calibration_result_);
  } else {
    calibration_result_ = nullptr;
  }
  if (from.has_progress_data()) {
    progress_data_ = new ::mavsdk::rpc::calibration::ProgressData(*from.progress_data_);
  } else {
    progress_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
}

void CalibrateGimbalAccelerometerResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CalibrateGimbalAccelerometerResponse_calibration_2fcalibration_2eproto.base);
  ::memset(&calibration_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_data_) -
      reinterpret_cast<char*>(&calibration_result_)) + sizeof(progress_data_));
}

CalibrateGimbalAccelerometerResponse::~CalibrateGimbalAccelerometerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  SharedDtor();
}

void CalibrateGimbalAccelerometerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete calibration_result_;
  if (this != internal_default_instance()) delete progress_data_;
}

void CalibrateGimbalAccelerometerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrateGimbalAccelerometerResponse& CalibrateGimbalAccelerometerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CalibrateGimbalAccelerometerResponse_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CalibrateGimbalAccelerometerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && calibration_result_ != nullptr) {
    delete calibration_result_;
  }
  calibration_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && progress_data_ != nullptr) {
    delete progress_data_;
  }
  progress_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrateGimbalAccelerometerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CalibrateGimbalAccelerometerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::CalibrationResult::_InternalParse;
        object = msg->mutable_calibration_result();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::mavsdk::rpc::calibration::ProgressData::_InternalParse;
        object = msg->mutable_progress_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrateGimbalAccelerometerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_calibration_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_progress_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrateGimbalAccelerometerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::calibration_result(this), output);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::progress_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
}

::google::protobuf::uint8* CalibrateGimbalAccelerometerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::calibration_result(this), target);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::progress_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  return target;
}

size_t CalibrateGimbalAccelerometerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;
  if (this->has_calibration_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *calibration_result_);
  }

  // .mavsdk.rpc.calibration.ProgressData progress_data = 2;
  if (this->has_progress_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *progress_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrateGimbalAccelerometerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrateGimbalAccelerometerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CalibrateGimbalAccelerometerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
    MergeFrom(*source);
  }
}

void CalibrateGimbalAccelerometerResponse::MergeFrom(const CalibrateGimbalAccelerometerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_calibration_result()) {
    mutable_calibration_result()->::mavsdk::rpc::calibration::CalibrationResult::MergeFrom(from.calibration_result());
  }
  if (from.has_progress_data()) {
    mutable_progress_data()->::mavsdk::rpc::calibration::ProgressData::MergeFrom(from.progress_data());
  }
}

void CalibrateGimbalAccelerometerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrateGimbalAccelerometerResponse::CopyFrom(const CalibrateGimbalAccelerometerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrateGimbalAccelerometerResponse::IsInitialized() const {
  return true;
}

void CalibrateGimbalAccelerometerResponse::Swap(CalibrateGimbalAccelerometerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrateGimbalAccelerometerResponse::InternalSwap(CalibrateGimbalAccelerometerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(calibration_result_, other->calibration_result_);
  swap(progress_data_, other->progress_data_);
}

::google::protobuf::Metadata CalibrateGimbalAccelerometerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CancelRequest::InitAsDefaultInstance() {
}
class CancelRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelRequest::CancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.CancelRequest)
}
CancelRequest::CancelRequest(const CancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CancelRequest)
}

void CancelRequest::SharedCtor() {
}

CancelRequest::~CancelRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CancelRequest)
  SharedDtor();
}

void CancelRequest::SharedDtor() {
}

void CancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelRequest& CancelRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CancelRequest_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CancelRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CancelRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.CancelRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.CancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.CancelRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.CancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.CancelRequest)
}

::google::protobuf::uint8* CancelRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CancelRequest)
  return target;
}

size_t CancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.CancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CancelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.CancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.CancelRequest)
    MergeFrom(*source);
  }
}

void CancelRequest::MergeFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelRequest::CopyFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRequest::IsInitialized() const {
  return true;
}

void CancelRequest::Swap(CancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelRequest::InternalSwap(CancelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CancelResponse::InitAsDefaultInstance() {
}
class CancelResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelResponse::CancelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.CancelResponse)
}
CancelResponse::CancelResponse(const CancelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CancelResponse)
}

void CancelResponse::SharedCtor() {
}

CancelResponse::~CancelResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CancelResponse)
  SharedDtor();
}

void CancelResponse::SharedDtor() {
}

void CancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelResponse& CancelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CancelResponse_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CancelResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CancelResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.CancelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.CancelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.CancelResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.CancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.CancelResponse)
}

::google::protobuf::uint8* CancelResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CancelResponse)
  return target;
}

size_t CancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CancelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.CancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CancelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.CancelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.CancelResponse)
    MergeFrom(*source);
  }
}

void CancelResponse::MergeFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelResponse::CopyFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponse::IsInitialized() const {
  return true;
}

void CancelResponse::Swap(CancelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelResponse::InternalSwap(CancelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CancelResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CalibrationResult::InitAsDefaultInstance() {
}
class CalibrationResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalibrationResult::kResultFieldNumber;
const int CalibrationResult::kResultStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalibrationResult::CalibrationResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.CalibrationResult)
}
CalibrationResult::CalibrationResult(const CalibrationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result_str().size() > 0) {
    result_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.CalibrationResult)
}

void CalibrationResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CalibrationResult_calibration_2fcalibration_2eproto.base);
  result_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CalibrationResult::~CalibrationResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.CalibrationResult)
  SharedDtor();
}

void CalibrationResult::SharedDtor() {
  result_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CalibrationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalibrationResult& CalibrationResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CalibrationResult_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void CalibrationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.CalibrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalibrationResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CalibrationResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_result(static_cast<::mavsdk::rpc::calibration::CalibrationResult_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string result_str = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.calibration.CalibrationResult.result_str");
        object = msg->mutable_result_str();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalibrationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.CalibrationResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::mavsdk::rpc::calibration::CalibrationResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_str().data(), static_cast<int>(this->result_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.calibration.CalibrationResult.result_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.CalibrationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.CalibrationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalibrationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.CalibrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_str().data(), static_cast<int>(this->result_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.calibration.CalibrationResult.result_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result_str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.CalibrationResult)
}

::google::protobuf::uint8* CalibrationResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.CalibrationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_str().data(), static_cast<int>(this->result_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.calibration.CalibrationResult.result_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result_str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.CalibrationResult)
  return target;
}

size_t CalibrationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.CalibrationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_str());
  }

  // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.CalibrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationResult* source =
      ::google::protobuf::DynamicCastToGenerated<CalibrationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.CalibrationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.CalibrationResult)
    MergeFrom(*source);
  }
}

void CalibrationResult::MergeFrom(const CalibrationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.CalibrationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void CalibrationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.CalibrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationResult::CopyFrom(const CalibrationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.CalibrationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationResult::IsInitialized() const {
  return true;
}

void CalibrationResult::Swap(CalibrationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalibrationResult::InternalSwap(CalibrationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata CalibrationResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProgressData::InitAsDefaultInstance() {
}
class ProgressData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgressData::kHasProgressFieldNumber;
const int ProgressData::kProgressFieldNumber;
const int ProgressData::kHasStatusTextFieldNumber;
const int ProgressData::kStatusTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgressData::ProgressData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.calibration.ProgressData)
}
ProgressData::ProgressData(const ProgressData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status_text().size() > 0) {
    status_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_text_);
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_status_text_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(has_status_text_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.calibration.ProgressData)
}

void ProgressData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProgressData_calibration_2fcalibration_2eproto.base);
  status_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_status_text_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(has_status_text_));
}

ProgressData::~ProgressData() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.calibration.ProgressData)
  SharedDtor();
}

void ProgressData::SharedDtor() {
  status_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProgressData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProgressData& ProgressData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProgressData_calibration_2fcalibration_2eproto.base);
  return *internal_default_instance();
}


void ProgressData::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.calibration.ProgressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_status_text_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(has_status_text_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProgressData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProgressData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool has_progress = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_has_progress(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float progress = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_progress(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bool has_status_text = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_has_status_text(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string status_text = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("mavsdk.rpc.calibration.ProgressData.status_text");
        object = msg->mutable_status_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProgressData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.calibration.ProgressData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool has_progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_status_text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_status_text_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status_text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status_text().data(), static_cast<int>(this->status_text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.calibration.ProgressData.status_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.calibration.ProgressData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.calibration.ProgressData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProgressData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mavsdk.rpc.calibration.ProgressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_progress = 1;
  if (this->has_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_progress(), output);
  }

  // float progress = 2;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->progress(), output);
  }

  // bool has_status_text = 3;
  if (this->has_status_text() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_status_text(), output);
  }

  // string status_text = 4;
  if (this->status_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_text().data(), static_cast<int>(this->status_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.calibration.ProgressData.status_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->status_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mavsdk.rpc.calibration.ProgressData)
}

::google::protobuf::uint8* ProgressData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.calibration.ProgressData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_progress = 1;
  if (this->has_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_progress(), target);
  }

  // float progress = 2;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->progress(), target);
  }

  // bool has_status_text = 3;
  if (this->has_status_text() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_status_text(), target);
  }

  // string status_text = 4;
  if (this->status_text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status_text().data(), static_cast<int>(this->status_text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.calibration.ProgressData.status_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.calibration.ProgressData)
  return target;
}

size_t ProgressData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.calibration.ProgressData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status_text = 4;
  if (this->status_text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_text());
  }

  // float progress = 2;
  if (this->progress() != 0) {
    total_size += 1 + 4;
  }

  // bool has_progress = 1;
  if (this->has_progress() != 0) {
    total_size += 1 + 1;
  }

  // bool has_status_text = 3;
  if (this->has_status_text() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProgressData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.calibration.ProgressData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgressData* source =
      ::google::protobuf::DynamicCastToGenerated<ProgressData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.calibration.ProgressData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.calibration.ProgressData)
    MergeFrom(*source);
  }
}

void ProgressData::MergeFrom(const ProgressData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.calibration.ProgressData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_text().size() > 0) {

    status_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_text_);
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.has_progress() != 0) {
    set_has_progress(from.has_progress());
  }
  if (from.has_status_text() != 0) {
    set_has_status_text(from.has_status_text());
  }
}

void ProgressData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.calibration.ProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressData::CopyFrom(const ProgressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.calibration.ProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressData::IsInitialized() const {
  return true;
}

void ProgressData::Swap(ProgressData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProgressData::InternalSwap(ProgressData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_text_.Swap(&other->status_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
  swap(has_progress_, other->has_progress_);
  swap(has_status_text_, other->has_status_text_);
}

::google::protobuf::Metadata ProgressData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_calibration_2fcalibration_2eproto);
  return ::file_level_metadata_calibration_2fcalibration_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace calibration
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::SubscribeCalibrateGyroRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::CalibrateGyroResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::CalibrateGyroResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::CalibrateGyroResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::SubscribeCalibrateAccelerometerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::CalibrateAccelerometerResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::CalibrateAccelerometerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::CalibrateAccelerometerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::SubscribeCalibrateMagnetometerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::CalibrateMagnetometerResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::CalibrateMagnetometerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::CalibrateMagnetometerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::SubscribeCalibrateGimbalAccelerometerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::CalibrateGimbalAccelerometerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::CancelRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::CancelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::CancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::CancelResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::CancelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::CancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::CalibrationResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::CalibrationResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::CalibrationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::calibration::ProgressData* Arena::CreateMaybeMessage< ::mavsdk::rpc::calibration::ProgressData >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::calibration::ProgressData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
